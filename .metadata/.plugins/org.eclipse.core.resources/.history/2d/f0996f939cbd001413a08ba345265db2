/*
 * generated by Xtext
 */
package org.xtext.example.pascal.validation

import java.util.ArrayList
import java.util.HashMap
import java.util.List
import java.util.Map
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check
import org.xtext.example.pascal.pascal.block
import org.xtext.example.pascal.pascal.type
import org.xtext.example.pascal.pascal.variable
import org.xtext.example.pascal.pascal.variable_section

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class PascalValidator extends AbstractPascalValidator {
	
	private Map<EObject, List<Variable>> variables = new HashMap<EObject, List<Variable>>();
	
	private static class Variable {
		
		String name;
		type type;
		boolean inherited;
		
		@Override
		def equals(Object obj) {
			
		}
	}
	
	@Check
	def checkVariableDeclaration(block block) {		
		variables.put(block, new ArrayList<Variable>());
		for (variable_section section : block.declaration.variable.sections) {
			for (String name : section.identifiers.names) { 
				if (variables.get(block).contains(name)) {
					error("Variable was redeclared.", section.identifiers.eContainingFeature);
				} else {
					variables.get(block).put(name.toLowerCase(), section.type);
					for (block subblock : block.declaration.procedure.declarations.filter(block.class)) {
						variables.get(subblock).put(name.toLowerCase(), section.type);
					}
				}
			}
		}
		for (variable variable : block.statement.sequence.statements.filter(variable)) {
			if (!variables.get(block).containsKey(variable.name.toLowerCase())) {
				error("Variable was not declared.", variable.eContainingFeature);
			}
		}
	}
	
	/*
	//coloca as variáveis dentro do bloco var dentro de um mapa com seus respectivos mapas
	@Check
	def checkVariableWasDeclared(variable_declaration_part variable) {
		 for (record_section record : variable.sections) {
		 	for (String id : record.identifiers.names) {
		 		variables.put(id, record.type);
		 	}
		 }
	}
	
	@Check
	def checkVariableWasDeclared(variable variable) {
		//variável não foi declarada
		if (!variables.containsKey(variable.name)) {
			error("Variable was not declared", PascalPackage.Literals.ASSIGNMENT_STATEMENT__VARIABLE);
		}
	} 
	
	@Check 
	def checkVariableWasDeclared(assignment_statement variable) {
		//variável não foi declarada
		if (!variables.containsKey(variable.variable.name)) {
			error("Variable was not declared", PascalPackage.Literals.ASSIGNMENT_STATEMENT__VARIABLE);
		}
	}

  public static val INVALID_NAME = 'invalidName'

	@Check
	def checkGreetingStartsWithCapital(pascal p) {
		if (!Character.isUpperCase(p.name.charAt(0))) {
			warning('Name should start with a capital', 
					MyDslPackage.Literals.GREETING__NAME,
					INVALID_NAME)
		} 
	} */
}

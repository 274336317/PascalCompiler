/*
 * generated by Xtext
 */
package org.xtext.example.pascal.generator

import java.util.HashMap
import java.util.Map
import java.util.Set
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.xtext.example.pascal.pascal.block
import org.xtext.example.pascal.pascal.expression
import org.xtext.example.pascal.pascal.factor
import org.xtext.example.pascal.pascal.function_designator
import org.xtext.example.pascal.pascal.program
import org.xtext.example.pascal.pascal.statement_part
import org.xtext.example.pascal.pascal.term
import org.xtext.example.pascal.validation.ComposedType
import org.xtext.example.pascal.validation.ComposedTypeKind
import org.xtext.example.pascal.validation.ElementType
import org.xtext.example.pascal.validation.PascalValidator
import org.xtext.example.pascal.validation.Type
import org.xtext.example.pascal.validation.Variable

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class PascalGenerator implements IGenerator {
	
	private HashMap<String, String> stringTable = new HashMap<String, String>();
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (e: resource.allContents.toIterable.filter(program)) {
			fsa.generateFile(e.heading.name + ".asm", e.compile);
		}
	}

	def createStringTable(program e) {
		stringTable.clear();
		for (s : e.eAllContents.toIterable.filter(factor)) {
			if (s.string != null) {
				if (!stringTable.containsKey(s.string)) {
					stringTable.put(s.string, "__STRING_" + stringTable.size());
				}
			}
		}
	}
	
	def getVariables(program e, block b) {
		var artefacts = PascalValidator.artefacts.get(e.heading.name);
		var map = artefacts.get("variables") as Map<block, Set<Variable>>;
		//memoryCount.put(b, memoryInit);
		createStringTable(e);
		return map.get(b);
	}
	
	def intToHex(int x) {
		return String.format("0x%x", x);
	}
	
	def getNumberOfBytes(Variable v) {
		var type = v.varType.realType.toLowerCase;
		if (type.equals("boolean") || type.equals("shortint")) {
			return 1;
		} else if (type.equals("char")) {
			return 2;
		} else if (type.equals("integer")) {
			return 4;
		} else if (type.equals("longint") || type.equals("real")) {
			return 8;
		} 
		return 8;
	}
	
	def getValue(Variable v) {
		if (v.value instanceof String) {
			return "'" + v.value + "'";
		} else if (v.value instanceof Boolean) {
			if (v.value.equals(true)) {
				return 1;
			} else {
				return 0;
			}
		}
		return v.value;
	}
	
	def compile(program e) '''
	; Program «e.heading.name»
	global _main
	
	extern _printf
	extern _scanf 
	
	«e.block.compile(e.getVariables(e.block))» 
	
	; Code
	section .text
	_main:
	«e.block.statement.compile(e.block)» 
	RET	; Exit program
	'''

	def compile(block b, Set<Variable> variables) ''' 
	; Loading global constants
	section .data
	__NEW_LINE db 10
	«FOR s : stringTable.keySet» 
		«new Variable(stringTable.get(s), new ComposedType(new Type("char"), ComposedTypeKind.ARRAY), 
			false, ElementType.CONSTANT, s).compileGlobalConstant(b)»
	«ENDFOR»
	«FOR v : variables»
		«v.compileGlobalConstant(b)»
	«ENDFOR»
	
	; Loading global variables
	section .bss
	«FOR v : variables»
		«v.compileGlobalVariables(b)»
	«ENDFOR» 
	'''
	 
	def compileGlobalConstant(Variable v, block b) '''
	«IF v.type == ElementType.CONSTANT»
		«IF v.varType.realType.toLowerCase.equals("array of char")» 
			«v.name» db '«getValue(v)»'
		«ELSE»
			«v.name» equ «getValue(v)»
		«ENDIF»
	«ENDIF»
	'''
	
	def compileGlobalVariables(Variable v, block b) '''
	«IF v.type == ElementType.VARIABLE»
		«v.name» RESB «getNumberOfBytes(v)»
	«ENDIF»
	'''

	def computeFactor(factor f, String dstRegister) '''
	«IF f.string != null»
		mov «dstRegister», «stringTable.get(f.string)»
	«ENDIF»
	'''
	
	def computeTerm(term t, String dstRegister) '''
	«FOR f : t.factors»
		«computeFactor(f, dstRegister)»
	«ENDFOR»
	'''
	
	def computeExpression(expression e, String dstRegister) '''
	«FOR expr : e.expressions»
		«FOR t : expr.terms»
			«computeTerm(t, dstRegister)»
		«ENDFOR»
	«ENDFOR»
	'''
	
	def print(String register) '''
	; Print
	sub esp, 4
	mov [esp], «register»
	call _printf
	add esp, 4
	
	'''
	
	def print(function_designator function) '''
	«IF function.expressions == null»
		«print("__NEW_LINE")»
	«ELSE»
		«computeExpression(function.expressions.expressions.get(0), "eax")»
		«print("eax")»
	«ENDIF»
	'''
	
	def compile(statement_part part, block b) '''
	«FOR s : part.sequence.statements»
		«IF s.simple != null»
			«IF s.simple.function_noargs != null»
				«IF s.simple.function_noargs.equals("writeln")»
					«print("__NEW_LINE")»
				«ENDIF»
			«ELSEIF s.simple.function != null»
				«IF s.simple.function.name.equals("write")»
					«print(s.simple.function)»
				«ELSEIF s.simple.function.name.equals("writeln")»
					«print(s.simple.function)»
					«print("__NEW_LINE")»
				«ENDIF»
			«ENDIF»
		«ENDIF»
	«ENDFOR» 
	'''
	
}

/*
 * generated by Xtext
 */
package org.xtext.example.pascal.validation

import java.util.HashMap
import java.util.HashSet
import java.util.Map
import java.util.Set
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.xtext.validation.Check
import org.xtext.example.pascal.pascal.PascalPackage
import org.xtext.example.pascal.pascal.block
import org.xtext.example.pascal.pascal.constant_definition
import org.xtext.example.pascal.pascal.procedure_declaration

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class PascalValidator extends AbstractPascalValidator {
	
	private Map<EObject, Set<Error>> errorList = new HashMap<EObject, Set<Error>>();
	private Map<EObject, Set<Variable>> variables = new HashMap<EObject, Set<Variable>>();
	
	def search(Set<Variable> variables, Variable key) {
		for (Variable v : variables) {
			if (v.equals(key))
				return v;
		} 
		return null;	
	}
	
	def clear(block block, VariableType varType) {
		if (!variables.containsKey(block)) {
			variables.put(block, new HashSet<Variable>());
		} else {
			var newSet = new HashSet<Variable>();
			for (Variable v : variables.get(block)) {
				if (v.varType != varType || v.isInherited) {
					newSet.add(v);
				}	
			} 
			variables.put(block, newSet);
		}
	}
	
	def insertError(EObject object, String message, ErrorType type, EStructuralFeature feature) {
		if (!errorList.containsKey(object)) {
			errorList.put(object, new HashSet<Error>());
		}
		errorList.get(object).add(new Error(message, type, feature));
	}
	
	def removeError(EObject object, ErrorType type) {
		if (!errorList.containsKey(object)) {
			errorList.put(object, new HashSet<Error>());
		}
		errorList.get(object).remove(new Error(type));
	} 
	
	@Check
	def checkConstantRedeclaration(block block) {
		clear(block, VariableType.CONSTANT);
		for (constant_definition const : block.declaration.constant.consts) {
			var tempConst = new Variable(const.name, null, false, VariableType.CONSTANT);
			var searchConst = search(variables.get(block), tempConst); 
			if (searchConst != null && !searchConst.isInherited) { 
				if (searchConst.varType == VariableType.PARAMETER) {
					insertError(const, "Identifier is already being used by a parameter.", ErrorType.REDECLARATION, PascalPackage.Literals.CONSTANT_DEFINITION__NAME);
				} else if (searchConst.varType == VariableType.VARIABLE) {
					insertError(const, "Identifier is already being used by a constant.", ErrorType.REDECLARATION, PascalPackage.Literals.CONSTANT_DEFINITION__NAME);
				} else {
					insertError(const, "Constant cannot be redeclared.", ErrorType.REDECLARATION, PascalPackage.Literals.CONSTANT_DEFINITION__NAME);
				}
			} else { 
				removeError(const, ErrorType.REDECLARATION);
				variables.get(block).remove(searchConst);
				variables.get(block).add(tempConst);
				for (procedure_declaration declaration : block.declaration.procedure.procedures) {
					  
			
				}
			}
		}
	}
	
	@Check
	def checkVariableRedeclaration(block block) {		
		clear(block, VariableType.VARIABLE);
		for (variable_section section : block.declaration.variable.sections) {
			for (String name : section.identifiers.names) { 
				var tempVariable = new Variable(name, section.type, false, VariableType.VARIABLE);
				var searchVariable = search(variables.get(block), tempVariable);
				if (searchVariable != null && !searchVariable.isInherited) {
					if (searchVariable.varType == VariableType.PARAMETER) {
						insertError(section, "Identifier is already being used by a parameter.", ErrorType.REDECLARATION, PascalPackage.Literals.VARIABLE_SECTION__IDENTIFIERS);
					} else if (searchVariable.varType == VariableType.CONSTANT) {
						insertError(section, "Identifier is already being used by a constant.", ErrorType.REDECLARATION, PascalPackage.Literals.VARIABLE_SECTION__IDENTIFIERS);
					} else {
						insertError(section, "Variable cannot be redeclared.", ErrorType.REDECLARATION, PascalPackage.Literals.VARIABLE_SECTION__IDENTIFIERS);
					}
				} else { 
					removeError(section, ErrorType.REDECLARATION);
					variables.get(block).remove(searchVariable);
					variables.get(block).add(tempVariable)
					for (block subblock : block.declaration.procedure.declarations.filter(block.class)) {
						if (!variables.containsKey(subblock)) {
							variables.put(subblock, new HashSet<Variable>());
						}
						variables.get(subblock).add(new Variable(name, section.type, true, VariableType.VARIABLE));
						checkVariableRedeclaration(subblock);
					}
				}
			}
		}
	}
	
	@Check
	def checkVariableAssignment(block block) {
		for (statement stmt : block.statement.sequence.statements) {
			if (stmt.simple != null) {
				var simple = stmt.simple;
				if (simple.assignment != null) {
					var assignment = simple.assignment;
					var variable = assignment.variable;
					var searchVariable = search(variables.get(block), new Variable(variable.name));
					if (searchVariable == null) {
						insertError(variable, "Variable was not declared.", ErrorType.NOT_DECLARATION, PascalPackage.Literals.VARIABLE__NAME);
					} else {
						removeError(variable, ErrorType.NOT_DECLARATION);
						if (searchVariable.varType == VariableType.CONSTANT) {
							insertError(variable, "Constants cannot be assigned.", ErrorType.CONSTANT_ASSIGNMENT, PascalPackage.Literals.VARIABLE__NAME);
						} else {
							removeError(variable, ErrorType.CONSTANT_ASSIGNMENT);
						}
					}
				}
			}
		}
	}
	
	@Check
	def showError(EObject obj) {
		if (errorList.containsKey(obj)) {
			for (Error err : errorList.get(obj)) {
				error(err.message, err.feature);
			}
		}	 
	}
	
}

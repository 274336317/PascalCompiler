/*
 * generated by Xtext
 */
package org.xtext.example.pascal.validation

import java.util.HashMap
import java.util.HashSet
import java.util.Map
import java.util.Set
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check
import org.xtext.example.pascal.pascal.PascalPackage
import org.xtext.example.pascal.pascal.block
import org.xtext.example.pascal.pascal.constant_definition
import org.xtext.example.pascal.pascal.statement
import org.xtext.example.pascal.pascal.variable
import org.xtext.example.pascal.pascal.variable_section

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class PascalValidator extends AbstractPascalValidator {
	
	private Map<EObject, String> errorList = new HashMap<EObject, String>();
	private Map<EObject, Set<Variable>> variables = new HashMap<EObject, Set<Variable>>();
	
	def search(Set<Variable> variables, Variable key) {
		for (Variable v : variables) {
			if (v.equals(key))
				return v;
		}
		return null;	
	}
	
	def clearVariables(block block) {
		if (!variables.containsKey(block)) {
			variables.put(block, new HashSet<Variable>());
		} else {
			var newSet = new HashSet<Variable>();
			for (Variable v : variables.get(block)) {
				if (v.isInherited) {
					newSet.add(v);
				}	
			}
			variables.put(block, newSet);
		}
	}
	
	def clearConstants(block block) {
		if (!variables.containsKey(block)) {
			variables.put(block, new HashSet<Variable>());
		} else {
			var newSet = new HashSet<Variable>();
			for (Variable v : variables.get(block)) {
				if (v.isInherited || !v.isConstant) {
					newSet.add(v);
				}	
			}
			variables.put(block, newSet);
		}
	}
	
	@Check
	def checkVariableRedeclaration(block block) {		
		clearVariables(block);
		for (variable_section section : block.declaration.variable.sections) {
			for (String name : section.identifiers.names) { 
				var tempVariable = new Variable(name, section.type, false, false);
				var searchVariable = search(variables.get(block), tempVariable);
				if (searchVariable != null && !searchVariable.isInherited) {
					errorList.put(section, "Variable cannot be redeclared.");
				} else { 
					errorList.remove(section);
					variables.get(block).remove(searchVariable);
					variables.get(block).add(tempVariable)
					for (block subblock : block.declaration.procedure.declarations.filter(block.class)) {
						if (!variables.containsKey(subblock)) {
							variables.put(subblock, new HashSet<Variable>());
						}
						variables.get(subblock).add(new Variable(name, section.type, true, false));
					}
				}
			}
		}
	}
	
	@Check
	def checkConstantRedeclaration(block block) {
		clearConstants(block);
		for (constant_definition const : block.declaration.constant.consts) {
			var tempConst = new Variable(const.name, null, false, true);
			var searchConst = search(variables.get(block), tempConst); 
			if (searchConst != null && !searchConst.isInherited) { 
				errorList.put(const, "Constant cannot be redeclared.");
			} else { 
				errorList.remove(const); 
				variables.get(block).remove(searchConst);
				variables.get(block).add(tempConst);
				for (block subblock : block.declaration.procedure.declarations.filter(block.class)) {
					if (!variables.containsKey(subblock)) {
						variables.put(subblock, new HashSet<Variable>());
					}
					variables.get(subblock).add(new Variable(const.name, null, true, true));
				}
			}
		}
	}
	
	@Check
	def checkVariableDeclaration(block block) {
		for (statement stmt : block.statement.sequence.statements) {
			if (stmt.simple != null) {
				var simple = stmt.simple;
				if (simple.assignment != null) {
					var assignment = simple.assignment;
					var variable = assignment.variable;
					if (search(variables.get(block), new Variable(variable.name)) == null) {
						errorList.put(variable, "Variable was not declared.");
					} else {
						errorList.remove(variable);
					}
				}
			}
		}
	}
	
	@Check
	def showVariableRedeclarationError(variable_section section) {
		if (errorList.containsKey(section)) {
			error(errorList.get(section), PascalPackage.Literals.VARIABLE_SECTION__IDENTIFIERS);
		} 
	}

	@Check
	def showConstantRedeclarationError(constant_definition const) {
		if (errorList.containsKey(section)) {
			error(errorList.get(section), PascalPackage.Literals.CONSTANT_DEFINITION__NAME);
		} 	
	}
	
	@Check
	def showVariableNotDeclaredError(variable variable) {
		if (errorList.containsKey(variable)) {
			error(errorList.get(variable), PascalPackage.Literals.VARIABLE__NAME);
		} 
	}
	/*
	//coloca as variáveis dentro do bloco var dentro de um mapa com seus respectivos mapas
	@Check
	def checkVariableWasDeclared(variable_declaration_part variable) {
		 for (record_section record : variable.sections) {
		 	for (String id : record.identifiers.names) {
		 		variables.put(id, record.type);
		 	}
		 }
	}
	
	@Check
	def checkVariableWasDeclared(variable variable) {
		//variável não foi declarada
		if (!variables.containsKey(variable.name)) {
			error("Variable was not declared", PascalPackage.Literals.ASSIGNMENT_STATEMENT__VARIABLE);
		}
	} 
	
	@Check 
	def checkVariableWasDeclared(assignment_statement variable) {
		//variável não foi declarada
		if (!variables.containsKey(variable.variable.name)) {
			error("Variable was not declared", PascalPackage.Literals.ASSIGNMENT_STATEMENT__VARIABLE);
		}
	}

  public static val INVALID_NAME = 'invalidName'

	@Check
	def checkGreetingStartsWithCapital(pascal p) {
		if (!Character.isUpperCase(p.name.charAt(0))) {
			warning('Name should start with a capital', 
					MyDslPackage.Literals.GREETING__NAME,
					INVALID_NAME)
		} 
	} */
}

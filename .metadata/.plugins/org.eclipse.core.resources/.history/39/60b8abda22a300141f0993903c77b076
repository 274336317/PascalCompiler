grammar org.xtext.example.pascal.Pascal with org.eclipse.xtext.common.Terminals

generate pascal "http://www.xtext.org/example/pascal/Pascal"

pascal:
	program += program
; 

program:
	program_heading_block block "."
;

program_heading_block:
	"program" IDENTIFIER ( "(" identifier_list ")" ) ? ";"	
;
 
identifier_list:
	IDENTIFIER ( "," IDENTIFIER ) *	
;

block:
	declaration_part statement_part
;

statement_part:
	BEGIN_KEYWORD statement_sequence END_KEYWORD	
;

statement_sequence:
	statement ( ";" statement ) *
;

statement: //TODO
	( label ":" ) ? ( simple_statement | structured_statement )
;

label:
	INTEGER_NUMBER	
;

simple_statement: 
	( assignment_statement | function_designator | goto_statement ) ?	
;
 
assignment_statement: //TODO
	variable ":=" expression	
;

variable: //TODO
	entire_variable //| component_variable
;

entire_variable:
	IDENTIFIER
;

component_variable: //TODO
	indexed_variable 
;

indexed_variable: //FIXME: RECURSAO INDIRETA A ESQUERDA
	variable "[" expression_list "]"	
;

expression_list:
	expression ( "," expression ) * 	
;

expression:
	simple_expression ( RELATIONAL_OPERATOR simple_expression ) ?
; 

simple_expression: 
	( ADDITION_OPERATOR+ ) ? term ( ( ADDITION_OPERATOR+ | OR_KEYWORD ) term | signed_number ) *
;
  
term:
	factor ( MULTIPLICATION_OPERATOR factor ) * 
;

factor: 
	variable | number | STRING | set | NIL_KEYWORD | function_designator | "(" expression ")" | NOT_KEYWORD factor	
;

number:
	unsigned_number | signed_number	
;

unsigned_number:
	INTEGER_NUMBER | REAL_NUMBER	
;
 
signed_number:
	SIGNED_INTEGER_NUMBER | SIGNED_REAL_NUMBER
;

set:
	"[" expression_list ? "]"	
;

function_designator:
	IDENTIFIER "(" expression_list ? ")"
;

structured_statement: 
	compound_statement | repetitive_statement | conditional_statement | with_statement
;

compound_statement:
	BEGIN_KEYWORD statement_sequence END_KEYWORD
;

repetitive_statement: 
	while_statement | repeat_statement | for_statement
;

while_statement:
	WHILE_KEYWORD expression DO_KEYWORD statement	
;

repeat_statement:
	REPEAT_KEYWORD statement_sequence UNTIL_KEYWORD expression	
;

for_statement:
	FOR_KEYWORD assignment_statement ( TO_KEYWORD | DOWNTO_KEYWORD ) expression DO_KEYWORD statement	
;

conditional_statement: 
	if_statement | case_statement
;

if_statement:
	IF_KEYWORD expression THEN_KEYWORD statement ( ELSE_KEYWORD statement )	?
;

case_statement:
	CASE_KEYWORD expression OF_KEYWORD case_limb ( ";" case_limb ) * ( ";" ) ? END_KEYWORD	
;

case_limb:
	case_label_list ":" statement	
;

case_label_list:
	constant ( "," constant ) *	
;

constant:
	ADDITION_OPERATOR ? ( IDENTIFIER | number ) | STRING 	
;

with_statement:
	WITH_KEYWORD variable ( "," variable ) * DO_KEYWORD statement	
;

goto_statement:
	GOTO_KEYWORD label	
;

declaration_part: //TODO
	( label_declaration_part ) ?
;

label_declaration_part:
	LABEL_KEYWORD label ( "," label ) * ";"
;

terminal ADDITION_OPERATOR:
	"+" | "-" 	
; 

terminal MULTIPLICATION_OPERATOR:
	"*" | "/" | "div" | "mod" | "and"	
;

terminal RELATIONAL_OPERATOR:
	"=" | "<>" | "<" | "<=" | ">" | ">=" | "in"	
;

terminal BEGIN_KEYWORD:
	"begin"	
;

terminal END_KEYWORD:
	"end"	
;

terminal LABEL_KEYWORD:
	"label"
;

terminal NIL_KEYWORD:
	"nil"	
;

terminal NOT_KEYWORD:
	"not"	
;

terminal OR_KEYWORD:
	"or"	
;

terminal GOTO_KEYWORD:
	"goto"	
;

terminal WHILE_KEYWORD:
	"while"	
;

terminal DO_KEYWORD:
	"do"	
;

terminal REPEAT_KEYWORD:
	"repeat"	
;

terminal UNTIL_KEYWORD:
	"until"	
;

terminal FOR_KEYWORD:
	"for"	
;

terminal TO_KEYWORD:
	"to"	
;

terminal DOWNTO_KEYWORD:
	"downto"	
;

terminal IF_KEYWORD:
	"if"	
;

terminal THEN_KEYWORD:
	"then"	
;

terminal ELSE_KEYWORD:
	"else"	
;

terminal CASE_KEYWORD:
	"case"	
;

terminal OF_KEYWORD:
	"of"	
;

terminal WITH_KEYWORD:
	"with"	
;

terminal SIGNED_INTEGER_NUMBER:
	ADDITION_OPERATOR INTEGER_NUMBER	
;

terminal INTEGER_NUMBER: 
	UNSIGNED_DIGIT_SEQUENCE	
;

terminal SIGNED_REAL_NUMBER:
	ADDITION_OPERATOR REAL_NUMBER
;

terminal REAL_NUMBER:
	UNSIGNED_DIGIT_SEQUENCE "." ( UNSIGNED_DIGIT_SEQUENCE ) ? ( ( "E" | "e" ) DIGIT_SEQUENCE ) ? | 
	UNSIGNED_DIGIT_SEQUENCE ( "E" | "e" ) DIGIT_SEQUENCE	
;

terminal UNSIGNED_DIGIT_SEQUENCE:
	DIGIT+
;

terminal DIGIT_SEQUENCE:
	ADDITION_OPERATOR ? UNSIGNED_DIGIT_SEQUENCE	
;

terminal DIGIT:
	"0".."9"
;

terminal IDENTIFIER:
	LETTER_EXTENDED ( LETTER_EXTENDED | DIGIT ) *	
;

terminal LETTER:
	"A".."Z" | "a".."z"
;

terminal LETTER_EXTENDED:
	LETTER | "_"	
; 

grammar org.xtext.example.pascal.Pascal with org.eclipse.xtext.common.Terminals

generate pascal "http://www.xtext.org/example/pascal/Pascal"

Model:
	program += program
;

program:
	program_heading block "."
;

program_heading:
	'program' identifier "(" identifier_list ")" ";"
;

identifier: 
	letter | ( letter | digit ) *	
;

letter:
	"A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"	
;

digit:
	"0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
;

identifier_list:
	identifier ( "," identifier ) *
;

block:
	declaration_part statement_part
;

declaration_part:
	(label_declaration_part)? 
	(constant_definition_part)? 
	//(type_definition_part)? 
	//(variable_declaration_part)? 
	//procedure_and_function_declaration_part
;

label_declaration_part:
	'label' label ( "," label ) * ";"
;

label: 
	integer_number	
;

integer_number:
	digit_sequence	
;

digit_sequence:
	( sign )? unsigned_digit_sequence
;

sign:
	"+" | "-"	
;

unsigned_digit_sequence:
	digit ( digit ) *
;

constant_definition_part:
	'const' constant_definition ";" ( constant_definition ";" ) *
;

constant_definition:
	name=ID "=" constant
;

constant:
	( sign ) ? ( constant_identifier=ID | number ) | pascal_string	
;

number:
	integer_number | real_number	
;

real_number:
	digit_sequence "." ( unsigned_digit_sequence ) ? ( scale_factor ) ? | digit_sequence scale_factor
;

scale_factor:
	( "E" | "e" ) digit_sequence	
;

pascal_string:
	"'" string_character ( string_character ) * "'" 
;

string_character:
	any_character_except_quote | "\""
;

any_character_except_quote: //FIXME
	STRING	
;

statement_part:
	"begin" statement_sequence "end"
;

/* 
type_definition_part:
	'type' type_definition ";" ( type_definition ";" ) *
;

type_definition:
	name=ID "=" type
;

variable_declaration_part:
	'var' variable_declaration ";" ( variable_declaration ";" ) *
;

variable_declaration:
	identifier_list ":" type
;

function_declaration:
	function_heading ";" function_body | 
	function_heading ";" directive |
	function_identification ";" function_body 
;

function_body:
	block 
;

directive:
	"forward" | compiler_defined_directives 
;
*/
*/
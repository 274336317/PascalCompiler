/*
 * generated by Xtext
 */
package org.xtext.example.pascal.validation

import java.util.HashMap
import java.util.Map
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check
import org.xtext.example.pascal.pascal.record_section
import org.xtext.example.pascal.pascal.type
import org.xtext.example.pascal.pascal.variable_declaration_part
import org.xtext.example.pascal.pascal.PascalPackage

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class PascalValidator extends AbstractPascalValidator {
	
	private Map<EObject, Map<String, type>> variables = new HashMap<EObject, Map<String, type>>();
	
	@Check
	def checkVariableDeclaration(variable_declaration_part part) {
		variables.put(part.eContainer, new HashMap<String, type>());
		for (record_section record : part.sections) {
		 	for (String name : record.identifiers.names) {
		 		e = part.eContainer;
		 		if (variables.get(part.eContainer).containsKey(name)) {
		 			error("Variable was redeclared.", PascalPackage.Literals.IDENTIFIER_LIST__NAMES);
		 		}
		 		variables.get(part.eContainer).put(name, record.type);
		 	}
		 }
	}
	
	/*
	//coloca as variáveis dentro do bloco var dentro de um mapa com seus respectivos mapas
	@Check
	def checkVariableWasDeclared(variable_declaration_part variable) {
		 for (record_section record : variable.sections) {
		 	for (String id : record.identifiers.names) {
		 		variables.put(id, record.type);
		 	}
		 }
	}
	
	@Check
	def checkVariableWasDeclared(variable variable) {
		//variável não foi declarada
		if (!variables.containsKey(variable.name)) {
			error("Variable was not declared", PascalPackage.Literals.ASSIGNMENT_STATEMENT__VARIABLE);
		}
	} 
	
	@Check 
	def checkVariableWasDeclared(assignment_statement variable) {
		//variável não foi declarada
		if (!variables.containsKey(variable.variable.name)) {
			error("Variable was not declared", PascalPackage.Literals.ASSIGNMENT_STATEMENT__VARIABLE);
		}
	}

  public static val INVALID_NAME = 'invalidName'

	@Check
	def checkGreetingStartsWithCapital(pascal p) {
		if (!Character.isUpperCase(p.name.charAt(0))) {
			warning('Name should start with a capital', 
					MyDslPackage.Literals.GREETING__NAME,
					INVALID_NAME)
		} 
	} */
}

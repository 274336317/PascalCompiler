grammar org.xtext.example.pascal.Pascal with org.eclipse.xtext.common.Terminals

generate pascal "http://www.xtext.org/example/pascal/Pascal"

pascal:
	program += program
; 

program:
	heading=program_heading_block block=block "."
;

program_heading_block: //TODO: esse parametro foi adicionado como opcional
	"program" name=ID ( "(" identifiers=identifier_list ")" ) ? ";"	
;
 
identifier_list:
	ID ( "," ID ) *	
;

block:
	declaration=declaration_part statement=statement_part
;

statement_part:
	"begin" sequence=statement_sequence "end"	
;

statement_sequence:
	statement ( ";" statement ) *
;

statement: 
	( label ":" ) ? ( simple_statement | structured_statement )
;

label:
	SIGNED_INTEGER_NUMBER | INTEGER_NUMBER
;

simple_statement: //TODO: FOI ADICIONADO O PARAMETRO ID (FUNCTION DESIGNATOR SEM PARAMETRO)
	( assignment_statement | function_designator | goto_statement | ID ) ?	
;
 
assignment_statement: 
	variable ":=" expression	
;

variable: //FALTOU REFERENCED_VARIABLE, MAS ACHO QUE FUNCIONA
	ID variable_ 
;
 
variable_: //TODO: REMOVIDO RECURSÃO A ESQUERDA (ERA COMPONENT_VARIABLE)
	( "[" expression_list "]" variable_ | "." ID variable_ | "^" variable_ ) ?
;

expression_list:
	expression ( "," expression ) * 	
;

expression: //TODO: ADICIONADO "=" PQ N TAVA RECONHECENDO EM RELATIONAL_OPERATOR
	simple_expression ( ( RELATIONAL_OPERATOR | "in" | "=" ) simple_expression ) ?
; 

simple_expression: 
	( ADDITION_OPERATOR+ ) ? term ( ( ADDITION_OPERATOR+ | "or" ) term | signed_number ) *
;
  
term:
	factor ( ( MULTIPLICATION_OPERATOR | "div" | "mod" | "and" ) factor ) * 
;

factor: 
	variable | number | STRING | set | "nil" | "true" | "false" | function_designator | "(" expression ")" | "not" factor	
;

number:
	unsigned_number | signed_number	
;

unsigned_number:
	INTEGER_NUMBER | REAL_NUMBER	
;
 
signed_number:
	SIGNED_INTEGER_NUMBER | SIGNED_REAL_NUMBER
;

set:
	"[" expression_list ? "]"	
;

function_designator:
	ID "(" expression_list ? ")"
;

structured_statement: 
	compound_statement | repetitive_statement | conditional_statement | with_statement
;

compound_statement:
	"begin" statement_sequence "end"
;

repetitive_statement: 
	while_statement | repeat_statement | for_statement
;

while_statement:
	"while" expression "do" statement	
;

repeat_statement:
	"repeat" statement_sequence "until" expression	
;

for_statement:
	"for" assignment_statement ( "to" | "downto" ) expression "do" statement	
;

conditional_statement: 
	if_statement | case_statement
;

if_statement:
	"if" expression "then" statement ( "else" statement )	?
;

case_statement:
	"case" expression "of" case_limb ( ";" case_limb ) * ( ";" ) ? "end"	
;

case_limb:
	case_label_list ":" statement	
;

case_label_list:
	constant ( "," constant ) *	
;

constant:
	ADDITION_OPERATOR ? ( ID | number ) | STRING | "true" | "false" | "nil"
;

with_statement:
	"with" variable ( "," variable ) * "do" statement	
;

goto_statement:
	"goto" label	
;

declaration_part: 
	( label=label_declaration_part ) ?
	( constant=constant_definition_part ) ? 
	( type=type_definition_part ) ?
	( variable=variable_declaration_part ) ? 
	procedures=procedure_and_function_declaration_part
;

label_declaration_part:
	"label" labels+=label ( "," labels+=label ) * ";"
;

constant_definition_part:
	"const" ( consts+=constant_definition ";" ) +	
;

constant_definition:
	name=ID "=" value=constant	
;

type_definition_part:
	"type" ( types+=type_definition ";" ) +	
;

type_definition:
	name=ID "=" type=type	
;

type: //TODO: REMOVIDO ID
	simple_type | structured_type | pointer_type 
;

simple_type: //TODO: ADICIONADO ID
	subrange_type | enumerated_type | ID
;

subrange_type hidden(WS): //TODO: ADICIONADO HIDDEN(WS) PARA REMOVER ESPAÇO EM BRANCO
	 constant ".." constant | NUMERIC_SUBRANGE constant
;

enumerated_type:
	"(" identifier_list ")"
;

structured_type:
	( "packed" ) ? unpacked_structured_type	
;

unpacked_structured_type: //TODO: ADICIONADO DYNAMIC_ARRAY_TYPE
	array_type | dynamic_array_type | record_type | set_type | file_type
;

array_type:
	"array" "[" index_type ( "," index_type ) * "]" "of" type
;

dynamic_array_type:
	"array" "of" type	
;

index_type:
	simple_type	
;

record_type:
	"record" field_list "end"	
; 

field_list:
	( ( fixed=fixed_part ( ";" variant=variant_part ) ? | variant_part ) ( ";" ) ? ) ?	
;

fixed_part:
	sections+=record_section ( ";" sections+=record_section ) *
;

record_section:
	identifiers+=identifier_list ":" type=type	
;

variant_part:
	"case" tag_field ID "of" variant ( ";" variant ) *  	
;

tag_field:
	( ID ":" ) ?	
;

variant:
	case_label_list ":" "(" field_list ")"	
;

set_type:
	"set" "of" type	
;

file_type:
	"file" "of" type
;

pointer_type: //TODO: MUDADO ID PARA TYPE
	"^" type 
; 

variable_declaration_part:
	"var" sections+=record_section ";" ( sections+=record_section ";" ) *
;

procedure_and_function_declaration_part:
	( ( procedure+=procedure_declaration | function+=function_declaration  ) ";" ) *	
;

procedure_declaration:
	heading=procedure_heading ";" ( block=block | "forward" )
;

procedure_heading:
	"procedure" ID ( formal_parameter_list ) ?	
;

formal_parameter_list:
	"(" formal_parameter_section ( ";" formal_parameter_section ) * ")"	
;

formal_parameter_section: 
	value_parameter_section | variable_parameter_section | procedure_heading | function_heading
;

value_parameter_section:
	identifier_list ":" parameter_type	
;

parameter_type:
	conformant_array_schema | ID	
;

conformant_array_schema:
	packed_conformant_array_schema | unpacked_conformant_array_schema	
;

packed_conformant_array_schema:
	"packed" "array" "[" bound_specification "]" "of" ID	
;

bound_specification:
	ID ".." ID ":" ID	
;

unpacked_conformant_array_schema:
	"array" "[" bound_specification ( ";" bound_specification ) * "]" "of" ( conformant_array_schema | ID )	
;

variable_parameter_section:
	"var" identifier_list ":" parameter_type	
;

function_heading:
	"function" ID ( formal_parameter_list ) ? ":" ID
;
 
function_declaration:
	function_heading ";" ( block | "forward") 
;
 
terminal NUMERIC_SUBRANGE:
	( INTEGER_NUMBER | REAL_NUMBER | SIGNED_INTEGER_NUMBER | SIGNED_REAL_NUMBER ) ".."	
;

terminal ADDITION_OPERATOR:
	"+" | "-" 	
; 

terminal MULTIPLICATION_OPERATOR:
	"*" | "/" 
;

terminal RELATIONAL_OPERATOR:
	"=" | "<>" | "<" | "<=" | ">" | ">=" 
;

terminal SIGNED_INTEGER_NUMBER:
	ADDITION_OPERATOR INTEGER_NUMBER	
;

terminal INTEGER_NUMBER: 
	UNSIGNED_DIGIT_SEQUENCE	
;

terminal SIGNED_REAL_NUMBER:
	ADDITION_OPERATOR REAL_NUMBER
;

terminal REAL_NUMBER:
	UNSIGNED_DIGIT_SEQUENCE "." ( UNSIGNED_DIGIT_SEQUENCE ) ? ( ( "E" | "e" ) DIGIT_SEQUENCE ) ? | 
	UNSIGNED_DIGIT_SEQUENCE ( "E" | "e" ) DIGIT_SEQUENCE	
;

terminal UNSIGNED_DIGIT_SEQUENCE:
	DIGIT+
;

terminal DIGIT_SEQUENCE:
	ADDITION_OPERATOR ? UNSIGNED_DIGIT_SEQUENCE	
;

terminal DIGIT:
	"0".."9"
;

terminal ML_COMMENT : '(*' -> '*)' | '{' -> '}';
/**
 * generated by Xtext
 */
package org.xtext.example.pascal.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.pascal.pascal.block;
import org.xtext.example.pascal.pascal.program;
import org.xtext.example.pascal.pascal.program_heading_block;
import org.xtext.example.pascal.pascal.statement_part;
import org.xtext.example.pascal.validation.ElementType;
import org.xtext.example.pascal.validation.PascalValidator;
import org.xtext.example.pascal.validation.Type;
import org.xtext.example.pascal.validation.Variable;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class PascalGenerator implements IGenerator {
  private int memoryInit;
  
  private Map<block, Integer> countVariables = new HashMap<block, Integer>();
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<program> _filter = Iterables.<program>filter(_iterable, program.class);
    for (final program e : _filter) {
      {
        this.memoryInit = 10;
        program_heading_block _heading = e.getHeading();
        String _name = _heading.getName();
        String _plus = (_name + ".asm");
        CharSequence _compile = this.compile(e);
        fsa.generateFile(_plus, _compile);
      }
    }
  }
  
  public Set<Variable> getVariables(final program e, final block b) {
    program_heading_block _heading = e.getHeading();
    String _name = _heading.getName();
    Map<String, Object> artefacts = PascalValidator.artefacts.get(_name);
    Object _get = artefacts.get("variables");
    Map<block, Set<Variable>> map = ((Map<block, Set<Variable>>) _get);
    this.countVariables.put(b, Integer.valueOf(this.memoryInit));
    return map.get(b);
  }
  
  public CharSequence compile(final program e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("; Program ");
    program_heading_block _heading = e.getHeading();
    String _name = _heading.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    _builder.append("global _main");
    _builder.newLine();
    _builder.newLine();
    _builder.append("extern _printf");
    _builder.newLine();
    _builder.append("extern _scanf ");
    _builder.newLine();
    _builder.newLine();
    block _block = e.getBlock();
    block _block_1 = e.getBlock();
    Set<Variable> _variables = this.getVariables(e, _block_1);
    CharSequence _compile = this.compile(_block, _variables);
    _builder.append(_compile, "");
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("; Code");
    _builder.newLine();
    _builder.append("section .text");
    _builder.newLine();
    _builder.append("_main:");
    _builder.newLine();
    block _block_2 = e.getBlock();
    statement_part _statement = _block_2.getStatement();
    block _block_3 = e.getBlock();
    Object _compile_1 = this.compile(_statement, _block_3);
    _builder.append(_compile_1, "");
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    _builder.append("RET\t; Exit program");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final block b, final Set<Variable> variables) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("; Loading global constants");
    _builder.newLine();
    _builder.append("section .data");
    _builder.newLine();
    {
      for(final Variable v : variables) {
        CharSequence _compileGlobalConstant = this.compileGlobalConstant(v, b);
        _builder.append(_compileGlobalConstant, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("; Loading global variables");
    _builder.newLine();
    _builder.append("section .bss");
    _builder.newLine();
    {
      for(final Variable v_1 : variables) {
        CharSequence _compileGlobalVariables = this.compileGlobalVariables(v_1, b);
        _builder.append(_compileGlobalVariables, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public String intToHex(final int x) {
    return String.format("0x%x", Integer.valueOf(x));
  }
  
  public String getMemoryOffset(final Variable v) {
    int _memoryInit = this.memoryInit;
    int _numberOfBytes = this.getNumberOfBytes(v);
    this.memoryInit = (_memoryInit + _numberOfBytes);
    return this.intToHex(this.memoryInit);
  }
  
  public int getNumberOfBytes(final Variable v) {
    Type _varType = v.getVarType();
    String _realType = _varType.getRealType();
    String type = _realType.toLowerCase();
    boolean _or = false;
    boolean _equals = type.equals("boolean");
    if (_equals) {
      _or = true;
    } else {
      boolean _equals_1 = type.equals("shortint");
      _or = _equals_1;
    }
    if (_or) {
      return 1;
    } else {
      boolean _equals_2 = type.equals("char");
      if (_equals_2) {
        return 2;
      } else {
        boolean _equals_3 = type.equals("integer");
        if (_equals_3) {
          return 4;
        } else {
          boolean _or_1 = false;
          boolean _equals_4 = type.equals("longint");
          if (_equals_4) {
            _or_1 = true;
          } else {
            boolean _equals_5 = type.equals("real");
            _or_1 = _equals_5;
          }
          if (_or_1) {
            return 8;
          }
        }
      }
    }
    return 8;
  }
  
  public Object getValue(final Variable v) {
    Object _value = v.getValue();
    if ((_value instanceof String)) {
      Object _value_1 = v.getValue();
      String _plus = ("\'" + _value_1);
      return (_plus + "\'");
    } else {
      Object _value_2 = v.getValue();
      if ((_value_2 instanceof Boolean)) {
        Object _value_3 = v.getValue();
        boolean _equals = _value_3.equals(Boolean.valueOf(true));
        if (_equals) {
          return Integer.valueOf(1);
        } else {
          return Integer.valueOf(0);
        }
      }
    }
    return v.getValue();
  }
  
  public CharSequence compileGlobalConstant(final Variable v, final block b) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ElementType _type = v.getType();
      boolean _equals = Objects.equal(_type, ElementType.CONSTANT);
      if (_equals) {
        {
          Type _varType = v.getVarType();
          String _realType = _varType.getRealType();
          String _lowerCase = _realType.toLowerCase();
          boolean _equals_1 = _lowerCase.equals("array of char");
          if (_equals_1) {
            String _name = v.getName();
            _builder.append(_name, "");
            _builder.append(" db \'");
            Object _value = this.getValue(v);
            _builder.append(_value, "");
            _builder.append("\'");
            _builder.newLineIfNotEmpty();
          } else {
            String _name_1 = v.getName();
            _builder.append(_name_1, "");
            _builder.append(" equ ");
            Object _value_1 = this.getValue(v);
            _builder.append(_value_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compileGlobalVariables(final Variable v, final block b) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ElementType _type = v.getType();
      boolean _equals = Objects.equal(_type, ElementType.VARIABLE);
      if (_equals) {
        String _name = v.getName();
        _builder.append(_name, "");
        _builder.append(" RESB ");
        int _numberOfBytes = this.getNumberOfBytes(v);
        _builder.append(_numberOfBytes, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public Object compile(final statement_part part, final block b) {
    return null;
  }
}

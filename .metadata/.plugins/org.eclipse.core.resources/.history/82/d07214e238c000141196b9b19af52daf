package org.xtext.example.pascal.validation;

import org.xtext.example.pascal.pascal.block;
import org.xtext.example.pascal.pascal.expression;
import org.xtext.example.pascal.pascal.expression_list;
import org.xtext.example.pascal.pascal.factor;
import org.xtext.example.pascal.pascal.function_designator;
import org.xtext.example.pascal.pascal.parameter_type;
import org.xtext.example.pascal.pascal.simple_expression;
import org.xtext.example.pascal.pascal.term;
import org.xtext.example.pascal.pascal.type;
import org.xtext.example.pascal.pascal.variable;

public class TypeInferer {

	public static String greater(String type1, String type2) {
		if (type1 == null || type1.equals(""))
			return type2;
		if (type2 == null || type2.equals(""))
			return type1; 
		if (type1 == "real" || type2 == "real")
			return "real";	
		return type1;
	}
	
	private static int getTypeWeight(String type) {
		switch (type) {
		case "real":
			return 4;
		case "longint":
			return 3;
		case "integer":
			return 2;
		case "shortint":
			return 1;
		}
		return -1;
	}
	
	public static boolean areTypesCompatibles(String parent, String child) {
		if (parent.equals(child))
			return true;
		int parentWeight = getTypeWeight(parent);
		int childWeight = getTypeWeight(child);
		if (parentWeight == -1 || childWeight == -1)
			return false;
		return parentWeight >= childWeight;
	}

	public static String getType(type t) { 
		if (t.simple != null) {
			simple_type simple = t.simple;
			if (simple.subrange != null || simple.enumerated != null) {
				return "...enumerated";
			} else if (simple.name != null) {
				return simple.name;
			} 
		} else if (t.structured != null) {
			String syntetizedType = "";
			structured_type structured = t.structured;
			if (structured.packed) {
				syntetizedType += "packed ";
			}
			var unpacked = structured.type;
			if (unpacked.array != null) {
				syntetizedType += "array of " + getType(unpacked.array.type);
			} else if (unpacked.dynamic != null) {
				syntetizedType += "array of " + getType(unpacked.dynamic.type);
			} else if (unpacked.record != null) {
				syntetizedType += "record";
			} else if (unpacked.set != null) {
				syntetizedType += "set of " + getType(unpacked.set.type);
			} else if (unpacked.file != null) {
				syntetizedType += "file of " + getType(unpacked.file.type);
			}
			return syntetizedType;
		} else if (t.pointer != null) {
			return "^" + getType(t.pointer.type);
		}
		return null;
	}
	
	def String getType(parameter_type type) {
		if (type.array != null) {
			var array = type.array;
			if (array.packed != null) {
				return "packed array of " + array.packed.name;
			} else if (array.unpacked != null) {
				return "array of " + getType(array.unpacked.type);
			}
		} else if (type.name != null) {
			return type.name;
		}
		return null;	
	}
	
	def String getType(block b, variable v) {
		var variableFound = search(variables.get(b), new Variable(v.name)); 
		if (variableFound != null) {
			return variableFound.getVarType();
		} 
		return null;
	}
	
	public static String getType(block b, function_designator f) {
		var function = getAbstraction(b, f);
		var abstractionFound = search(abstractions.get(b), function);
		if (abstractionFound != null && abstractionFound.type == ElementType.FUNCTION) {
			var functionFound = abstractionFound as Function;
			return functionFound.returnType;
		}
		return null;
	}
	
	public static String getType(block b, factor f) {
		if (f.variable != null) {
			return getType(b, f.variable);
		} else if (f.number != null) {
			var number = f.number.number;
			if (number.integer != null) {
				return "integer";
			} else if (number.real != null) {
				return "real";
			}
		} else if (f.string != null) {
			return "packed array of char";
		} else if (f.set != null) {
			return getType(b, f.set.expressions); 
		} else if (f.nil) {
			return "nil";
		} else if (f.boolean != null || f.not != null) {
			return "boolean";
		} else if (f.function != null) {
			return getType(b, f.function);
		} else if (f.expression != null) {
			return getType(b, f.expression);
		}
		return null;
	}
	
	public static String getType(block b, term t) {
		var greatestType = "";
		for (factor f : t.factors) {
			var type = getType(b, f);
			greatestType = greater(type, greatestType);
		}
		return greatestType;
	}
	
	public static String getType(block b, simple_expression expr) {
		var greatestType = "";
		for (term t : expr.terms) {
			var type = getType(b, t);
			greatestType = greater(type, greatestType);
		}
		return greatestType;
	}
	
	public static String getType(block b, expression expr) {
		var greatestType = "";
		for (simple_expression e : expr.expressions) {
			var type = getType(b, e);
			greatestType = greater(type, greatestType);
		}
		return greatestType;
	}
	
	public static String getType(block b, expression_list expr) {
		var greatestType = "";
		for (expression e : expr.expressions) {
			var type = getType(b, e);
			greatestType = greater(type, greatestType);
		}
		return greatestType;
	}
	
}

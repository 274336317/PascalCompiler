/*
 * generated by Xtext
 */
package org.xtext.example.pascal.validation

import java.util.HashMap
import java.util.HashSet
import java.util.Map
import java.util.Set
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check
import org.xtext.example.pascal.pascal.block
import org.xtext.example.pascal.pascal.variable
import org.xtext.example.pascal.pascal.variable_section

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class PascalValidator extends AbstractPascalValidator {
	
	private Map<EObject, Set<Variable>> variables = new HashMap<EObject, Set<Variable>>();
	private Variable tempVariable;
	private Variable searchVariable;
	
	def search(Set<Variable> variables, Variable key) {
		for (Variable v : variables) {
			if (v.equals(key))
				return v;
		}
		return null;	
	}
	
	@Check
	def checkVariableDeclaration(block block) {		
		if (!variables.containsKey(block)) {
			variables.put(block, new HashSet<Variable>());
		}
		for (variable_section section : block.declaration.variable.sections) {
			for (String name : section.identifiers.names) { 
				tempVariable = new Variable(name, section.type, false);
				searchVariable = search(variables.get(block), tempVariable);
				if (searchVariable != null && !searchVariable.isInherited()) {
					error("Variable was redeclared.", section.identifiers.eContainingFeature);
				} else { 
					variables.get(block).remove(search(variables.get(block), tempVariable));
					variables.get(block).add(tempVariable)
					for (block subblock : block.declaration.procedure.declarations.filter(block.class)) {
						if (variables.containsKey(subblock)) {
							variables.put(subblock, new HashSet<Variable>());
						}
						variables.get(subblock).add(new Variable(name, section.type, true));
					}
				}
			}
		}
		for (variable variable : block.statement.sequence.statements.filter(variable)) {
			if (!variables.get(block).containsKey(variable.name.toLowerCase())) {
				error("Variable was not declared.", variable.eContainingFeature);
			}
		}
	}
	
	/*
	//coloca as variáveis dentro do bloco var dentro de um mapa com seus respectivos mapas
	@Check
	def checkVariableWasDeclared(variable_declaration_part variable) {
		 for (record_section record : variable.sections) {
		 	for (String id : record.identifiers.names) {
		 		variables.put(id, record.type);
		 	}
		 }
	}
	
	@Check
	def checkVariableWasDeclared(variable variable) {
		//variável não foi declarada
		if (!variables.containsKey(variable.name)) {
			error("Variable was not declared", PascalPackage.Literals.ASSIGNMENT_STATEMENT__VARIABLE);
		}
	} 
	
	@Check 
	def checkVariableWasDeclared(assignment_statement variable) {
		//variável não foi declarada
		if (!variables.containsKey(variable.variable.name)) {
			error("Variable was not declared", PascalPackage.Literals.ASSIGNMENT_STATEMENT__VARIABLE);
		}
	}

  public static val INVALID_NAME = 'invalidName'

	@Check
	def checkGreetingStartsWithCapital(pascal p) {
		if (!Character.isUpperCase(p.name.charAt(0))) {
			warning('Name should start with a capital', 
					MyDslPackage.Literals.GREETING__NAME,
					INVALID_NAME)
		} 
	} */
}

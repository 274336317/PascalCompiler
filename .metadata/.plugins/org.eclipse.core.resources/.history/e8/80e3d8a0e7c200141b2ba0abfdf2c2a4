/*
 * generated by Xtext
 */
package org.xtext.example.pascal.generator

import java.util.Map
import java.util.Set
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.xtext.example.pascal.pascal.block
import org.xtext.example.pascal.pascal.program
import org.xtext.example.pascal.validation.PascalValidator
import org.xtext.example.pascal.validation.Variable

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class PascalGenerator implements IGenerator {
	
	private Map<block, Integer> countVariables;
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for(e: resource.allContents.toIterable.filter(program)) {
			fsa.generateFile(e.heading.name + ".asm", e.compile) 
		}
	}

	def getVariables(program e, block b) {
		var artifacts = PascalValidator.artefacts.get(e.heading.name);
		var map = artifacts.get("variables") as Map<block, Set<Variable>>;
		countVariables.put(b, 0);
		return map.get(b);
	}
	
	def compile(program e) '''
		; «e.heading.name»
		«e.block.compile(e.getVariables(e.block))» 
		  
	'''

	def compile(block b, Set<Variable> variables) ''' 
		«FOR v : variables»
			«v.compile(b)»
		«ENDFOR»
	'''
	
	def compile(Variable v, block b) '''
		«countVariables.put(b, countVariables.get(b) + 1)»
		LD R«countVariables.get(b)», «v.name»
	'''
	//override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
	//}
}

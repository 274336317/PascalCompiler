/*
 * generated by Xtext
 */
package org.xtext.example.pascal.validation

import java.util.HashMap
import java.util.HashSet
import java.util.Map
import java.util.Set
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.xtext.validation.Check
import org.xtext.example.pascal.pascal.PascalPackage
import org.xtext.example.pascal.pascal.block
import org.xtext.example.pascal.pascal.case_limb
import org.xtext.example.pascal.pascal.constant
import org.xtext.example.pascal.pascal.constant_definition
import org.xtext.example.pascal.pascal.expression
import org.xtext.example.pascal.pascal.factor
import org.xtext.example.pascal.pascal.formal_parameter_section
import org.xtext.example.pascal.pascal.function_declaration
import org.xtext.example.pascal.pascal.procedure_declaration
import org.xtext.example.pascal.pascal.simple_expression
import org.xtext.example.pascal.pascal.statement
import org.xtext.example.pascal.pascal.statement_sequence
import org.xtext.example.pascal.pascal.term
import org.xtext.example.pascal.pascal.variable
import org.xtext.example.pascal.pascal.variable_section

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class PascalValidator extends AbstractPascalValidator {
	
	private Map<EObject, Set<Error>> errorList = new HashMap<EObject, Set<Error>>();
	private Map<EObject, Set<Variable>> variables = new HashMap<EObject, Set<Variable>>();
	private Map<EObject, Set<Procedure>> abstractions = new HashMap<EObject, Set<Procedure>>();
	
	def <T extends Element> search(Set<T> elements, T key) {
		for (T t : elements) {
			if (t.equals(key))
				return t;
		} 
		return null;	
	}
	 
	def insertError(EObject object, String message, ErrorType type, EStructuralFeature feature) {
		if (!errorList.containsKey(object)) {
			errorList.put(object, new HashSet<Error>());
		}
		errorList.get(object).add(new Error(message, type, feature));
	}
	
	def removeError(EObject object, ErrorType type) {
		if (!errorList.containsKey(object)) {
			errorList.put(object, new HashSet<Error>());
		}
		for (Error e : errorList.get(object)) {
			if (e.equals(new Error(type))) {
				System.out.println("OI");
				acceptError(e.message, object, e.feature, -1, null, null);
			}
		}
		errorList.get(object).remove(new Error(type));
	} 
	
	def <T extends Element> clear(block b, ElementType type, Map<EObject, Set<T>> container) {
		if (!container.containsKey(b)) {
			container.put(b, new HashSet<T>());
		} else {
			var newSet = new HashSet<T>();
			for (T t : container.get(b)) {
				if (t.type != type || t.isInherited) {
					newSet.add(t);
				}	 
			} 
			container.put(b, newSet);
		}
	}
	
	def <T extends Element> inheritElement(block b, T element, Map<EObject, Set<T>> container) {
		if (b.abstraction != null) {
			if (b.abstraction.procedures != null) {
				for (procedure_declaration procedure : b.abstraction.procedures) {
					if (procedure.block == null) {
						procedure.block = PascalPackage.eINSTANCE.pascalFactory.createblock;
					}
					var subblock = procedure.block;
					if (!container.containsKey(subblock)) {
						container.put(subblock, new HashSet<T>());
					}
					container.get(subblock).add(element);
				}
			}
			if (b.abstraction.functions != null) {
				for (function_declaration function : b.abstraction.functions) {
					if (function.block == null) {
						function.block = PascalPackage.eINSTANCE.pascalFactory.createblock;
					}
					var subblock = function.block;
					if (!container.containsKey(subblock)) {
						container.put(subblock, new HashSet<T>());
					}
					container.get(subblock).add(element);
					if (container.equals(variables)) {
						variables.get(subblock).add(new Variable(function.heading.name, function.heading.returnType, false, ElementType.FUNCTION_RETURN));
					}
				}
			}
		}
	} 
	
	def <T extends Element> addElement(block b, T element, Map<EObject, Set<T>> container, EObject errorSection, EStructuralFeature errorFeature) {			
		var elementFound = search(container.get(b), element);
		if (elementFound != null && !elementFound.isInherited) {
			if (element.type == elementFound.type) { 
				insertError(errorSection, element.type + " cannot be redeclared.", ErrorType.REDECLARATION, errorFeature); 
			} else { 
				if (elementFound.type == ElementType.FUNCTION_RETURN) {
					insertError(errorSection, "Identifier reserved for function return.", ErrorType.REDECLARATION, errorFeature);
				} else {
					insertError(errorSection, "Identifier is already being used by a " + elementFound.type + ".", ErrorType.REDECLARATION, errorFeature);
				} 
			}
		} else { 
			removeError(errorSection, ErrorType.REDECLARATION);
			container.get(b).remove(elementFound);
			container.get(b).add(element);
			var inheritedElement = element.clone() as T;
			inheritedElement.inherited = true; 
			inheritElement(b, inheritedElement, container);
		}
	}
	
	def getParameters(block b, function_declaration function) {
		var parameters = new HashSet<Variable>();
		if (function.heading.parameters != null) {
			var list = function.heading.parameters;
			if (list.parameters != null) {
				for (formal_parameter_section section : list.parameters) {
					if (section.variable != null) {
						var variable = section.variable;
						for (String varName : variable.identifiers.names) {
							var parameter = new Variable(varName, section.variable.type.toString, false, ElementType.PARAMETER);
							addElement(b, parameter, variables, variable, PascalPackage.Literals.VARIABLE_PARAMETER_SECTION__IDENTIFIERS);
							parameters.add(parameter);
						}
					} else if (section.value != null) {
						var value = section.value;
						for (String valName : value.identifiers.names) {
							var parameter = new Variable(valName, value.type.toString, false, ElementType.PARAMETER);
							addElement(b, parameter, variables, value, PascalPackage.Literals.VALUE_PARAMETER_SECTION__IDENTIFIERS);
							parameters.add(parameter);
						}
					}
				}
			}
		}
		return parameters;
	}
	
	def addFunction(block b, function_declaration funct) {
		var name = funct.heading.name;
		var returnType = funct.heading.returnType;
		if (funct.block == null) {
			funct.block = PascalPackage.eINSTANCE.pascalFactory.createblock;
		}
		clear(funct.block, ElementType.PARAMETER, variables); 
		var parameters = getParameters(funct.block, funct);
		var forward = funct.forward;
		addElement(b, new Function(name, false, parameters, forward, returnType), abstractions, funct.heading, PascalPackage.Literals.FUNCTION_HEADING__NAME);
	}  
	
	def checkAbstractionRedeclaration(block b) {
		if (b.abstraction != null) {
			var abstraction = b.abstraction;
			if (abstraction.functions != null) {
				clear(b, ElementType.FUNCTION, abstractions); 
				for (function_declaration function : abstraction.functions) {
					addFunction(b, function);
				}
			}
			if (abstraction.procedures != null) {
				for (procedure_declaration procedure : abstraction.procedures) {
					
				}
			}
		}	
	}
	
	def checkConstantRedeclaration(block b) {
		clear(b, ElementType.CONSTANT, variables);
		if (b.constant != null) {
			for (constant_definition const : b.constant.consts) {
				addElement(b, new Variable(const.name, const.const.toString(), false, ElementType.CONSTANT), variables, const, PascalPackage.Literals.CONSTANT_DEFINITION__NAME);
			}
		}
	} 
	
	def checkVariableRedeclaration(block b) {		
		clear(b, ElementType.VARIABLE, variables);
		if (b.variable != null) {
			for (variable_section section : b.variable.sections) {
				for (String name : section.identifiers.names) {  
					addElement(b, new Variable(name, section.type.toString(), false, ElementType.VARIABLE), variables, section, PascalPackage.Literals.VARIABLE_SECTION__IDENTIFIERS);
				}
			}
		}
	}
	
	def checkVariable(block b, variable v, boolean isAssignment) { 
		var searchVariable = search(variables.get(b), new Variable(v.name));
		if (searchVariable == null) {
			insertError(v, "Variable was not declared.", ErrorType.NOT_DECLARATION, PascalPackage.Literals.VARIABLE__NAME);
		} else {
			removeError(v, ErrorType.NOT_DECLARATION);
			if (isAssignment) {
				if (searchVariable.type == ElementType.CONSTANT) {
					insertError(v, "Constants cannot be assigned.", ErrorType.CONSTANT_ASSIGNMENT, PascalPackage.Literals.VARIABLE__NAME);
				} else {
					removeError(v, ErrorType.CONSTANT_ASSIGNMENT);
				}
			}
		}
	}
	
	def checkExpression(block b, expression expr) {
		for (simple_expression s : expr.expressions) {
			for (term t : s.terms) {
				for (factor f : t.factors) {
					if (f.variable != null) {
						checkVariable(b, f.variable, false);
					} if (f.function != null) {
						var function = f.function;
						if (function.expressions != null) {
							for (expression e : function.expressions.expressions) {
								checkExpression(b, e);
							}
						}
					}
				}
			}
		}
	}
	
	def checkConstant(block b, constant const) {
		if (const.name != null) {
			var searchVariable = search(variables.get(b), new Variable(const.name));
			if (searchVariable == null) {
				insertError(const, "Constant was not declared.", ErrorType.NOT_DECLARATION, PascalPackage.Literals.CONSTANT__NAME);
			} else {
				removeError(const, ErrorType.NOT_DECLARATION);
				if (searchVariable.type != ElementType.CONSTANT) {
					insertError(const, "Only constants are allowed.", ErrorType.CONSTANT_ONLY, PascalPackage.Literals.CONSTANT__NAME);
				} else {
					removeError(const, ErrorType.CONSTANT_ONLY);
				}
			}
		}
	}
	
	def checkStatement(block b, statement stmt) {
		if (stmt.simple != null) {
			var simple = stmt.simple;
			if (simple.assignment != null) {
				var assignment = simple.assignment;
				var variable = assignment.variable;
				checkVariable(b, variable, true);
			} else if (simple.function != null) {
				var function = simple.function;
				if (function.expressions != null) {
					for (expression e : function.expressions.expressions) {
						checkExpression(b, e);
					}
				}
			}
		} else if (stmt.structured != null) {
			var structured = stmt.structured;
			if (structured.compound != null) {
				var compound = structured.compound; 
				checkStatements(b, compound.sequence); 
			} else if (structured.repetitive != null) {
				var repetitive = structured.repetitive;	
				if (repetitive.whileStmt != null) {
					checkExpression(b, repetitive.whileStmt.expression);
					checkStatement(b, repetitive.whileStmt.statement);
				} else if (repetitive.repeatStmt != null) {
					checkStatements(b, repetitive.repeatStmt.sequence);
					checkExpression(b, repetitive.repeatStmt.expression);
				} else if (repetitive.forStmt != null) {
					checkVariable(b, repetitive.forStmt.assignment.variable, true);
					checkExpression(b, repetitive.forStmt.expression);
					checkStatement(b, repetitive.forStmt.statement);
				}
			} else if (structured.conditional != null) {
				var conditional = structured.conditional;
				if (conditional.ifStmt != null) {
					var ifStmt = conditional.ifStmt;
					checkExpression(b, ifStmt.expression);
					checkStatement(b, ifStmt.ifStatement);
					if (ifStmt.elseStatement != null) {
						checkStatement(b, ifStmt.elseStatement);
					}
				} else if (conditional.caseStmt != null) {
					var caseStmt = conditional.caseStmt;
					checkExpression(b, caseStmt.expression);
					for (case_limb limb : caseStmt.cases) {
						checkStatement(b, limb.statement);
						for (constant c : limb.cases.constants) {
							checkConstant(b, c);
						}
					}
				} 
			} else if (structured.withStmt != null) {
				var withStmt = structured.withStmt;
				for (variable v : withStmt.variables) {
					checkVariable(b, v, false);
				}
				checkStatement(b, withStmt.statement);
			}
		}
	}
	
	def checkStatements(block b, statement_sequence sequence) {
		for (statement stmt : sequence.statements) {
			checkStatement(b, stmt);
		}
	} 
	
	def checkBlock(block b) {
		checkStatements(b, b.statement.sequence);
	}
	
	@Check
	def runCheckes(block b) {
		checkAbstractionRedeclaration(b);
		checkConstantRedeclaration(b);
		checkVariableRedeclaration(b);
		checkBlock(b);
	}
	
	@Check
	def showError(EObject obj) {
		if (errorList.containsKey(obj)) {
			for (Error err : errorList.get(obj)) {
				error(err.message, err.feature);
			} 
			
		} 
	}
	
}

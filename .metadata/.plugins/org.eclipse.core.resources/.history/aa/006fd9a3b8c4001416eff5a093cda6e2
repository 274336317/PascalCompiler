package org.xtext.example.pascal.validation;

import java.util.Iterator;
import java.util.Set;

public class Procedure extends Element {

	protected Set<Variable> parameters;
	protected boolean forward;
	
	protected Procedure(String name, ElementType type, boolean inherited, Set<Variable> parameters, boolean forward) {
		super(name, type, inherited);
		this.parameters = parameters;
		this.forward = forward;
	}
	
	public Procedure(String name, boolean inherited,  Set<Variable> parameters, boolean forward) {
		this(name, ElementType.PROCEDURE, inherited, parameters, forward);
	}

	public Procedure(String name, Set<Variable> parameters) {
		this(name, ElementType.PROCEDURE, false, parameters, false);
	}
	
	public Set<Variable> getParameters() {
		return this.parameters;
	}
	
	public boolean isForward() {
		return this.forward;
	}
	
	@Override
	public Element clone() {
		return new Procedure(this.name, this.type, this.inherited, this.parameters, this.forward);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj != null && (obj instanceof Procedure)) {
			Procedure other = (Procedure) obj;
			if (!this.name.toLowerCase().equals(other.name.toLowerCase()))
				return false;
			if (this.parameters.size() != other.parameters.size()) 
				return false;
			Iterator<Variable> it1 = this.parameters.iterator();
			Iterator<Variable> it2 = other.parameters.iterator();
			while (it1.hasNext() && it2.hasNext()) {
				Type it1Type = it1.next().getVarType();
				Type it2Type = it2.next().getVarType();
				if (!it1Type.getRealType().equals(it2Type.getRealType()))
					return false;
			}
			return true;
		}
		return super.equals(obj);
	}
	
	public boolean equalsWithTypeCoersion(Object obj) {
		if (obj != null && (obj instanceof Procedure)) {
			Procedure other = (Procedure) obj;
			if (!this.name.toLowerCase().equals(other.name.toLowerCase()))
				return false;
			if (this.parameters.size() != other.parameters.size()) 
				return false;
			Iterator<Variable> it1 = this.parameters.iterator();
			Iterator<Variable> it2 = other.parameters.iterator();
			while (it1.hasNext() && it2.hasNext()) {
				Type it1Type = it1.next().getVarType();
				Type it2Type = it2.next().getVarType();
				if (!TypeInferer.areTypesCompatibles(it1Type, it2Type))
					return false;
			}
			return true;
		}
		return super.equals(obj);
	}
	
	@Override
	public int compareTo(Element other) {
		return 0;
	}
	
}

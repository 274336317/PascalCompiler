package org.xtext.example.pascal.validation;

public class TypeInferer {

	public static String getType(block b, function_designator f) {
		var function = getAbstraction(b, f);
		var abstractionFound = search(abstractions.get(b), function);
		if (abstractionFound != null && abstractionFound.type == ElementType.FUNCTION) {
			var functionFound = abstractionFound as Function;
			return functionFound.returnType;
		}
		return null;
	}
	
	def String getType(block b, factor f) {
		if (f.variable != null) {
			return getType(b, f.variable);
		} else if (f.number != null) {
			var number = f.number.number;
			if (number.integer != null) {
				return "integer";
			} else if (number.real != null) {
				return "real";
			}
		} else if (f.string != null) {
			return "packed array of char";
		} else if (f.set != null) {
			return getType(b, f.set.expressions); 
		} else if (f.nil) {
			return "nil";
		} else if (f.boolean != null || f.not != null) {
			return "boolean";
		} else if (f.function != null) {
			return getType(b, f.function);
		} else if (f.expression != null) {
			return getType(b, f.expression);
		}
		return null;
	}
	
	def String greater(String type1, String type2) {
		if (type1 == null || type1.equals(""))
			return type2;
		if (type2 == null || type2.equals(""))
			return type1; 
		if (type1 == "real" || type2 == "real")
			return "real";	
		return type1;
	}
	
	def boolean areTypesCompatibles(String parent, String child) {
		if (parent.equals(child))
			return true;
		if (parent == "real") {
			if (child == "integer" || child == "longint" || child == "shortint")
				return true;
		} else if (parent == "longint") {
			if (child == "integer" || child == "shortint")
				return true;
		} else if (parent == "integer") {
			if (child == "shortint")
				return true;
		}
		return false;
	}
	
	def String getType(block b, term t) {
		var greatestType = "";
		for (factor f : t.factors) {
			var type = getType(b, f);
			greatestType = greater(type, greatestType);
		}
		return greatestType;
	}
	
	def String getType(block b, simple_expression expr) {
		var greatestType = "";
		for (term t : expr.terms) {
			var type = getType(b, t);
			greatestType = greater(type, greatestType);
		}
		return greatestType;
	}
	
	def String getType(block b, expression expr) {
		var greatestType = "";
		for (simple_expression e : expr.expressions) {
			var type = getType(b, e);
			greatestType = greater(type, greatestType);
		}
		return greatestType;
	}
	
	def String getType(block b, expression_list expr) {
		var greatestType = "";
		for (expression e : expr.expressions) {
			var type = getType(b, e);
			greatestType = greater(type, greatestType);
		}
		return greatestType;
	}
	
}

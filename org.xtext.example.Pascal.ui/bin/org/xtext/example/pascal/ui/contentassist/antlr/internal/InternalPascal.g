/*
* generated by Xtext
*/
grammar InternalPascal;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.pascal.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.pascal.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.pascal.services.PascalGrammarAccess;

}

@parser::members {
 
 	private PascalGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(PascalGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRulepascal
entryRulepascal 
:
{ before(grammarAccess.getPascalRule()); }
	 rulepascal
{ after(grammarAccess.getPascalRule()); } 
	 EOF 
;

// Rule pascal
rulepascal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPascalAccess().getProgramAssignment()); }
(rule__Pascal__ProgramAssignment)
{ after(grammarAccess.getPascalAccess().getProgramAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleprogram
entryRuleprogram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleprogram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule program
ruleprogram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getGroup()); }
(rule__Program__Group__0)
{ after(grammarAccess.getProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleprogram_heading_block
entryRuleprogram_heading_block 
:
{ before(grammarAccess.getProgram_heading_blockRule()); }
	 ruleprogram_heading_block
{ after(grammarAccess.getProgram_heading_blockRule()); } 
	 EOF 
;

// Rule program_heading_block
ruleprogram_heading_block
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgram_heading_blockAccess().getGroup()); }
(rule__Program_heading_block__Group__0)
{ after(grammarAccess.getProgram_heading_blockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleidentifier_list
entryRuleidentifier_list 
:
{ before(grammarAccess.getIdentifier_listRule()); }
	 ruleidentifier_list
{ after(grammarAccess.getIdentifier_listRule()); } 
	 EOF 
;

// Rule identifier_list
ruleidentifier_list
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdentifier_listAccess().getGroup()); }
(rule__Identifier_list__Group__0)
{ after(grammarAccess.getIdentifier_listAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleblock
entryRuleblock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleblock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule block
ruleblock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestatement_part
entryRulestatement_part 
:
{ before(grammarAccess.getStatement_partRule()); }
	 rulestatement_part
{ after(grammarAccess.getStatement_partRule()); } 
	 EOF 
;

// Rule statement_part
rulestatement_part
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatement_partAccess().getGroup()); }
(rule__Statement_part__Group__0)
{ after(grammarAccess.getStatement_partAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestatement_sequence
entryRulestatement_sequence 
:
{ before(grammarAccess.getStatement_sequenceRule()); }
	 rulestatement_sequence
{ after(grammarAccess.getStatement_sequenceRule()); } 
	 EOF 
;

// Rule statement_sequence
rulestatement_sequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatement_sequenceAccess().getGroup()); }
(rule__Statement_sequence__Group__0)
{ after(grammarAccess.getStatement_sequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestatement
entryRulestatement 
:
{ before(grammarAccess.getStatementRule()); }
	 rulestatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule statement
rulestatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getGroup()); }
(rule__Statement__Group__0)
{ after(grammarAccess.getStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelabel
entryRulelabel 
:
{ before(grammarAccess.getLabelRule()); }
	 rulelabel
{ after(grammarAccess.getLabelRule()); } 
	 EOF 
;

// Rule label
rulelabel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLabelAccess().getINTEGER_NUMBERTerminalRuleCall()); }
	RULE_INTEGER_NUMBER
{ after(grammarAccess.getLabelAccess().getINTEGER_NUMBERTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesimple_statement
entryRulesimple_statement 
:
{ before(grammarAccess.getSimple_statementRule()); }
	 rulesimple_statement
{ after(grammarAccess.getSimple_statementRule()); } 
	 EOF 
;

// Rule simple_statement
rulesimple_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimple_statementAccess().getAlternatives()); }
(rule__Simple_statement__Alternatives)?
{ after(grammarAccess.getSimple_statementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleassignment_statement
entryRuleassignment_statement 
:
{ before(grammarAccess.getAssignment_statementRule()); }
	 ruleassignment_statement
{ after(grammarAccess.getAssignment_statementRule()); } 
	 EOF 
;

// Rule assignment_statement
ruleassignment_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignment_statementAccess().getGroup()); }
(rule__Assignment_statement__Group__0)
{ after(grammarAccess.getAssignment_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevariable
entryRulevariable 
:
{ before(grammarAccess.getVariableRule()); }
	 rulevariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule variable
rulevariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getEntire_variableParserRuleCall()); }
	ruleentire_variable
{ after(grammarAccess.getVariableAccess().getEntire_variableParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleentire_variable
entryRuleentire_variable 
:
{ before(grammarAccess.getEntire_variableRule()); }
	 ruleentire_variable
{ after(grammarAccess.getEntire_variableRule()); } 
	 EOF 
;

// Rule entire_variable
ruleentire_variable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntire_variableAccess().getVariable_identifierParserRuleCall()); }
	rulevariable_identifier
{ after(grammarAccess.getEntire_variableAccess().getVariable_identifierParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevariable_identifier
entryRulevariable_identifier 
:
{ before(grammarAccess.getVariable_identifierRule()); }
	 rulevariable_identifier
{ after(grammarAccess.getVariable_identifierRule()); } 
	 EOF 
;

// Rule variable_identifier
rulevariable_identifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariable_identifierAccess().getIDENTIFIERTerminalRuleCall()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getVariable_identifierAccess().getIDENTIFIERTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleexpression
entryRuleexpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleexpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule expression
ruleexpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesimple_expression
entryRulesimple_expression 
:
{ before(grammarAccess.getSimple_expressionRule()); }
	 rulesimple_expression
{ after(grammarAccess.getSimple_expressionRule()); } 
	 EOF 
;

// Rule simple_expression
rulesimple_expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimple_expressionAccess().getGroup()); }
(rule__Simple_expression__Group__0)
{ after(grammarAccess.getSimple_expressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleaddition
entryRuleaddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleaddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule addition
ruleaddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getAlternatives()); }
(rule__Addition__Alternatives)
{ after(grammarAccess.getAdditionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleterm
entryRuleterm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleterm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule term
ruleterm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getGroup()); }
(rule__Term__Group__0)
{ after(grammarAccess.getTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefactor
entryRulefactor 
:
{ before(grammarAccess.getFactorRule()); }
	 rulefactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule factor
rulefactor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFactorAccess().getAlternatives()); }
(rule__Factor__Alternatives)
{ after(grammarAccess.getFactorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulenumber
entryRulenumber 
:
{ before(grammarAccess.getNumberRule()); }
	 rulenumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule number
rulenumber
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberAccess().getAlternatives()); }
(rule__Number__Alternatives)
{ after(grammarAccess.getNumberAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunsigned_number
entryRuleunsigned_number 
:
{ before(grammarAccess.getUnsigned_numberRule()); }
	 ruleunsigned_number
{ after(grammarAccess.getUnsigned_numberRule()); } 
	 EOF 
;

// Rule unsigned_number
ruleunsigned_number
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnsigned_numberAccess().getAlternatives()); }
(rule__Unsigned_number__Alternatives)
{ after(grammarAccess.getUnsigned_numberAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesigned_number
entryRulesigned_number 
:
{ before(grammarAccess.getSigned_numberRule()); }
	 rulesigned_number
{ after(grammarAccess.getSigned_numberRule()); } 
	 EOF 
;

// Rule signed_number
rulesigned_number
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSigned_numberAccess().getAlternatives()); }
(rule__Signed_number__Alternatives)
{ after(grammarAccess.getSigned_numberAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleset
entryRuleset 
:
{ before(grammarAccess.getSetRule()); }
	 ruleset
{ after(grammarAccess.getSetRule()); } 
	 EOF 
;

// Rule set
ruleset
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetAccess().getGroup()); }
(rule__Set__Group__0)
{ after(grammarAccess.getSetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefunction_designator
entryRulefunction_designator 
:
{ before(grammarAccess.getFunction_designatorRule()); }
	 rulefunction_designator
{ after(grammarAccess.getFunction_designatorRule()); } 
	 EOF 
;

// Rule function_designator
rulefunction_designator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunction_designatorAccess().getGroup()); }
(rule__Function_designator__Group__0)
{ after(grammarAccess.getFunction_designatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulegoto_statement
entryRulegoto_statement 
:
{ before(grammarAccess.getGoto_statementRule()); }
	 rulegoto_statement
{ after(grammarAccess.getGoto_statementRule()); } 
	 EOF 
;

// Rule goto_statement
rulegoto_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoto_statementAccess().getGroup()); }
(rule__Goto_statement__Group__0)
{ after(grammarAccess.getGoto_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledeclaration_part
entryRuledeclaration_part 
:
{ before(grammarAccess.getDeclaration_partRule()); }
	 ruledeclaration_part
{ after(grammarAccess.getDeclaration_partRule()); } 
	 EOF 
;

// Rule declaration_part
ruledeclaration_part
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclaration_partAccess().getLabel_declaration_partParserRuleCall()); }
(	rulelabel_declaration_part)?
{ after(grammarAccess.getDeclaration_partAccess().getLabel_declaration_partParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelabel_declaration_part
entryRulelabel_declaration_part 
:
{ before(grammarAccess.getLabel_declaration_partRule()); }
	 rulelabel_declaration_part
{ after(grammarAccess.getLabel_declaration_partRule()); } 
	 EOF 
;

// Rule label_declaration_part
rulelabel_declaration_part
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLabel_declaration_partAccess().getGroup()); }
(rule__Label_declaration_part__Group__0)
{ after(grammarAccess.getLabel_declaration_partAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Simple_statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_statementAccess().getAssignment_statementParserRuleCall_0()); }
	ruleassignment_statement
{ after(grammarAccess.getSimple_statementAccess().getAssignment_statementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSimple_statementAccess().getFunction_designatorParserRuleCall_1()); }
	rulefunction_designator
{ after(grammarAccess.getSimple_statementAccess().getFunction_designatorParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSimple_statementAccess().getGoto_statementParserRuleCall_2()); }
	rulegoto_statement
{ after(grammarAccess.getSimple_statementAccess().getGoto_statementParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_expression__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_expressionAccess().getGroup_2_0()); }
(rule__Simple_expression__Group_2_0__0)
{ after(grammarAccess.getSimple_expressionAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getSimple_expressionAccess().getSigned_numberParserRuleCall_2_1()); }
	rulesigned_number
{ after(grammarAccess.getSimple_expressionAccess().getSigned_numberParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_expression__Alternatives_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSimple_expressionAccess().getADDITION_OPERATORTerminalRuleCall_2_0_0_0()); }
(	RULE_ADDITION_OPERATOR)
{ after(grammarAccess.getSimple_expressionAccess().getADDITION_OPERATORTerminalRuleCall_2_0_0_0()); }
)
(
{ before(grammarAccess.getSimple_expressionAccess().getADDITION_OPERATORTerminalRuleCall_2_0_0_0()); }
(	RULE_ADDITION_OPERATOR)*
{ after(grammarAccess.getSimple_expressionAccess().getADDITION_OPERATORTerminalRuleCall_2_0_0_0()); }
)
)

    |(
{ before(grammarAccess.getSimple_expressionAccess().getOR_KEYWORDTerminalRuleCall_2_0_0_1()); }
	RULE_OR_KEYWORD
{ after(grammarAccess.getSimple_expressionAccess().getOR_KEYWORDTerminalRuleCall_2_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_0()); }
(rule__Addition__Group_0__0)
{ after(grammarAccess.getAdditionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getAdditionAccess().getFactorParserRuleCall_2()); }
	rulefactor
{ after(grammarAccess.getAdditionAccess().getFactorParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getVariableParserRuleCall_0()); }
	rulevariable
{ after(grammarAccess.getFactorAccess().getVariableParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFactorAccess().getNumberParserRuleCall_1()); }
	rulenumber
{ after(grammarAccess.getFactorAccess().getNumberParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getFactorAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getFactorAccess().getSTRINGTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getFactorAccess().getSetParserRuleCall_3()); }
	ruleset
{ after(grammarAccess.getFactorAccess().getSetParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getFactorAccess().getNIL_KEYWORDTerminalRuleCall_4()); }
	RULE_NIL_KEYWORD
{ after(grammarAccess.getFactorAccess().getNIL_KEYWORDTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getFactorAccess().getFunction_designatorParserRuleCall_5()); }
	rulefunction_designator
{ after(grammarAccess.getFactorAccess().getFunction_designatorParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getFactorAccess().getGroup_6()); }
(rule__Factor__Group_6__0)
{ after(grammarAccess.getFactorAccess().getGroup_6()); }
)

    |(
{ before(grammarAccess.getFactorAccess().getGroup_7()); }
(rule__Factor__Group_7__0)
{ after(grammarAccess.getFactorAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getUnsigned_numberParserRuleCall_0()); }
	ruleunsigned_number
{ after(grammarAccess.getNumberAccess().getUnsigned_numberParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getSigned_numberParserRuleCall_1()); }
	rulesigned_number
{ after(grammarAccess.getNumberAccess().getSigned_numberParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unsigned_number__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnsigned_numberAccess().getINTEGER_NUMBERTerminalRuleCall_0()); }
	RULE_INTEGER_NUMBER
{ after(grammarAccess.getUnsigned_numberAccess().getINTEGER_NUMBERTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnsigned_numberAccess().getREAL_NUMBERTerminalRuleCall_1()); }
	RULE_REAL_NUMBER
{ after(grammarAccess.getUnsigned_numberAccess().getREAL_NUMBERTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signed_number__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigned_numberAccess().getSIGNED_INTEGER_NUMBERTerminalRuleCall_0()); }
	RULE_SIGNED_INTEGER_NUMBER
{ after(grammarAccess.getSigned_numberAccess().getSIGNED_INTEGER_NUMBERTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSigned_numberAccess().getSIGNED_REAL_NUMBERTerminalRuleCall_1()); }
	RULE_SIGNED_REAL_NUMBER
{ after(grammarAccess.getSigned_numberAccess().getSIGNED_REAL_NUMBERTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function_designator__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunction_designatorAccess().getGroup_1_0()); }
(rule__Function_designator__Group_1_0__0)
{ after(grammarAccess.getFunction_designatorAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getFunction_designatorAccess().getGroup_1_1()); }
(rule__Function_designator__Group_1_1__0)
{ after(grammarAccess.getFunction_designatorAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Program__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getProgram_heading_blockParserRuleCall_0()); }
	ruleprogram_heading_block
{ after(grammarAccess.getProgramAccess().getProgram_heading_blockParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getBlockParserRuleCall_1()); }
	ruleblock
{ after(grammarAccess.getProgramAccess().getBlockParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getProgramAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Program_heading_block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program_heading_block__Group__0__Impl
	rule__Program_heading_block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgram_heading_blockAccess().getProgramKeyword_0()); }

	'program' 

{ after(grammarAccess.getProgram_heading_blockAccess().getProgramKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program_heading_block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program_heading_block__Group__1__Impl
	rule__Program_heading_block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgram_heading_blockAccess().getIDENTIFIERTerminalRuleCall_1()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getProgram_heading_blockAccess().getIDENTIFIERTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program_heading_block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program_heading_block__Group__2__Impl
	rule__Program_heading_block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgram_heading_blockAccess().getGroup_2()); }
(rule__Program_heading_block__Group_2__0)?
{ after(grammarAccess.getProgram_heading_blockAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program_heading_block__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program_heading_block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgram_heading_blockAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getProgram_heading_blockAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Program_heading_block__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program_heading_block__Group_2__0__Impl
	rule__Program_heading_block__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgram_heading_blockAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getProgram_heading_blockAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program_heading_block__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program_heading_block__Group_2__1__Impl
	rule__Program_heading_block__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgram_heading_blockAccess().getIdentifier_listParserRuleCall_2_1()); }
	ruleidentifier_list
{ after(grammarAccess.getProgram_heading_blockAccess().getIdentifier_listParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program_heading_block__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program_heading_block__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program_heading_block__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgram_heading_blockAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getProgram_heading_blockAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Identifier_list__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Identifier_list__Group__0__Impl
	rule__Identifier_list__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier_list__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_0()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Identifier_list__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Identifier_list__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier_list__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifier_listAccess().getGroup_1()); }
(rule__Identifier_list__Group_1__0)*
{ after(grammarAccess.getIdentifier_listAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Identifier_list__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Identifier_list__Group_1__0__Impl
	rule__Identifier_list__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier_list__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifier_listAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getIdentifier_listAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Identifier_list__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Identifier_list__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier_list__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_1_1()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getDeclaration_partParserRuleCall_0()); }
	ruledeclaration_part
{ after(grammarAccess.getBlockAccess().getDeclaration_partParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatement_partParserRuleCall_1()); }
	rulestatement_part
{ after(grammarAccess.getBlockAccess().getStatement_partParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Statement_part__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement_part__Group__0__Impl
	rule__Statement_part__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement_part__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatement_partAccess().getBEGIN_KEYWORDTerminalRuleCall_0()); }
	RULE_BEGIN_KEYWORD
{ after(grammarAccess.getStatement_partAccess().getBEGIN_KEYWORDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement_part__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement_part__Group__1__Impl
	rule__Statement_part__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement_part__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatement_partAccess().getStatement_sequenceParserRuleCall_1()); }
	rulestatement_sequence
{ after(grammarAccess.getStatement_partAccess().getStatement_sequenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement_part__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement_part__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement_part__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatement_partAccess().getEND_KEYWORDTerminalRuleCall_2()); }
	RULE_END_KEYWORD
{ after(grammarAccess.getStatement_partAccess().getEND_KEYWORDTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Statement_sequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement_sequence__Group__0__Impl
	rule__Statement_sequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement_sequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatement_sequenceAccess().getStatementParserRuleCall_0()); }
	rulestatement
{ after(grammarAccess.getStatement_sequenceAccess().getStatementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement_sequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement_sequence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement_sequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatement_sequenceAccess().getGroup_1()); }
(rule__Statement_sequence__Group_1__0)*
{ after(grammarAccess.getStatement_sequenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Statement_sequence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement_sequence__Group_1__0__Impl
	rule__Statement_sequence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement_sequence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatement_sequenceAccess().getSemicolonKeyword_1_0()); }

	';' 

{ after(grammarAccess.getStatement_sequenceAccess().getSemicolonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement_sequence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement_sequence__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement_sequence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatement_sequenceAccess().getStatementParserRuleCall_1_1()); }
	rulestatement
{ after(grammarAccess.getStatement_sequenceAccess().getStatementParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getGroup_0()); }
(rule__Statement__Group_0__0)?
{ after(grammarAccess.getStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getSimple_statementParserRuleCall_1()); }
	rulesimple_statement
{ after(grammarAccess.getStatementAccess().getSimple_statementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Statement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_0__0__Impl
	rule__Statement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getLabelParserRuleCall_0_0()); }
	rulelabel
{ after(grammarAccess.getStatementAccess().getLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getColonKeyword_0_1()); }

	':' 

{ after(grammarAccess.getStatementAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment_statement__Group__0__Impl
	rule__Assignment_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignment_statementAccess().getVariableParserRuleCall_0()); }
	rulevariable
{ after(grammarAccess.getAssignment_statementAccess().getVariableParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment_statement__Group__1__Impl
	rule__Assignment_statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignment_statementAccess().getColonEqualsSignKeyword_1()); }

	':=' 

{ after(grammarAccess.getAssignment_statementAccess().getColonEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment_statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment_statement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment_statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignment_statementAccess().getExpressionParserRuleCall_2()); }
	ruleexpression
{ after(grammarAccess.getAssignment_statementAccess().getExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getSimple_expressionParserRuleCall_0()); }
	rulesimple_expression
{ after(grammarAccess.getExpressionAccess().getSimple_expressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
(rule__Expression__Group_1__0)?
{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRELATIONAL_OPERATORTerminalRuleCall_1_0()); }
	RULE_RELATIONAL_OPERATOR
{ after(grammarAccess.getExpressionAccess().getRELATIONAL_OPERATORTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getSimple_expressionParserRuleCall_1_1()); }
	rulesimple_expression
{ after(grammarAccess.getExpressionAccess().getSimple_expressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Simple_expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_expression__Group__0__Impl
	rule__Simple_expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_expressionAccess().getADDITION_OPERATORTerminalRuleCall_0()); }
(	RULE_ADDITION_OPERATOR)?
{ after(grammarAccess.getSimple_expressionAccess().getADDITION_OPERATORTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Simple_expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_expression__Group__1__Impl
	rule__Simple_expression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_expressionAccess().getTermParserRuleCall_1()); }
	ruleterm
{ after(grammarAccess.getSimple_expressionAccess().getTermParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Simple_expression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_expression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_expression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_expressionAccess().getAlternatives_2()); }
(rule__Simple_expression__Alternatives_2)*
{ after(grammarAccess.getSimple_expressionAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Simple_expression__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_expression__Group_2_0__0__Impl
	rule__Simple_expression__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_expression__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_expressionAccess().getAlternatives_2_0_0()); }
(rule__Simple_expression__Alternatives_2_0_0)
{ after(grammarAccess.getSimple_expressionAccess().getAlternatives_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Simple_expression__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_expression__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_expression__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_expressionAccess().getTermParserRuleCall_2_0_1()); }
	ruleterm
{ after(grammarAccess.getSimple_expressionAccess().getTermParserRuleCall_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_0__0__Impl
	rule__Addition__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getNumberParserRuleCall_0_0()); }
	rulenumber
{ after(grammarAccess.getAdditionAccess().getNumberParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_0__1__Impl
	rule__Addition__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAdditionAccess().getADDITION_OPERATORTerminalRuleCall_0_1()); }
(	RULE_ADDITION_OPERATOR)
{ after(grammarAccess.getAdditionAccess().getADDITION_OPERATORTerminalRuleCall_0_1()); }
)
(
{ before(grammarAccess.getAdditionAccess().getADDITION_OPERATORTerminalRuleCall_0_1()); }
(	RULE_ADDITION_OPERATOR)*
{ after(grammarAccess.getAdditionAccess().getADDITION_OPERATORTerminalRuleCall_0_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAdditionParserRuleCall_0_2()); }
	ruleaddition
{ after(grammarAccess.getAdditionAccess().getAdditionParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getNumberParserRuleCall_1_0()); }
	rulenumber
{ after(grammarAccess.getAdditionAccess().getNumberParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAdditionAccess().getSigned_numberParserRuleCall_1_1()); }
(	rulesigned_number)
{ after(grammarAccess.getAdditionAccess().getSigned_numberParserRuleCall_1_1()); }
)
(
{ before(grammarAccess.getAdditionAccess().getSigned_numberParserRuleCall_1_1()); }
(	rulesigned_number)*
{ after(grammarAccess.getAdditionAccess().getSigned_numberParserRuleCall_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1_2()); }
(rule__Addition__Group_1_2__0)?
{ after(grammarAccess.getAdditionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Addition__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_2__0__Impl
	rule__Addition__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAdditionAccess().getADDITION_OPERATORTerminalRuleCall_1_2_0()); }
(	RULE_ADDITION_OPERATOR)
{ after(grammarAccess.getAdditionAccess().getADDITION_OPERATORTerminalRuleCall_1_2_0()); }
)
(
{ before(grammarAccess.getAdditionAccess().getADDITION_OPERATORTerminalRuleCall_1_2_0()); }
(	RULE_ADDITION_OPERATOR)*
{ after(grammarAccess.getAdditionAccess().getADDITION_OPERATORTerminalRuleCall_1_2_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAdditionParserRuleCall_1_2_1()); }
	ruleaddition
{ after(grammarAccess.getAdditionAccess().getAdditionParserRuleCall_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__0__Impl
	rule__Term__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); }
	rulefactor
{ after(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getGroup_1()); }
(rule__Term__Group_1__0)*
{ after(grammarAccess.getTermAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getMULTIPLICATION_OPERATORTerminalRuleCall_1_0()); }
	RULE_MULTIPLICATION_OPERATOR
{ after(grammarAccess.getTermAccess().getMULTIPLICATION_OPERATORTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getFactorParserRuleCall_1_1()); }
	rulefactor
{ after(grammarAccess.getTermAccess().getFactorParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Factor__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_6__0__Impl
	rule__Factor__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getLeftParenthesisKeyword_6_0()); }

	'(' 

{ after(grammarAccess.getFactorAccess().getLeftParenthesisKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_6__1__Impl
	rule__Factor__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getExpressionParserRuleCall_6_1()); }
	ruleexpression
{ after(grammarAccess.getFactorAccess().getExpressionParserRuleCall_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getRightParenthesisKeyword_6_2()); }

	')' 

{ after(grammarAccess.getFactorAccess().getRightParenthesisKeyword_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Factor__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_7__0__Impl
	rule__Factor__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getNOT_KEYWORDTerminalRuleCall_7_0()); }
	RULE_NOT_KEYWORD
{ after(grammarAccess.getFactorAccess().getNOT_KEYWORDTerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getFactorParserRuleCall_7_1()); }
	rulefactor
{ after(grammarAccess.getFactorAccess().getFactorParserRuleCall_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Set__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__0__Impl
	rule__Set__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getSetAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__1__Impl
	rule__Set__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getGroup_1()); }
(rule__Set__Group_1__0)?
{ after(grammarAccess.getSetAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getSetAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Set__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group_1__0__Impl
	rule__Set__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getExpressionParserRuleCall_1_0()); }
	ruleexpression
{ after(grammarAccess.getSetAccess().getExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getGroup_1_1()); }
(rule__Set__Group_1_1__0)*
{ after(grammarAccess.getSetAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Set__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group_1_1__0__Impl
	rule__Set__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getSetAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getExpressionParserRuleCall_1_1_1()); }
	ruleexpression
{ after(grammarAccess.getSetAccess().getExpressionParserRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function_designator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function_designator__Group__0__Impl
	rule__Function_designator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function_designator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunction_designatorAccess().getIDENTIFIERTerminalRuleCall_0()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getFunction_designatorAccess().getIDENTIFIERTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function_designator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function_designator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function_designator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunction_designatorAccess().getAlternatives_1()); }
(rule__Function_designator__Alternatives_1)
{ after(grammarAccess.getFunction_designatorAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function_designator__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function_designator__Group_1_0__0__Impl
	rule__Function_designator__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function_designator__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunction_designatorAccess().getLeftParenthesisKeyword_1_0_0()); }

	'(' 

{ after(grammarAccess.getFunction_designatorAccess().getLeftParenthesisKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function_designator__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function_designator__Group_1_0__1__Impl
	rule__Function_designator__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function_designator__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunction_designatorAccess().getExpressionParserRuleCall_1_0_1()); }
	ruleexpression
{ after(grammarAccess.getFunction_designatorAccess().getExpressionParserRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function_designator__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function_designator__Group_1_0__2__Impl
	rule__Function_designator__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function_designator__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunction_designatorAccess().getGroup_1_0_2()); }
(rule__Function_designator__Group_1_0_2__0)*
{ after(grammarAccess.getFunction_designatorAccess().getGroup_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function_designator__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function_designator__Group_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function_designator__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunction_designatorAccess().getRightParenthesisKeyword_1_0_3()); }

	')' 

{ after(grammarAccess.getFunction_designatorAccess().getRightParenthesisKeyword_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Function_designator__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function_designator__Group_1_0_2__0__Impl
	rule__Function_designator__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function_designator__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunction_designatorAccess().getCommaKeyword_1_0_2_0()); }

	',' 

{ after(grammarAccess.getFunction_designatorAccess().getCommaKeyword_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function_designator__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function_designator__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function_designator__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunction_designatorAccess().getExpressionParserRuleCall_1_0_2_1()); }
	ruleexpression
{ after(grammarAccess.getFunction_designatorAccess().getExpressionParserRuleCall_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function_designator__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function_designator__Group_1_1__0__Impl
	rule__Function_designator__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function_designator__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunction_designatorAccess().getLeftParenthesisKeyword_1_1_0()); }

	'(' 

{ after(grammarAccess.getFunction_designatorAccess().getLeftParenthesisKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function_designator__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function_designator__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function_designator__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunction_designatorAccess().getRightParenthesisKeyword_1_1_1()); }

	')' 

{ after(grammarAccess.getFunction_designatorAccess().getRightParenthesisKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Goto_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto_statement__Group__0__Impl
	rule__Goto_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoto_statementAccess().getGotoKeyword_0()); }

	'goto' 

{ after(grammarAccess.getGoto_statementAccess().getGotoKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goto_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto_statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoto_statementAccess().getLabelParserRuleCall_1()); }
	rulelabel
{ after(grammarAccess.getGoto_statementAccess().getLabelParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Label_declaration_part__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label_declaration_part__Group__0__Impl
	rule__Label_declaration_part__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabel_declaration_partAccess().getLABEL_KEYWORDTerminalRuleCall_0()); }
	RULE_LABEL_KEYWORD
{ after(grammarAccess.getLabel_declaration_partAccess().getLABEL_KEYWORDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Label_declaration_part__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label_declaration_part__Group__1__Impl
	rule__Label_declaration_part__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_1()); }
	rulelabel
{ after(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Label_declaration_part__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label_declaration_part__Group__2__Impl
	rule__Label_declaration_part__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabel_declaration_partAccess().getGroup_2()); }
(rule__Label_declaration_part__Group_2__0)*
{ after(grammarAccess.getLabel_declaration_partAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Label_declaration_part__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label_declaration_part__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabel_declaration_partAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getLabel_declaration_partAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Label_declaration_part__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label_declaration_part__Group_2__0__Impl
	rule__Label_declaration_part__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabel_declaration_partAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getLabel_declaration_partAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Label_declaration_part__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label_declaration_part__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_2_1()); }
	rulelabel
{ after(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Pascal__ProgramAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPascalAccess().getProgramProgramParserRuleCall_0()); }
	ruleprogram{ after(grammarAccess.getPascalAccess().getProgramProgramParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ADDITION_OPERATOR : ('+'|'-');

RULE_MULTIPLICATION_OPERATOR : ('*'|'/'|'div'|'mod'|'and');

RULE_RELATIONAL_OPERATOR : ('='|'<>'|'<'|'<='|'>'|'>='|'in');

RULE_BEGIN_KEYWORD : 'begin';

RULE_END_KEYWORD : 'end';

RULE_LABEL_KEYWORD : 'label';

RULE_NIL_KEYWORD : 'nil';

RULE_NOT_KEYWORD : 'not';

RULE_OR_KEYWORD : 'or';

RULE_SIGNED_INTEGER_NUMBER : ('+'|'-') RULE_INTEGER_NUMBER;

RULE_INTEGER_NUMBER : RULE_UNSIGNED_DIGIT_SEQUENCE;

RULE_SIGNED_REAL_NUMBER : ('+'|'-') RULE_REAL_NUMBER;

RULE_REAL_NUMBER : (RULE_UNSIGNED_DIGIT_SEQUENCE '.' RULE_UNSIGNED_DIGIT_SEQUENCE? (('E'|'e') RULE_DIGIT_SEQUENCE)?|RULE_UNSIGNED_DIGIT_SEQUENCE ('E'|'e') RULE_DIGIT_SEQUENCE);

RULE_UNSIGNED_DIGIT_SEQUENCE : RULE_DIGIT RULE_DIGIT*;

RULE_DIGIT_SEQUENCE : ('+'|'-')? RULE_UNSIGNED_DIGIT_SEQUENCE;

RULE_DIGIT : '0'..'9';

RULE_IDENTIFIER : RULE_LETTER_EXTENDED (RULE_LETTER_EXTENDED|RULE_DIGIT)*;

RULE_LETTER : ('A'..'Z'|'a'..'z');

RULE_LETTER_EXTENDED : (RULE_LETTER|'_');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



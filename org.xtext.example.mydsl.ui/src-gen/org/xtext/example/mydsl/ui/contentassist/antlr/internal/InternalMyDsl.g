/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGreetingsAssignment()); }
(rule__Model__GreetingsAssignment)*
{ after(grammarAccess.getModelAccess().getGreetingsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGreeting
entryRuleGreeting 
:
{ before(grammarAccess.getGreetingRule()); }
	 ruleGreeting
{ after(grammarAccess.getGreetingRule()); } 
	 EOF 
;

// Rule Greeting
ruleGreeting
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGreetingAccess().getAlternatives()); }
(rule__Greeting__Alternatives)
{ after(grammarAccess.getGreetingAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSIGNED_REAL_NUMBER
entryRuleSIGNED_REAL_NUMBER 
:
{ before(grammarAccess.getSIGNED_REAL_NUMBERRule()); }
	 ruleSIGNED_REAL_NUMBER
{ after(grammarAccess.getSIGNED_REAL_NUMBERRule()); } 
	 EOF 
;

// Rule SIGNED_REAL_NUMBER
ruleSIGNED_REAL_NUMBER
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSIGNED_REAL_NUMBERAccess().getGroup()); }
(rule__SIGNED_REAL_NUMBER__Group__0)
{ after(grammarAccess.getSIGNED_REAL_NUMBERAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleREAL_NUMBER
entryRuleREAL_NUMBER 
:
{ before(grammarAccess.getREAL_NUMBERRule()); }
	 ruleREAL_NUMBER
{ after(grammarAccess.getREAL_NUMBERRule()); } 
	 EOF 
;

// Rule REAL_NUMBER
ruleREAL_NUMBER
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getREAL_NUMBERAccess().getAlternatives()); }
(rule__REAL_NUMBER__Alternatives)
{ after(grammarAccess.getREAL_NUMBERAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUNSIGNED_DIGIT_SEQUENCE
entryRuleUNSIGNED_DIGIT_SEQUENCE 
:
{ before(grammarAccess.getUNSIGNED_DIGIT_SEQUENCERule()); }
	 ruleUNSIGNED_DIGIT_SEQUENCE
{ after(grammarAccess.getUNSIGNED_DIGIT_SEQUENCERule()); } 
	 EOF 
;

// Rule UNSIGNED_DIGIT_SEQUENCE
ruleUNSIGNED_DIGIT_SEQUENCE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getUNSIGNED_DIGIT_SEQUENCEAccess().getDIGITTerminalRuleCall()); }
(	RULE_DIGIT)
{ after(grammarAccess.getUNSIGNED_DIGIT_SEQUENCEAccess().getDIGITTerminalRuleCall()); }
)
(
{ before(grammarAccess.getUNSIGNED_DIGIT_SEQUENCEAccess().getDIGITTerminalRuleCall()); }
(	RULE_DIGIT)*
{ after(grammarAccess.getUNSIGNED_DIGIT_SEQUENCEAccess().getDIGITTerminalRuleCall()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDIGIT_SEQUENCE
entryRuleDIGIT_SEQUENCE 
:
{ before(grammarAccess.getDIGIT_SEQUENCERule()); }
	 ruleDIGIT_SEQUENCE
{ after(grammarAccess.getDIGIT_SEQUENCERule()); } 
	 EOF 
;

// Rule DIGIT_SEQUENCE
ruleDIGIT_SEQUENCE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDIGIT_SEQUENCEAccess().getGroup()); }
(rule__DIGIT_SEQUENCE__Group__0)
{ after(grammarAccess.getDIGIT_SEQUENCEAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Greeting__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getGroup_0()); }
(rule__Greeting__Group_0__0)
{ after(grammarAccess.getGreetingAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getGreetingAccess().getSIGNED_REAL_NUMBERParserRuleCall_1()); }
	ruleSIGNED_REAL_NUMBER
{ after(grammarAccess.getGreetingAccess().getSIGNED_REAL_NUMBERParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SIGNED_REAL_NUMBER__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSIGNED_REAL_NUMBERAccess().getPlusSignKeyword_0_0()); }

	'+' 

{ after(grammarAccess.getSIGNED_REAL_NUMBERAccess().getPlusSignKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getSIGNED_REAL_NUMBERAccess().getHyphenMinusKeyword_0_1()); }

	'-' 

{ after(grammarAccess.getSIGNED_REAL_NUMBERAccess().getHyphenMinusKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__REAL_NUMBER__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREAL_NUMBERAccess().getGroup_0()); }
(rule__REAL_NUMBER__Group_0__0)
{ after(grammarAccess.getREAL_NUMBERAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getREAL_NUMBERAccess().getGroup_1()); }
(rule__REAL_NUMBER__Group_1__0)
{ after(grammarAccess.getREAL_NUMBERAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__REAL_NUMBER__Alternatives_0_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREAL_NUMBERAccess().getEKeyword_0_3_0_0()); }

	'E' 

{ after(grammarAccess.getREAL_NUMBERAccess().getEKeyword_0_3_0_0()); }
)

    |(
{ before(grammarAccess.getREAL_NUMBERAccess().getEKeyword_0_3_0_1()); }

	'e' 

{ after(grammarAccess.getREAL_NUMBERAccess().getEKeyword_0_3_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__REAL_NUMBER__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREAL_NUMBERAccess().getEKeyword_1_1_0()); }

	'E' 

{ after(grammarAccess.getREAL_NUMBERAccess().getEKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getREAL_NUMBERAccess().getEKeyword_1_1_1()); }

	'e' 

{ after(grammarAccess.getREAL_NUMBERAccess().getEKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DIGIT_SEQUENCE__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDIGIT_SEQUENCEAccess().getPlusSignKeyword_0_0()); }

	'+' 

{ after(grammarAccess.getDIGIT_SEQUENCEAccess().getPlusSignKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getDIGIT_SEQUENCEAccess().getHyphenMinusKeyword_0_1()); }

	'-' 

{ after(grammarAccess.getDIGIT_SEQUENCEAccess().getHyphenMinusKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Greeting__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group_0__0__Impl
	rule__Greeting__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getHelloKeyword_0_0()); }

	'Hello' 

{ after(grammarAccess.getGreetingAccess().getHelloKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group_0__1__Impl
	rule__Greeting__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getNameAssignment_0_1()); }
(rule__Greeting__NameAssignment_0_1)
{ after(grammarAccess.getGreetingAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getExclamationMarkKeyword_0_2()); }

	'!' 

{ after(grammarAccess.getGreetingAccess().getExclamationMarkKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SIGNED_REAL_NUMBER__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SIGNED_REAL_NUMBER__Group__0__Impl
	rule__SIGNED_REAL_NUMBER__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SIGNED_REAL_NUMBER__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSIGNED_REAL_NUMBERAccess().getAlternatives_0()); }
(rule__SIGNED_REAL_NUMBER__Alternatives_0)
{ after(grammarAccess.getSIGNED_REAL_NUMBERAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SIGNED_REAL_NUMBER__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SIGNED_REAL_NUMBER__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SIGNED_REAL_NUMBER__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSIGNED_REAL_NUMBERAccess().getREAL_NUMBERParserRuleCall_1()); }
	ruleREAL_NUMBER
{ after(grammarAccess.getSIGNED_REAL_NUMBERAccess().getREAL_NUMBERParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__REAL_NUMBER__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REAL_NUMBER__Group_0__0__Impl
	rule__REAL_NUMBER__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL_NUMBER__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREAL_NUMBERAccess().getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_0_0()); }
	ruleUNSIGNED_DIGIT_SEQUENCE
{ after(grammarAccess.getREAL_NUMBERAccess().getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REAL_NUMBER__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REAL_NUMBER__Group_0__1__Impl
	rule__REAL_NUMBER__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL_NUMBER__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREAL_NUMBERAccess().getFullStopKeyword_0_1()); }

	'.' 

{ after(grammarAccess.getREAL_NUMBERAccess().getFullStopKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REAL_NUMBER__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REAL_NUMBER__Group_0__2__Impl
	rule__REAL_NUMBER__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL_NUMBER__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREAL_NUMBERAccess().getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_0_2()); }
(	ruleUNSIGNED_DIGIT_SEQUENCE)?
{ after(grammarAccess.getREAL_NUMBERAccess().getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REAL_NUMBER__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REAL_NUMBER__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL_NUMBER__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREAL_NUMBERAccess().getGroup_0_3()); }
(rule__REAL_NUMBER__Group_0_3__0)?
{ after(grammarAccess.getREAL_NUMBERAccess().getGroup_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__REAL_NUMBER__Group_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REAL_NUMBER__Group_0_3__0__Impl
	rule__REAL_NUMBER__Group_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL_NUMBER__Group_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREAL_NUMBERAccess().getAlternatives_0_3_0()); }
(rule__REAL_NUMBER__Alternatives_0_3_0)
{ after(grammarAccess.getREAL_NUMBERAccess().getAlternatives_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REAL_NUMBER__Group_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REAL_NUMBER__Group_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL_NUMBER__Group_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREAL_NUMBERAccess().getDIGIT_SEQUENCEParserRuleCall_0_3_1()); }
	ruleDIGIT_SEQUENCE
{ after(grammarAccess.getREAL_NUMBERAccess().getDIGIT_SEQUENCEParserRuleCall_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__REAL_NUMBER__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REAL_NUMBER__Group_1__0__Impl
	rule__REAL_NUMBER__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL_NUMBER__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREAL_NUMBERAccess().getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_1_0()); }
	ruleUNSIGNED_DIGIT_SEQUENCE
{ after(grammarAccess.getREAL_NUMBERAccess().getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REAL_NUMBER__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REAL_NUMBER__Group_1__1__Impl
	rule__REAL_NUMBER__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL_NUMBER__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREAL_NUMBERAccess().getAlternatives_1_1()); }
(rule__REAL_NUMBER__Alternatives_1_1)
{ after(grammarAccess.getREAL_NUMBERAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__REAL_NUMBER__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__REAL_NUMBER__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL_NUMBER__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREAL_NUMBERAccess().getDIGIT_SEQUENCEParserRuleCall_1_2()); }
	ruleDIGIT_SEQUENCE
{ after(grammarAccess.getREAL_NUMBERAccess().getDIGIT_SEQUENCEParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DIGIT_SEQUENCE__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DIGIT_SEQUENCE__Group__0__Impl
	rule__DIGIT_SEQUENCE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DIGIT_SEQUENCE__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDIGIT_SEQUENCEAccess().getAlternatives_0()); }
(rule__DIGIT_SEQUENCE__Alternatives_0)?
{ after(grammarAccess.getDIGIT_SEQUENCEAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DIGIT_SEQUENCE__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DIGIT_SEQUENCE__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DIGIT_SEQUENCE__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDIGIT_SEQUENCEAccess().getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_1()); }
	ruleUNSIGNED_DIGIT_SEQUENCE
{ after(grammarAccess.getDIGIT_SEQUENCEAccess().getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__GreetingsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); }
	ruleGreeting{ after(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_0_1_0()); }
	RULE_ID{ after(grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DIGIT : '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsGreetingParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=Greeting*;
		public ParserRule getRule() { return rule; }

		//greetings+=Greeting*
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }

		//Greeting
		public RuleCall getGreetingsGreetingParserRuleCall_0() { return cGreetingsGreetingParserRuleCall_0; }
	}

	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Greeting");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cHelloKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cSIGNED_REAL_NUMBERParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Greeting:
		//	"Hello" name=ID "!" | SIGNED_REAL_NUMBER;
		public ParserRule getRule() { return rule; }

		//"Hello" name=ID "!" | SIGNED_REAL_NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Hello" name=ID "!"
		public Group getGroup_0() { return cGroup_0; }

		//"Hello"
		public Keyword getHelloKeyword_0_0() { return cHelloKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_2() { return cExclamationMarkKeyword_0_2; }

		//SIGNED_REAL_NUMBER
		public RuleCall getSIGNED_REAL_NUMBERParserRuleCall_1() { return cSIGNED_REAL_NUMBERParserRuleCall_1; }
	}

	public class SIGNED_REAL_NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SIGNED_REAL_NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cREAL_NUMBERParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SIGNED_REAL_NUMBER:
		//	("+" | "-") REAL_NUMBER;
		public ParserRule getRule() { return rule; }

		//("+" | "-") REAL_NUMBER
		public Group getGroup() { return cGroup; }

		//"+" | "-"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//REAL_NUMBER
		public RuleCall getREAL_NUMBERParserRuleCall_1() { return cREAL_NUMBERParserRuleCall_1; }
	}

	public class REAL_NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL_NUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cUNSIGNED_DIGIT_SEQUENCEParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cUNSIGNED_DIGIT_SEQUENCEParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Alternatives cAlternatives_0_3_0 = (Alternatives)cGroup_0_3.eContents().get(0);
		private final Keyword cEKeyword_0_3_0_0 = (Keyword)cAlternatives_0_3_0.eContents().get(0);
		private final Keyword cEKeyword_0_3_0_1 = (Keyword)cAlternatives_0_3_0.eContents().get(1);
		private final RuleCall cDIGIT_SEQUENCEParserRuleCall_0_3_1 = (RuleCall)cGroup_0_3.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cUNSIGNED_DIGIT_SEQUENCEParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cEKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cEKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cDIGIT_SEQUENCEParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//REAL_NUMBER:
		//	UNSIGNED_DIGIT_SEQUENCE "." UNSIGNED_DIGIT_SEQUENCE? (("E" | "e") DIGIT_SEQUENCE)? | UNSIGNED_DIGIT_SEQUENCE ("E" |
		//	"e") DIGIT_SEQUENCE;
		public ParserRule getRule() { return rule; }

		//UNSIGNED_DIGIT_SEQUENCE "." UNSIGNED_DIGIT_SEQUENCE? (("E" | "e") DIGIT_SEQUENCE)? | UNSIGNED_DIGIT_SEQUENCE ("E" | "e")
		//DIGIT_SEQUENCE
		public Alternatives getAlternatives() { return cAlternatives; }

		//UNSIGNED_DIGIT_SEQUENCE "." UNSIGNED_DIGIT_SEQUENCE? (("E" | "e") DIGIT_SEQUENCE)?
		public Group getGroup_0() { return cGroup_0; }

		//UNSIGNED_DIGIT_SEQUENCE
		public RuleCall getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_0_0() { return cUNSIGNED_DIGIT_SEQUENCEParserRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//UNSIGNED_DIGIT_SEQUENCE?
		public RuleCall getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_0_2() { return cUNSIGNED_DIGIT_SEQUENCEParserRuleCall_0_2; }

		//(("E" | "e") DIGIT_SEQUENCE)?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"E" | "e"
		public Alternatives getAlternatives_0_3_0() { return cAlternatives_0_3_0; }

		//"E"
		public Keyword getEKeyword_0_3_0_0() { return cEKeyword_0_3_0_0; }

		//"e"
		public Keyword getEKeyword_0_3_0_1() { return cEKeyword_0_3_0_1; }

		//DIGIT_SEQUENCE
		public RuleCall getDIGIT_SEQUENCEParserRuleCall_0_3_1() { return cDIGIT_SEQUENCEParserRuleCall_0_3_1; }

		//UNSIGNED_DIGIT_SEQUENCE ("E" | "e") DIGIT_SEQUENCE
		public Group getGroup_1() { return cGroup_1; }

		//UNSIGNED_DIGIT_SEQUENCE
		public RuleCall getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_1_0() { return cUNSIGNED_DIGIT_SEQUENCEParserRuleCall_1_0; }

		//"E" | "e"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"E"
		public Keyword getEKeyword_1_1_0() { return cEKeyword_1_1_0; }

		//"e"
		public Keyword getEKeyword_1_1_1() { return cEKeyword_1_1_1; }

		//DIGIT_SEQUENCE
		public RuleCall getDIGIT_SEQUENCEParserRuleCall_1_2() { return cDIGIT_SEQUENCEParserRuleCall_1_2; }
	}

	public class UNSIGNED_DIGIT_SEQUENCEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UNSIGNED_DIGIT_SEQUENCE");
		private final RuleCall cDIGITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UNSIGNED_DIGIT_SEQUENCE:
		//	DIGIT+;
		public ParserRule getRule() { return rule; }

		//DIGIT+
		public RuleCall getDIGITTerminalRuleCall() { return cDIGITTerminalRuleCall; }
	}

	public class DIGIT_SEQUENCEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT_SEQUENCE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cUNSIGNED_DIGIT_SEQUENCEParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//DIGIT_SEQUENCE:
		//	("+" | "-")? UNSIGNED_DIGIT_SEQUENCE;
		public ParserRule getRule() { return rule; }

		//("+" | "-")? UNSIGNED_DIGIT_SEQUENCE
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//UNSIGNED_DIGIT_SEQUENCE
		public RuleCall getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_1() { return cUNSIGNED_DIGIT_SEQUENCEParserRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final GreetingElements pGreeting;
	private final SIGNED_REAL_NUMBERElements pSIGNED_REAL_NUMBER;
	private final REAL_NUMBERElements pREAL_NUMBER;
	private final UNSIGNED_DIGIT_SEQUENCEElements pUNSIGNED_DIGIT_SEQUENCE;
	private final DIGIT_SEQUENCEElements pDIGIT_SEQUENCE;
	private final TerminalRule tDIGIT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGreeting = new GreetingElements();
		this.pSIGNED_REAL_NUMBER = new SIGNED_REAL_NUMBERElements();
		this.pREAL_NUMBER = new REAL_NUMBERElements();
		this.pUNSIGNED_DIGIT_SEQUENCE = new UNSIGNED_DIGIT_SEQUENCEElements();
		this.pDIGIT_SEQUENCE = new DIGIT_SEQUENCEElements();
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=Greeting*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Greeting:
	//	"Hello" name=ID "!" | SIGNED_REAL_NUMBER;
	public GreetingElements getGreetingAccess() {
		return pGreeting;
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}

	//SIGNED_REAL_NUMBER:
	//	("+" | "-") REAL_NUMBER;
	public SIGNED_REAL_NUMBERElements getSIGNED_REAL_NUMBERAccess() {
		return pSIGNED_REAL_NUMBER;
	}
	
	public ParserRule getSIGNED_REAL_NUMBERRule() {
		return getSIGNED_REAL_NUMBERAccess().getRule();
	}

	//REAL_NUMBER:
	//	UNSIGNED_DIGIT_SEQUENCE "." UNSIGNED_DIGIT_SEQUENCE? (("E" | "e") DIGIT_SEQUENCE)? | UNSIGNED_DIGIT_SEQUENCE ("E" |
	//	"e") DIGIT_SEQUENCE;
	public REAL_NUMBERElements getREAL_NUMBERAccess() {
		return pREAL_NUMBER;
	}
	
	public ParserRule getREAL_NUMBERRule() {
		return getREAL_NUMBERAccess().getRule();
	}

	//UNSIGNED_DIGIT_SEQUENCE:
	//	DIGIT+;
	public UNSIGNED_DIGIT_SEQUENCEElements getUNSIGNED_DIGIT_SEQUENCEAccess() {
		return pUNSIGNED_DIGIT_SEQUENCE;
	}
	
	public ParserRule getUNSIGNED_DIGIT_SEQUENCERule() {
		return getUNSIGNED_DIGIT_SEQUENCEAccess().getRule();
	}

	//DIGIT_SEQUENCE:
	//	("+" | "-")? UNSIGNED_DIGIT_SEQUENCE;
	public DIGIT_SEQUENCEElements getDIGIT_SEQUENCEAccess() {
		return pDIGIT_SEQUENCE;
	}
	
	public ParserRule getDIGIT_SEQUENCERule() {
		return getDIGIT_SEQUENCEAccess().getRule();
	}

	//terminal DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

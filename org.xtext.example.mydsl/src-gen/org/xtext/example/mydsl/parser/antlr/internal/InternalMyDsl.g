/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); 
	    }
		lv_greetings_0_0=ruleGreeting		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"greetings",
        		lv_greetings_0_0, 
        		"Greeting");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleGreeting
entryRuleGreeting returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGreetingRule()); }
	 iv_ruleGreeting=ruleGreeting 
	 { $current=$iv_ruleGreeting.current; } 
	 EOF 
;

// Rule Greeting
ruleGreeting returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='Hello' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGreetingAccess().getHelloKeyword_0_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGreetingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='!' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGreetingAccess().getExclamationMarkKeyword_0_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getGreetingAccess().getNumberParserRuleCall_1()); 
    }
rulenumber
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulenumber
entryRulenumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_rulenumber=rulenumber 
	 { $current=$iv_rulenumber.current.getText(); }  
	 EOF 
;

// Rule number
rulenumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='0' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitZeroKeyword_0_0()); 
    }

    |
	kw='1' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitOneKeyword_0_1()); 
    }

    |
	kw='2' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitTwoKeyword_0_2()); 
    }

    |
	kw='3' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitThreeKeyword_0_3()); 
    }

    |
	kw='4' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitFourKeyword_0_4()); 
    }

    |
	kw='5' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitFiveKeyword_0_5()); 
    }

    |
	kw='6' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitSixKeyword_0_6()); 
    }

    |
	kw='7' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitSevenKeyword_0_7()); 
    }

    |
	kw='8' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitEightKeyword_0_8()); 
    }

    |
	kw='9' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitNineKeyword_0_9()); 
    }
)+
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_1()); 
    }
(
	kw='0' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitZeroKeyword_2_0()); 
    }

    |
	kw='1' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitOneKeyword_2_1()); 
    }

    |
	kw='2' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitTwoKeyword_2_2()); 
    }

    |
	kw='3' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitThreeKeyword_2_3()); 
    }

    |
	kw='4' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitFourKeyword_2_4()); 
    }

    |
	kw='5' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitFiveKeyword_2_5()); 
    }

    |
	kw='6' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitSixKeyword_2_6()); 
    }

    |
	kw='7' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitSevenKeyword_2_7()); 
    }

    |
	kw='8' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitEightKeyword_2_8()); 
    }

    |
	kw='9' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitNineKeyword_2_9()); 
    }
)+((
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getEKeyword_3_0_0()); 
    }

    |
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getEKeyword_3_0_1()); 
    }
)(
	kw='0' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitZeroKeyword_3_1_0()); 
    }

    |
	kw='1' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitOneKeyword_3_1_1()); 
    }

    |
	kw='2' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitTwoKeyword_3_1_2()); 
    }

    |
	kw='3' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitThreeKeyword_3_1_3()); 
    }

    |
	kw='4' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitFourKeyword_3_1_4()); 
    }

    |
	kw='5' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitFiveKeyword_3_1_5()); 
    }

    |
	kw='6' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitSixKeyword_3_1_6()); 
    }

    |
	kw='7' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitSevenKeyword_3_1_7()); 
    }

    |
	kw='8' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitEightKeyword_3_1_8()); 
    }

    |
	kw='9' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getDigitNineKeyword_3_1_9()); 
    }
)+)?)
    ;







// Entry rule entryRuleREAL_NUMBER
entryRuleREAL_NUMBER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getREAL_NUMBERRule()); } 
	 iv_ruleREAL_NUMBER=ruleREAL_NUMBER 
	 { $current=$iv_ruleREAL_NUMBER.current.getText(); }  
	 EOF 
;

// Rule REAL_NUMBER
ruleREAL_NUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getREAL_NUMBERAccess().getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_0_0()); 
    }
    this_UNSIGNED_DIGIT_SEQUENCE_0=ruleUNSIGNED_DIGIT_SEQUENCE    {
		$current.merge(this_UNSIGNED_DIGIT_SEQUENCE_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getREAL_NUMBERAccess().getFullStopKeyword_0_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getREAL_NUMBERAccess().getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_0_2()); 
    }
    this_UNSIGNED_DIGIT_SEQUENCE_2=ruleUNSIGNED_DIGIT_SEQUENCE    {
		$current.merge(this_UNSIGNED_DIGIT_SEQUENCE_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?((
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getREAL_NUMBERAccess().getEKeyword_0_3_0_0()); 
    }

    |
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getREAL_NUMBERAccess().getEKeyword_0_3_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getREAL_NUMBERAccess().getDIGIT_SEQUENCEParserRuleCall_0_3_1()); 
    }
    this_DIGIT_SEQUENCE_5=ruleDIGIT_SEQUENCE    {
		$current.merge(this_DIGIT_SEQUENCE_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |(
    { 
        newCompositeNode(grammarAccess.getREAL_NUMBERAccess().getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_1_0()); 
    }
    this_UNSIGNED_DIGIT_SEQUENCE_6=ruleUNSIGNED_DIGIT_SEQUENCE    {
		$current.merge(this_UNSIGNED_DIGIT_SEQUENCE_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getREAL_NUMBERAccess().getEKeyword_1_1_0()); 
    }

    |
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getREAL_NUMBERAccess().getEKeyword_1_1_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getREAL_NUMBERAccess().getDIGIT_SEQUENCEParserRuleCall_1_2()); 
    }
    this_DIGIT_SEQUENCE_9=ruleDIGIT_SEQUENCE    {
		$current.merge(this_DIGIT_SEQUENCE_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleUNSIGNED_DIGIT_SEQUENCE
entryRuleUNSIGNED_DIGIT_SEQUENCE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUNSIGNED_DIGIT_SEQUENCERule()); } 
	 iv_ruleUNSIGNED_DIGIT_SEQUENCE=ruleUNSIGNED_DIGIT_SEQUENCE 
	 { $current=$iv_ruleUNSIGNED_DIGIT_SEQUENCE.current.getText(); }  
	 EOF 
;

// Rule UNSIGNED_DIGIT_SEQUENCE
ruleUNSIGNED_DIGIT_SEQUENCE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_DIGIT_0=RULE_DIGIT    {
		$current.merge(this_DIGIT_0);
    }

    { 
    newLeafNode(this_DIGIT_0, grammarAccess.getUNSIGNED_DIGIT_SEQUENCEAccess().getDIGITTerminalRuleCall()); 
    }
)+
    ;





// Entry rule entryRuleDIGIT_SEQUENCE
entryRuleDIGIT_SEQUENCE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDIGIT_SEQUENCERule()); } 
	 iv_ruleDIGIT_SEQUENCE=ruleDIGIT_SEQUENCE 
	 { $current=$iv_ruleDIGIT_SEQUENCE.current.getText(); }  
	 EOF 
;

// Rule DIGIT_SEQUENCE
ruleDIGIT_SEQUENCE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDIGIT_SEQUENCEAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDIGIT_SEQUENCEAccess().getHyphenMinusKeyword_0_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getDIGIT_SEQUENCEAccess().getUNSIGNED_DIGIT_SEQUENCEParserRuleCall_1()); 
    }
    this_UNSIGNED_DIGIT_SEQUENCE_2=ruleUNSIGNED_DIGIT_SEQUENCE    {
		$current.merge(this_UNSIGNED_DIGIT_SEQUENCE_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





RULE_DIGIT : '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



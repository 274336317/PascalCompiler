/*
* generated by Xtext
*/
parser grammar InternalPascalParser;

options {
	tokenVocab=InternalPascalLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.xtext.example.pascal.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.pascal.services.PascalGrammarAccess;

}

@members {


	private PascalGrammarAccess grammarAccess;
	 	
	public InternalPascalParser(TokenStream input, PascalGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "pascal";	
	} 
	   	   	
	@Override
	protected PascalGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRulepascal
entryRulepascal returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPascalRule()); }
	 iv_rulepascal=rulepascal 
	 { $current=$iv_rulepascal.current; } 
	 EOF 
;

// Rule pascal
rulepascal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPascalAccess().getProgramProgramParserRuleCall_0()); 
	    }
		lv_program_0_0=ruleprogram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPascalRule());
	        }
       		add(
       			$current, 
       			"program",
        		lv_program_0_0, 
        		"program");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleprogram
entryRuleprogram returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getProgramRule()); } 
	 iv_ruleprogram=ruleprogram 
	 { $current=$iv_ruleprogram.current.getText(); }  
	 EOF 
;

// Rule program
ruleprogram returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getProgramAccess().getProgram_heading_blockParserRuleCall_0()); 
    }
    this_program_heading_block_0=ruleprogram_heading_block    {
		$current.merge(this_program_heading_block_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getProgramAccess().getBlockParserRuleCall_1()); 
    }
    this_block_1=ruleblock    {
		$current.merge(this_block_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgramAccess().getFullStopKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleprogram_heading_block
entryRuleprogram_heading_block returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getProgram_heading_blockRule()); } 
	 iv_ruleprogram_heading_block=ruleprogram_heading_block 
	 { $current=$iv_ruleprogram_heading_block.current.getText(); }  
	 EOF 
;

// Rule program_heading_block
ruleprogram_heading_block returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Program 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_heading_blockAccess().getProgramKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getProgram_heading_blockAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw=LeftParenthesis 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_heading_blockAccess().getLeftParenthesisKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getProgram_heading_blockAccess().getIdentifier_listParserRuleCall_2_1()); 
    }
    this_identifier_list_3=ruleidentifier_list    {
		$current.merge(this_identifier_list_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=RightParenthesis 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_heading_blockAccess().getRightParenthesisKeyword_2_2()); 
    }
)?
	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_heading_blockAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleidentifier_list
entryRuleidentifier_list returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getIdentifier_listRule()); } 
	 iv_ruleidentifier_list=ruleidentifier_list 
	 { $current=$iv_ruleidentifier_list.current.getText(); }  
	 EOF 
;

// Rule identifier_list
ruleidentifier_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIdentifier_listAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=Comma 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdentifier_listAccess().getCommaKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getIdentifier_listAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleblock
entryRuleblock returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getBlockRule()); } 
	 iv_ruleblock=ruleblock 
	 { $current=$iv_ruleblock.current.getText(); }  
	 EOF 
;

// Rule block
ruleblock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getBlockAccess().getDeclaration_partParserRuleCall_0()); 
    }
    this_declaration_part_0=ruledeclaration_part    {
		$current.merge(this_declaration_part_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getBlockAccess().getStatement_partParserRuleCall_1()); 
    }
    this_statement_part_1=rulestatement_part    {
		$current.merge(this_statement_part_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulestatement_part
entryRulestatement_part returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getStatement_partRule()); } 
	 iv_rulestatement_part=rulestatement_part 
	 { $current=$iv_rulestatement_part.current.getText(); }  
	 EOF 
;

// Rule statement_part
rulestatement_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Begin 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatement_partAccess().getBeginKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatement_partAccess().getStatement_sequenceParserRuleCall_1()); 
    }
    this_statement_sequence_1=rulestatement_sequence    {
		$current.merge(this_statement_sequence_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=End 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatement_partAccess().getEndKeyword_2()); 
    }
)
    ;





// Entry rule entryRulestatement_sequence
entryRulestatement_sequence returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getStatement_sequenceRule()); } 
	 iv_rulestatement_sequence=rulestatement_sequence 
	 { $current=$iv_rulestatement_sequence.current.getText(); }  
	 EOF 
;

// Rule statement_sequence
rulestatement_sequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getStatement_sequenceAccess().getStatementParserRuleCall_0()); 
    }
    this_statement_0=rulestatement    {
		$current.merge(this_statement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatement_sequenceAccess().getSemicolonKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatement_sequenceAccess().getStatementParserRuleCall_1_1()); 
    }
    this_statement_2=rulestatement    {
		$current.merge(this_statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRulestatement
entryRulestatement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getStatementRule()); } 
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current.getText(); }  
	 EOF 
;

// Rule statement
rulestatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getLabelParserRuleCall_0_0()); 
    }
    this_label_0=rulelabel    {
		$current.merge(this_label_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Colon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getColonKeyword_0_1()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSimple_statementParserRuleCall_1_0()); 
    }
    this_simple_statement_2=rulesimple_statement    {
		$current.merge(this_simple_statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStructured_statementParserRuleCall_1_1()); 
    }
    this_structured_statement_3=rulestructured_statement    {
		$current.merge(this_structured_statement_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRulelabel
entryRulelabel returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getLabelRule()); } 
	 iv_rulelabel=rulelabel 
	 { $current=$iv_rulelabel.current.getText(); }  
	 EOF 
;

// Rule label
rulelabel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_SIGNED_INTEGER_NUMBER_0=RULE_SIGNED_INTEGER_NUMBER    {
		$current.merge(this_SIGNED_INTEGER_NUMBER_0);
    }

    { 
    newLeafNode(this_SIGNED_INTEGER_NUMBER_0, grammarAccess.getLabelAccess().getSIGNED_INTEGER_NUMBERTerminalRuleCall_0()); 
    }

    |    this_INTEGER_NUMBER_1=RULE_INTEGER_NUMBER    {
		$current.merge(this_INTEGER_NUMBER_1);
    }

    { 
    newLeafNode(this_INTEGER_NUMBER_1, grammarAccess.getLabelAccess().getINTEGER_NUMBERTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRulesimple_statement
entryRulesimple_statement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSimple_statementRule()); } 
	 iv_rulesimple_statement=rulesimple_statement 
	 { $current=$iv_rulesimple_statement.current.getText(); }  
	 EOF 
;

// Rule simple_statement
rulesimple_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getSimple_statementAccess().getAssignment_statementParserRuleCall_0()); 
    }
    this_assignment_statement_0=ruleassignment_statement    {
		$current.merge(this_assignment_statement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimple_statementAccess().getFunction_designatorParserRuleCall_1()); 
    }
    this_function_designator_1=rulefunction_designator    {
		$current.merge(this_function_designator_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimple_statementAccess().getGoto_statementParserRuleCall_2()); 
    }
    this_goto_statement_2=rulegoto_statement    {
		$current.merge(this_goto_statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getSimple_statementAccess().getIDTerminalRuleCall_3()); 
    }
)?
    ;





// Entry rule entryRuleassignment_statement
entryRuleassignment_statement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getAssignment_statementRule()); } 
	 iv_ruleassignment_statement=ruleassignment_statement 
	 { $current=$iv_ruleassignment_statement.current.getText(); }  
	 EOF 
;

// Rule assignment_statement
ruleassignment_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getAssignment_statementAccess().getVariableParserRuleCall_0()); 
    }
    this_variable_0=rulevariable    {
		$current.merge(this_variable_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=ColonEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignment_statementAccess().getColonEqualsSignKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getAssignment_statementAccess().getExpressionParserRuleCall_2()); 
    }
    this_expression_2=ruleexpression    {
		$current.merge(this_expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulevariable
entryRulevariable returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getVariableRule()); } 
	 iv_rulevariable=rulevariable 
	 { $current=$iv_rulevariable.current.getText(); }  
	 EOF 
;

// Rule variable
rulevariable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getVariableAccess().getIDTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariableAccess().getVariable_ParserRuleCall_1()); 
    }
    this_variable__1=rulevariable_    {
		$current.merge(this_variable__1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulevariable_
entryRulevariable_ returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getVariable_Rule()); } 
	 iv_rulevariable_=rulevariable_ 
	 { $current=$iv_rulevariable_.current.getText(); }  
	 EOF 
;

// Rule variable_
rulevariable_ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=LeftSquareBracket 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_Access().getLeftSquareBracketKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariable_Access().getExpression_listParserRuleCall_0_1()); 
    }
    this_expression_list_1=ruleexpression_list    {
		$current.merge(this_expression_list_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=RightSquareBracket 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_Access().getRightSquareBracketKeyword_0_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariable_Access().getVariable_ParserRuleCall_0_3()); 
    }
    this_variable__3=rulevariable_    {
		$current.merge(this_variable__3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_Access().getFullStopKeyword_1_0()); 
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getVariable_Access().getIDTerminalRuleCall_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariable_Access().getVariable_ParserRuleCall_1_2()); 
    }
    this_variable__6=rulevariable_    {
		$current.merge(this_variable__6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw=CircumflexAccent 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_Access().getCircumflexAccentKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariable_Access().getVariable_ParserRuleCall_2_1()); 
    }
    this_variable__8=rulevariable_    {
		$current.merge(this_variable__8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))?
    ;





// Entry rule entryRuleexpression_list
entryRuleexpression_list returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getExpression_listRule()); } 
	 iv_ruleexpression_list=ruleexpression_list 
	 { $current=$iv_ruleexpression_list.current.getText(); }  
	 EOF 
;

// Rule expression_list
ruleexpression_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getExpression_listAccess().getExpressionParserRuleCall_0()); 
    }
    this_expression_0=ruleexpression    {
		$current.merge(this_expression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=Comma 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpression_listAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression_listAccess().getExpressionParserRuleCall_1_1()); 
    }
    this_expression_2=ruleexpression    {
		$current.merge(this_expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleexpression
entryRuleexpression returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getExpressionRule()); } 
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current.getText(); }  
	 EOF 
;

// Rule expression
ruleexpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getSimple_expressionParserRuleCall_0()); 
    }
    this_simple_expression_0=rulesimple_expression    {
		$current.merge(this_simple_expression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((    this_RELATIONAL_OPERATOR_1=RULE_RELATIONAL_OPERATOR    {
		$current.merge(this_RELATIONAL_OPERATOR_1);
    }

    { 
    newLeafNode(this_RELATIONAL_OPERATOR_1, grammarAccess.getExpressionAccess().getRELATIONAL_OPERATORTerminalRuleCall_1_0_0()); 
    }

    |
	kw=In 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getInKeyword_1_0_1()); 
    }

    |
	kw=EqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getEqualsSignKeyword_1_0_2()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getSimple_expressionParserRuleCall_1_1()); 
    }
    this_simple_expression_4=rulesimple_expression    {
		$current.merge(this_simple_expression_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRulesimple_expression
entryRulesimple_expression returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSimple_expressionRule()); } 
	 iv_rulesimple_expression=rulesimple_expression 
	 { $current=$iv_rulesimple_expression.current.getText(); }  
	 EOF 
;

// Rule simple_expression
rulesimple_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((    this_ADDITION_OPERATOR_0=RULE_ADDITION_OPERATOR    {
		$current.merge(this_ADDITION_OPERATOR_0);
    }

    { 
    newLeafNode(this_ADDITION_OPERATOR_0, grammarAccess.getSimple_expressionAccess().getADDITION_OPERATORTerminalRuleCall_0()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getSimple_expressionAccess().getTermParserRuleCall_1()); 
    }
    this_term_1=ruleterm    {
		$current.merge(this_term_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((((    this_ADDITION_OPERATOR_2=RULE_ADDITION_OPERATOR    {
		$current.merge(this_ADDITION_OPERATOR_2);
    }

    { 
    newLeafNode(this_ADDITION_OPERATOR_2, grammarAccess.getSimple_expressionAccess().getADDITION_OPERATORTerminalRuleCall_2_0_0_0()); 
    }
)+
    |
	kw=Or 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimple_expressionAccess().getOrKeyword_2_0_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getSimple_expressionAccess().getTermParserRuleCall_2_0_1()); 
    }
    this_term_4=ruleterm    {
		$current.merge(this_term_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getSimple_expressionAccess().getSigned_numberParserRuleCall_2_1()); 
    }
    this_signed_number_5=rulesigned_number    {
		$current.merge(this_signed_number_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleterm
entryRuleterm returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getTermRule()); } 
	 iv_ruleterm=ruleterm 
	 { $current=$iv_ruleterm.current.getText(); }  
	 EOF 
;

// Rule term
ruleterm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); 
    }
    this_factor_0=rulefactor    {
		$current.merge(this_factor_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((    this_MULTIPLICATION_OPERATOR_1=RULE_MULTIPLICATION_OPERATOR    {
		$current.merge(this_MULTIPLICATION_OPERATOR_1);
    }

    { 
    newLeafNode(this_MULTIPLICATION_OPERATOR_1, grammarAccess.getTermAccess().getMULTIPLICATION_OPERATORTerminalRuleCall_1_0_0()); 
    }

    |
	kw=Div 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTermAccess().getDivKeyword_1_0_1()); 
    }

    |
	kw=Mod 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTermAccess().getModKeyword_1_0_2()); 
    }

    |
	kw=And 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTermAccess().getAndKeyword_1_0_3()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_1_1()); 
    }
    this_factor_5=rulefactor    {
		$current.merge(this_factor_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRulefactor
entryRulefactor returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFactorRule()); } 
	 iv_rulefactor=rulefactor 
	 { $current=$iv_rulefactor.current.getText(); }  
	 EOF 
;

// Rule factor
rulefactor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getFactorAccess().getVariableParserRuleCall_0()); 
    }
    this_variable_0=rulevariable    {
		$current.merge(this_variable_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFactorAccess().getNumberParserRuleCall_1()); 
    }
    this_number_1=rulenumber    {
		$current.merge(this_number_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getFactorAccess().getSTRINGTerminalRuleCall_2()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getFactorAccess().getSetParserRuleCall_3()); 
    }
    this_set_3=ruleset    {
		$current.merge(this_set_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=Nil 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFactorAccess().getNilKeyword_4()); 
    }

    |
	kw=True 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFactorAccess().getTrueKeyword_5()); 
    }

    |
	kw=False 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFactorAccess().getFalseKeyword_6()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getFactorAccess().getFunction_designatorParserRuleCall_7()); 
    }
    this_function_designator_7=rulefunction_designator    {
		$current.merge(this_function_designator_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw=LeftParenthesis 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_8_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFactorAccess().getExpressionParserRuleCall_8_1()); 
    }
    this_expression_9=ruleexpression    {
		$current.merge(this_expression_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=RightParenthesis 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFactorAccess().getRightParenthesisKeyword_8_2()); 
    }
)
    |(
	kw=Not 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFactorAccess().getNotKeyword_9_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFactorAccess().getFactorParserRuleCall_9_1()); 
    }
    this_factor_12=rulefactor    {
		$current.merge(this_factor_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRulenumber
entryRulenumber returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_rulenumber=rulenumber 
	 { $current=$iv_rulenumber.current.getText(); }  
	 EOF 
;

// Rule number
rulenumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getNumberAccess().getUnsigned_numberParserRuleCall_0()); 
    }
    this_unsigned_number_0=ruleunsigned_number    {
		$current.merge(this_unsigned_number_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberAccess().getSigned_numberParserRuleCall_1()); 
    }
    this_signed_number_1=rulesigned_number    {
		$current.merge(this_signed_number_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleunsigned_number
entryRuleunsigned_number returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getUnsigned_numberRule()); } 
	 iv_ruleunsigned_number=ruleunsigned_number 
	 { $current=$iv_ruleunsigned_number.current.getText(); }  
	 EOF 
;

// Rule unsigned_number
ruleunsigned_number returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_INTEGER_NUMBER_0=RULE_INTEGER_NUMBER    {
		$current.merge(this_INTEGER_NUMBER_0);
    }

    { 
    newLeafNode(this_INTEGER_NUMBER_0, grammarAccess.getUnsigned_numberAccess().getINTEGER_NUMBERTerminalRuleCall_0()); 
    }

    |    this_REAL_NUMBER_1=RULE_REAL_NUMBER    {
		$current.merge(this_REAL_NUMBER_1);
    }

    { 
    newLeafNode(this_REAL_NUMBER_1, grammarAccess.getUnsigned_numberAccess().getREAL_NUMBERTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRulesigned_number
entryRulesigned_number returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSigned_numberRule()); } 
	 iv_rulesigned_number=rulesigned_number 
	 { $current=$iv_rulesigned_number.current.getText(); }  
	 EOF 
;

// Rule signed_number
rulesigned_number returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_SIGNED_INTEGER_NUMBER_0=RULE_SIGNED_INTEGER_NUMBER    {
		$current.merge(this_SIGNED_INTEGER_NUMBER_0);
    }

    { 
    newLeafNode(this_SIGNED_INTEGER_NUMBER_0, grammarAccess.getSigned_numberAccess().getSIGNED_INTEGER_NUMBERTerminalRuleCall_0()); 
    }

    |    this_SIGNED_REAL_NUMBER_1=RULE_SIGNED_REAL_NUMBER    {
		$current.merge(this_SIGNED_REAL_NUMBER_1);
    }

    { 
    newLeafNode(this_SIGNED_REAL_NUMBER_1, grammarAccess.getSigned_numberAccess().getSIGNED_REAL_NUMBERTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleset
entryRuleset returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSetRule()); } 
	 iv_ruleset=ruleset 
	 { $current=$iv_ruleset.current.getText(); }  
	 EOF 
;

// Rule set
ruleset returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=LeftSquareBracket 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSetAccess().getLeftSquareBracketKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getSetAccess().getExpression_listParserRuleCall_1()); 
    }
    this_expression_list_1=ruleexpression_list    {
		$current.merge(this_expression_list_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=RightSquareBracket 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSetAccess().getRightSquareBracketKeyword_2()); 
    }
)
    ;





// Entry rule entryRulefunction_designator
entryRulefunction_designator returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFunction_designatorRule()); } 
	 iv_rulefunction_designator=rulefunction_designator 
	 { $current=$iv_rulefunction_designator.current.getText(); }  
	 EOF 
;

// Rule function_designator
rulefunction_designator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFunction_designatorAccess().getIDTerminalRuleCall_0()); 
    }

	kw=LeftParenthesis 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunction_designatorAccess().getLeftParenthesisKeyword_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getFunction_designatorAccess().getExpression_listParserRuleCall_2()); 
    }
    this_expression_list_2=ruleexpression_list    {
		$current.merge(this_expression_list_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=RightParenthesis 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunction_designatorAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;





// Entry rule entryRulestructured_statement
entryRulestructured_statement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getStructured_statementRule()); } 
	 iv_rulestructured_statement=rulestructured_statement 
	 { $current=$iv_rulestructured_statement.current.getText(); }  
	 EOF 
;

// Rule structured_statement
rulestructured_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getStructured_statementAccess().getCompound_statementParserRuleCall_0()); 
    }
    this_compound_statement_0=rulecompound_statement    {
		$current.merge(this_compound_statement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructured_statementAccess().getRepetitive_statementParserRuleCall_1()); 
    }
    this_repetitive_statement_1=rulerepetitive_statement    {
		$current.merge(this_repetitive_statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructured_statementAccess().getConditional_statementParserRuleCall_2()); 
    }
    this_conditional_statement_2=ruleconditional_statement    {
		$current.merge(this_conditional_statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructured_statementAccess().getWith_statementParserRuleCall_3()); 
    }
    this_with_statement_3=rulewith_statement    {
		$current.merge(this_with_statement_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulecompound_statement
entryRulecompound_statement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getCompound_statementRule()); } 
	 iv_rulecompound_statement=rulecompound_statement 
	 { $current=$iv_rulecompound_statement.current.getText(); }  
	 EOF 
;

// Rule compound_statement
rulecompound_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Begin 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompound_statementAccess().getBeginKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCompound_statementAccess().getStatement_sequenceParserRuleCall_1()); 
    }
    this_statement_sequence_1=rulestatement_sequence    {
		$current.merge(this_statement_sequence_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=End 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompound_statementAccess().getEndKeyword_2()); 
    }
)
    ;





// Entry rule entryRulerepetitive_statement
entryRulerepetitive_statement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRepetitive_statementRule()); } 
	 iv_rulerepetitive_statement=rulerepetitive_statement 
	 { $current=$iv_rulerepetitive_statement.current.getText(); }  
	 EOF 
;

// Rule repetitive_statement
rulerepetitive_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getRepetitive_statementAccess().getWhile_statementParserRuleCall_0()); 
    }
    this_while_statement_0=rulewhile_statement    {
		$current.merge(this_while_statement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRepetitive_statementAccess().getRepeat_statementParserRuleCall_1()); 
    }
    this_repeat_statement_1=rulerepeat_statement    {
		$current.merge(this_repeat_statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRepetitive_statementAccess().getFor_statementParserRuleCall_2()); 
    }
    this_for_statement_2=rulefor_statement    {
		$current.merge(this_for_statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulewhile_statement
entryRulewhile_statement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getWhile_statementRule()); } 
	 iv_rulewhile_statement=rulewhile_statement 
	 { $current=$iv_rulewhile_statement.current.getText(); }  
	 EOF 
;

// Rule while_statement
rulewhile_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=While 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWhile_statementAccess().getWhileKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getWhile_statementAccess().getExpressionParserRuleCall_1()); 
    }
    this_expression_1=ruleexpression    {
		$current.merge(this_expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Do 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWhile_statementAccess().getDoKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getWhile_statementAccess().getStatementParserRuleCall_3()); 
    }
    this_statement_3=rulestatement    {
		$current.merge(this_statement_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulerepeat_statement
entryRulerepeat_statement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRepeat_statementRule()); } 
	 iv_rulerepeat_statement=rulerepeat_statement 
	 { $current=$iv_rulerepeat_statement.current.getText(); }  
	 EOF 
;

// Rule repeat_statement
rulerepeat_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Repeat 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRepeat_statementAccess().getRepeatKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getRepeat_statementAccess().getStatement_sequenceParserRuleCall_1()); 
    }
    this_statement_sequence_1=rulestatement_sequence    {
		$current.merge(this_statement_sequence_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Until 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRepeat_statementAccess().getUntilKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getRepeat_statementAccess().getExpressionParserRuleCall_3()); 
    }
    this_expression_3=ruleexpression    {
		$current.merge(this_expression_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulefor_statement
entryRulefor_statement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFor_statementRule()); } 
	 iv_rulefor_statement=rulefor_statement 
	 { $current=$iv_rulefor_statement.current.getText(); }  
	 EOF 
;

// Rule for_statement
rulefor_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=For 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFor_statementAccess().getForKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFor_statementAccess().getAssignment_statementParserRuleCall_1()); 
    }
    this_assignment_statement_1=ruleassignment_statement    {
		$current.merge(this_assignment_statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=To 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFor_statementAccess().getToKeyword_2_0()); 
    }

    |
	kw=Downto 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFor_statementAccess().getDowntoKeyword_2_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getFor_statementAccess().getExpressionParserRuleCall_3()); 
    }
    this_expression_4=ruleexpression    {
		$current.merge(this_expression_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Do 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFor_statementAccess().getDoKeyword_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getFor_statementAccess().getStatementParserRuleCall_5()); 
    }
    this_statement_6=rulestatement    {
		$current.merge(this_statement_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleconditional_statement
entryRuleconditional_statement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getConditional_statementRule()); } 
	 iv_ruleconditional_statement=ruleconditional_statement 
	 { $current=$iv_ruleconditional_statement.current.getText(); }  
	 EOF 
;

// Rule conditional_statement
ruleconditional_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getConditional_statementAccess().getIf_statementParserRuleCall_0()); 
    }
    this_if_statement_0=ruleif_statement    {
		$current.merge(this_if_statement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditional_statementAccess().getCase_statementParserRuleCall_1()); 
    }
    this_case_statement_1=rulecase_statement    {
		$current.merge(this_case_statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleif_statement
entryRuleif_statement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getIf_statementRule()); } 
	 iv_ruleif_statement=ruleif_statement 
	 { $current=$iv_ruleif_statement.current.getText(); }  
	 EOF 
;

// Rule if_statement
ruleif_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=If 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIf_statementAccess().getIfKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getIf_statementAccess().getExpressionParserRuleCall_1()); 
    }
    this_expression_1=ruleexpression    {
		$current.merge(this_expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Then 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIf_statementAccess().getThenKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getIf_statementAccess().getStatementParserRuleCall_3()); 
    }
    this_statement_3=rulestatement    {
		$current.merge(this_statement_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=Else 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIf_statementAccess().getElseKeyword_4_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getIf_statementAccess().getStatementParserRuleCall_4_1()); 
    }
    this_statement_5=rulestatement    {
		$current.merge(this_statement_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRulecase_statement
entryRulecase_statement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getCase_statementRule()); } 
	 iv_rulecase_statement=rulecase_statement 
	 { $current=$iv_rulecase_statement.current.getText(); }  
	 EOF 
;

// Rule case_statement
rulecase_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Case 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCase_statementAccess().getCaseKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCase_statementAccess().getExpressionParserRuleCall_1()); 
    }
    this_expression_1=ruleexpression    {
		$current.merge(this_expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Of 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCase_statementAccess().getOfKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getCase_statementAccess().getCase_limbParserRuleCall_3()); 
    }
    this_case_limb_3=rulecase_limb    {
		$current.merge(this_case_limb_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCase_statementAccess().getSemicolonKeyword_4_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCase_statementAccess().getCase_limbParserRuleCall_4_1()); 
    }
    this_case_limb_5=rulecase_limb    {
		$current.merge(this_case_limb_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*(
	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCase_statementAccess().getSemicolonKeyword_5()); 
    }
)?
	kw=End 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCase_statementAccess().getEndKeyword_6()); 
    }
)
    ;





// Entry rule entryRulecase_limb
entryRulecase_limb returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getCase_limbRule()); } 
	 iv_rulecase_limb=rulecase_limb 
	 { $current=$iv_rulecase_limb.current.getText(); }  
	 EOF 
;

// Rule case_limb
rulecase_limb returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getCase_limbAccess().getCase_label_listParserRuleCall_0()); 
    }
    this_case_label_list_0=rulecase_label_list    {
		$current.merge(this_case_label_list_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Colon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCase_limbAccess().getColonKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getCase_limbAccess().getStatementParserRuleCall_2()); 
    }
    this_statement_2=rulestatement    {
		$current.merge(this_statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulecase_label_list
entryRulecase_label_list returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getCase_label_listRule()); } 
	 iv_rulecase_label_list=rulecase_label_list 
	 { $current=$iv_rulecase_label_list.current.getText(); }  
	 EOF 
;

// Rule case_label_list
rulecase_label_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getCase_label_listAccess().getConstantParserRuleCall_0()); 
    }
    this_constant_0=ruleconstant    {
		$current.merge(this_constant_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=Comma 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCase_label_listAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCase_label_listAccess().getConstantParserRuleCall_1_1()); 
    }
    this_constant_2=ruleconstant    {
		$current.merge(this_constant_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleconstant
entryRuleconstant returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getConstantRule()); } 
	 iv_ruleconstant=ruleconstant 
	 { $current=$iv_ruleconstant.current.getText(); }  
	 EOF 
;

// Rule constant
ruleconstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(((    this_ADDITION_OPERATOR_0=RULE_ADDITION_OPERATOR    {
		$current.merge(this_ADDITION_OPERATOR_0);
    }

    { 
    newLeafNode(this_ADDITION_OPERATOR_0, grammarAccess.getConstantAccess().getADDITION_OPERATORTerminalRuleCall_0_0()); 
    }
)?(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getConstantAccess().getIDTerminalRuleCall_0_1_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getNumberParserRuleCall_0_1_1()); 
    }
    this_number_2=rulenumber    {
		$current.merge(this_number_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    |    this_STRING_3=RULE_STRING    {
		$current.merge(this_STRING_3);
    }

    { 
    newLeafNode(this_STRING_3, grammarAccess.getConstantAccess().getSTRINGTerminalRuleCall_1()); 
    }

    |
	kw=True 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstantAccess().getTrueKeyword_2()); 
    }

    |
	kw=False 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstantAccess().getFalseKeyword_3()); 
    }

    |
	kw=Nil 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstantAccess().getNilKeyword_4()); 
    }
)
    ;





// Entry rule entryRulewith_statement
entryRulewith_statement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getWith_statementRule()); } 
	 iv_rulewith_statement=rulewith_statement 
	 { $current=$iv_rulewith_statement.current.getText(); }  
	 EOF 
;

// Rule with_statement
rulewith_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=With 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWith_statementAccess().getWithKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getWith_statementAccess().getVariableParserRuleCall_1()); 
    }
    this_variable_1=rulevariable    {
		$current.merge(this_variable_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=Comma 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWith_statementAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getWith_statementAccess().getVariableParserRuleCall_2_1()); 
    }
    this_variable_3=rulevariable    {
		$current.merge(this_variable_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=Do 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWith_statementAccess().getDoKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getWith_statementAccess().getStatementParserRuleCall_4()); 
    }
    this_statement_5=rulestatement    {
		$current.merge(this_statement_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulegoto_statement
entryRulegoto_statement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getGoto_statementRule()); } 
	 iv_rulegoto_statement=rulegoto_statement 
	 { $current=$iv_rulegoto_statement.current.getText(); }  
	 EOF 
;

// Rule goto_statement
rulegoto_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Goto 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGoto_statementAccess().getGotoKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getGoto_statementAccess().getLabelParserRuleCall_1()); 
    }
    this_label_1=rulelabel    {
		$current.merge(this_label_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuledeclaration_part
entryRuledeclaration_part returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDeclaration_partRule()); } 
	 iv_ruledeclaration_part=ruledeclaration_part 
	 { $current=$iv_ruledeclaration_part.current.getText(); }  
	 EOF 
;

// Rule declaration_part
ruledeclaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getLabel_declaration_partParserRuleCall_0()); 
    }
    this_label_declaration_part_0=rulelabel_declaration_part    {
		$current.merge(this_label_declaration_part_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getConstant_definition_partParserRuleCall_1()); 
    }
    this_constant_definition_part_1=ruleconstant_definition_part    {
		$current.merge(this_constant_definition_part_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getType_definition_partParserRuleCall_2()); 
    }
    this_type_definition_part_2=ruletype_definition_part    {
		$current.merge(this_type_definition_part_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getVariable_declaration_partParserRuleCall_3()); 
    }
    this_variable_declaration_part_3=rulevariable_declaration_part    {
		$current.merge(this_variable_declaration_part_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getProcedure_and_function_declaration_partParserRuleCall_4()); 
    }
    this_procedure_and_function_declaration_part_4=ruleprocedure_and_function_declaration_part    {
		$current.merge(this_procedure_and_function_declaration_part_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulelabel_declaration_part
entryRulelabel_declaration_part returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getLabel_declaration_partRule()); } 
	 iv_rulelabel_declaration_part=rulelabel_declaration_part 
	 { $current=$iv_rulelabel_declaration_part.current.getText(); }  
	 EOF 
;

// Rule label_declaration_part
rulelabel_declaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Label 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabel_declaration_partAccess().getLabelKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_1()); 
    }
    this_label_1=rulelabel    {
		$current.merge(this_label_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=Comma 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabel_declaration_partAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_2_1()); 
    }
    this_label_3=rulelabel    {
		$current.merge(this_label_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabel_declaration_partAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleconstant_definition_part
entryRuleconstant_definition_part returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getConstant_definition_partRule()); } 
	 iv_ruleconstant_definition_part=ruleconstant_definition_part 
	 { $current=$iv_ruleconstant_definition_part.current.getText(); }  
	 EOF 
;

// Rule constant_definition_part
ruleconstant_definition_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Const 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstant_definition_partAccess().getConstKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getConstant_definition_partAccess().getConstant_definitionParserRuleCall_1_0()); 
    }
    this_constant_definition_1=ruleconstant_definition    {
		$current.merge(this_constant_definition_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstant_definition_partAccess().getSemicolonKeyword_1_1()); 
    }
)+)
    ;





// Entry rule entryRuleconstant_definition
entryRuleconstant_definition returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getConstant_definitionRule()); } 
	 iv_ruleconstant_definition=ruleconstant_definition 
	 { $current=$iv_ruleconstant_definition.current.getText(); }  
	 EOF 
;

// Rule constant_definition
ruleconstant_definition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getConstant_definitionAccess().getIDTerminalRuleCall_0()); 
    }

	kw=EqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstant_definitionAccess().getEqualsSignKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getConstant_definitionAccess().getConstantParserRuleCall_2()); 
    }
    this_constant_2=ruleconstant    {
		$current.merge(this_constant_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuletype_definition_part
entryRuletype_definition_part returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getType_definition_partRule()); } 
	 iv_ruletype_definition_part=ruletype_definition_part 
	 { $current=$iv_ruletype_definition_part.current.getText(); }  
	 EOF 
;

// Rule type_definition_part
ruletype_definition_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Type 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_definition_partAccess().getTypeKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getType_definition_partAccess().getType_definitionParserRuleCall_1_0()); 
    }
    this_type_definition_1=ruletype_definition    {
		$current.merge(this_type_definition_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_definition_partAccess().getSemicolonKeyword_1_1()); 
    }
)+)
    ;





// Entry rule entryRuletype_definition
entryRuletype_definition returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getType_definitionRule()); } 
	 iv_ruletype_definition=ruletype_definition 
	 { $current=$iv_ruletype_definition.current.getText(); }  
	 EOF 
;

// Rule type_definition
ruletype_definition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getType_definitionAccess().getIDTerminalRuleCall_0()); 
    }

	kw=EqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_definitionAccess().getEqualsSignKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getType_definitionAccess().getTypeParserRuleCall_2()); 
    }
    this_type_2=ruletype    {
		$current.merge(this_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuletype
entryRuletype returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getTypeRule()); } 
	 iv_ruletype=ruletype 
	 { $current=$iv_ruletype.current.getText(); }  
	 EOF 
;

// Rule type
ruletype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getSimple_typeParserRuleCall_0()); 
    }
    this_simple_type_0=rulesimple_type    {
		$current.merge(this_simple_type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getStructured_typeParserRuleCall_1()); 
    }
    this_structured_type_1=rulestructured_type    {
		$current.merge(this_structured_type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getPointer_typeParserRuleCall_2()); 
    }
    this_pointer_type_2=rulepointer_type    {
		$current.merge(this_pointer_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulesimple_type
entryRulesimple_type returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSimple_typeRule()); } 
	 iv_rulesimple_type=rulesimple_type 
	 { $current=$iv_rulesimple_type.current.getText(); }  
	 EOF 
;

// Rule simple_type
rulesimple_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getSimple_typeAccess().getSubrange_typeParserRuleCall_0()); 
    }
    this_subrange_type_0=rulesubrange_type    {
		$current.merge(this_subrange_type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimple_typeAccess().getEnumerated_typeParserRuleCall_1()); 
    }
    this_enumerated_type_1=ruleenumerated_type    {
		$current.merge(this_enumerated_type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getSimple_typeAccess().getIDTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRulesubrange_type
entryRulesubrange_type returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
:
	{ newCompositeNode(grammarAccess.getSubrange_typeRule()); } 
	 iv_rulesubrange_type=rulesubrange_type 
	 { $current=$iv_rulesubrange_type.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule subrange_type
rulesubrange_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule();
    }:
((
    { 
        newCompositeNode(grammarAccess.getSubrange_typeAccess().getConstantParserRuleCall_0_0()); 
    }
    this_constant_0=ruleconstant    {
		$current.merge(this_constant_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=FullStopFullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSubrange_typeAccess().getFullStopFullStopKeyword_0_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getSubrange_typeAccess().getConstantParserRuleCall_0_2()); 
    }
    this_constant_2=ruleconstant    {
		$current.merge(this_constant_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(    this_NUMERIC_SUBRANGE_3=RULE_NUMERIC_SUBRANGE    {
		$current.merge(this_NUMERIC_SUBRANGE_3);
    }

    { 
    newLeafNode(this_NUMERIC_SUBRANGE_3, grammarAccess.getSubrange_typeAccess().getNUMERIC_SUBRANGETerminalRuleCall_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getSubrange_typeAccess().getConstantParserRuleCall_1_1()); 
    }
    this_constant_4=ruleconstant    {
		$current.merge(this_constant_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleenumerated_type
entryRuleenumerated_type returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getEnumerated_typeRule()); } 
	 iv_ruleenumerated_type=ruleenumerated_type 
	 { $current=$iv_ruleenumerated_type.current.getText(); }  
	 EOF 
;

// Rule enumerated_type
ruleenumerated_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=LeftParenthesis 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumerated_typeAccess().getLeftParenthesisKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getEnumerated_typeAccess().getIdentifier_listParserRuleCall_1()); 
    }
    this_identifier_list_1=ruleidentifier_list    {
		$current.merge(this_identifier_list_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=RightParenthesis 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumerated_typeAccess().getRightParenthesisKeyword_2()); 
    }
)
    ;





// Entry rule entryRulestructured_type
entryRulestructured_type returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getStructured_typeRule()); } 
	 iv_rulestructured_type=rulestructured_type 
	 { $current=$iv_rulestructured_type.current.getText(); }  
	 EOF 
;

// Rule structured_type
rulestructured_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=Packed 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructured_typeAccess().getPackedKeyword_0()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getStructured_typeAccess().getUnpacked_structured_typeParserRuleCall_1()); 
    }
    this_unpacked_structured_type_1=ruleunpacked_structured_type    {
		$current.merge(this_unpacked_structured_type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleunpacked_structured_type
entryRuleunpacked_structured_type returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getUnpacked_structured_typeRule()); } 
	 iv_ruleunpacked_structured_type=ruleunpacked_structured_type 
	 { $current=$iv_ruleunpacked_structured_type.current.getText(); }  
	 EOF 
;

// Rule unpacked_structured_type
ruleunpacked_structured_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getUnpacked_structured_typeAccess().getArray_typeParserRuleCall_0()); 
    }
    this_array_type_0=rulearray_type    {
		$current.merge(this_array_type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnpacked_structured_typeAccess().getDynamic_array_typeParserRuleCall_1()); 
    }
    this_dynamic_array_type_1=ruledynamic_array_type    {
		$current.merge(this_dynamic_array_type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnpacked_structured_typeAccess().getSet_typeParserRuleCall_2()); 
    }
    this_set_type_2=ruleset_type    {
		$current.merge(this_set_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnpacked_structured_typeAccess().getFile_typeParserRuleCall_3()); 
    }
    this_file_type_3=rulefile_type    {
		$current.merge(this_file_type_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulearray_type
entryRulearray_type returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getArray_typeRule()); } 
	 iv_rulearray_type=rulearray_type 
	 { $current=$iv_rulearray_type.current.getText(); }  
	 EOF 
;

// Rule array_type
rulearray_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Array 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArray_typeAccess().getArrayKeyword_0()); 
    }

	kw=LeftSquareBracket 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArray_typeAccess().getLeftSquareBracketKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getArray_typeAccess().getIndex_typeParserRuleCall_2()); 
    }
    this_index_type_2=ruleindex_type    {
		$current.merge(this_index_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=Comma 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArray_typeAccess().getCommaKeyword_3_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getArray_typeAccess().getIndex_typeParserRuleCall_3_1()); 
    }
    this_index_type_4=ruleindex_type    {
		$current.merge(this_index_type_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=RightSquareBracket 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArray_typeAccess().getRightSquareBracketKeyword_4()); 
    }

	kw=Of 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArray_typeAccess().getOfKeyword_5()); 
    }

    { 
        newCompositeNode(grammarAccess.getArray_typeAccess().getTypeParserRuleCall_6()); 
    }
    this_type_7=ruletype    {
		$current.merge(this_type_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuledynamic_array_type
entryRuledynamic_array_type returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDynamic_array_typeRule()); } 
	 iv_ruledynamic_array_type=ruledynamic_array_type 
	 { $current=$iv_ruledynamic_array_type.current.getText(); }  
	 EOF 
;

// Rule dynamic_array_type
ruledynamic_array_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Array 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDynamic_array_typeAccess().getArrayKeyword_0()); 
    }

	kw=Of 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDynamic_array_typeAccess().getOfKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getDynamic_array_typeAccess().getTypeParserRuleCall_2()); 
    }
    this_type_2=ruletype    {
		$current.merge(this_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleindex_type
entryRuleindex_type returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getIndex_typeRule()); } 
	 iv_ruleindex_type=ruleindex_type 
	 { $current=$iv_ruleindex_type.current.getText(); }  
	 EOF 
;

// Rule index_type
ruleindex_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

    { 
        newCompositeNode(grammarAccess.getIndex_typeAccess().getSimple_typeParserRuleCall()); 
    }
    this_simple_type_0=rulesimple_type    {
		$current.merge(this_simple_type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;







// Entry rule entryRulefield_list
entryRulefield_list returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getField_listRule()); } 
	 iv_rulefield_list=rulefield_list 
	 { $current=$iv_rulefield_list.current.getText(); }  
	 EOF 
;

// Rule field_list
rulefield_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(((
    { 
        newCompositeNode(grammarAccess.getField_listAccess().getFixed_partParserRuleCall_0_0_0()); 
    }
    this_fixed_part_0=rulefixed_part    {
		$current.merge(this_fixed_part_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getField_listAccess().getSemicolonKeyword_0_0_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getField_listAccess().getVariant_partParserRuleCall_0_0_1_1()); 
    }
    this_variant_part_2=rulevariant_part    {
		$current.merge(this_variant_part_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |
    { 
        newCompositeNode(grammarAccess.getField_listAccess().getVariant_partParserRuleCall_0_1()); 
    }
    this_variant_part_3=rulevariant_part    {
		$current.merge(this_variant_part_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)(
	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getField_listAccess().getSemicolonKeyword_1()); 
    }
)?)?
    ;





// Entry rule entryRulefixed_part
entryRulefixed_part returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFixed_partRule()); } 
	 iv_rulefixed_part=rulefixed_part 
	 { $current=$iv_rulefixed_part.current.getText(); }  
	 EOF 
;

// Rule fixed_part
rulefixed_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getFixed_partAccess().getRecord_sectionParserRuleCall_0()); 
    }
    this_record_section_0=rulerecord_section    {
		$current.merge(this_record_section_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFixed_partAccess().getSemicolonKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFixed_partAccess().getRecord_sectionParserRuleCall_1_1()); 
    }
    this_record_section_2=rulerecord_section    {
		$current.merge(this_record_section_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRulerecord_section
entryRulerecord_section returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRecord_sectionRule()); } 
	 iv_rulerecord_section=rulerecord_section 
	 { $current=$iv_rulerecord_section.current.getText(); }  
	 EOF 
;

// Rule record_section
rulerecord_section returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getRecord_sectionAccess().getIdentifier_listParserRuleCall_0()); 
    }
    this_identifier_list_0=ruleidentifier_list    {
		$current.merge(this_identifier_list_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Colon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRecord_sectionAccess().getColonKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getRecord_sectionAccess().getTypeParserRuleCall_2()); 
    }
    this_type_2=ruletype    {
		$current.merge(this_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulevariant_part
entryRulevariant_part returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getVariant_partRule()); } 
	 iv_rulevariant_part=rulevariant_part 
	 { $current=$iv_rulevariant_part.current.getText(); }  
	 EOF 
;

// Rule variant_part
rulevariant_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Case 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariant_partAccess().getCaseKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariant_partAccess().getTag_fieldParserRuleCall_1()); 
    }
    this_tag_field_1=ruletag_field    {
		$current.merge(this_tag_field_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getVariant_partAccess().getIDTerminalRuleCall_2()); 
    }

	kw=Of 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariant_partAccess().getOfKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariant_partAccess().getVariantParserRuleCall_4()); 
    }
    this_variant_4=rulevariant    {
		$current.merge(this_variant_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariant_partAccess().getSemicolonKeyword_5_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariant_partAccess().getVariantParserRuleCall_5_1()); 
    }
    this_variant_6=rulevariant    {
		$current.merge(this_variant_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuletag_field
entryRuletag_field returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getTag_fieldRule()); } 
	 iv_ruletag_field=ruletag_field 
	 { $current=$iv_ruletag_field.current.getText(); }  
	 EOF 
;

// Rule tag_field
ruletag_field returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getTag_fieldAccess().getIDTerminalRuleCall_0()); 
    }

	kw=Colon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTag_fieldAccess().getColonKeyword_1()); 
    }
)?
    ;





// Entry rule entryRulevariant
entryRulevariant returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getVariantRule()); } 
	 iv_rulevariant=rulevariant 
	 { $current=$iv_rulevariant.current.getText(); }  
	 EOF 
;

// Rule variant
rulevariant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getVariantAccess().getCase_label_listParserRuleCall_0()); 
    }
    this_case_label_list_0=rulecase_label_list    {
		$current.merge(this_case_label_list_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Colon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariantAccess().getColonKeyword_1()); 
    }

	kw=LeftParenthesis 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariantAccess().getLeftParenthesisKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariantAccess().getField_listParserRuleCall_3()); 
    }
    this_field_list_3=rulefield_list    {
		$current.merge(this_field_list_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=RightParenthesis 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariantAccess().getRightParenthesisKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleset_type
entryRuleset_type returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSet_typeRule()); } 
	 iv_ruleset_type=ruleset_type 
	 { $current=$iv_ruleset_type.current.getText(); }  
	 EOF 
;

// Rule set_type
ruleset_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Set 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSet_typeAccess().getSetKeyword_0()); 
    }

	kw=Of 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSet_typeAccess().getOfKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getSet_typeAccess().getTypeParserRuleCall_2()); 
    }
    this_type_2=ruletype    {
		$current.merge(this_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulefile_type
entryRulefile_type returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFile_typeRule()); } 
	 iv_rulefile_type=rulefile_type 
	 { $current=$iv_rulefile_type.current.getText(); }  
	 EOF 
;

// Rule file_type
rulefile_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=File 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFile_typeAccess().getFileKeyword_0()); 
    }

	kw=Of 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFile_typeAccess().getOfKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getFile_typeAccess().getTypeParserRuleCall_2()); 
    }
    this_type_2=ruletype    {
		$current.merge(this_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulepointer_type
entryRulepointer_type returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPointer_typeRule()); } 
	 iv_rulepointer_type=rulepointer_type 
	 { $current=$iv_rulepointer_type.current.getText(); }  
	 EOF 
;

// Rule pointer_type
rulepointer_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=CircumflexAccent 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPointer_typeAccess().getCircumflexAccentKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPointer_typeAccess().getTypeParserRuleCall_1()); 
    }
    this_type_1=ruletype    {
		$current.merge(this_type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulevariable_declaration_part
entryRulevariable_declaration_part returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getVariable_declaration_partRule()); } 
	 iv_rulevariable_declaration_part=rulevariable_declaration_part 
	 { $current=$iv_rulevariable_declaration_part.current.getText(); }  
	 EOF 
;

// Rule variable_declaration_part
rulevariable_declaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Var 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declaration_partAccess().getVarKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariable_declaration_partAccess().getRecord_sectionParserRuleCall_1()); 
    }
    this_record_section_1=rulerecord_section    {
		$current.merge(this_record_section_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declaration_partAccess().getSemicolonKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getVariable_declaration_partAccess().getRecord_sectionParserRuleCall_3_0()); 
    }
    this_record_section_3=rulerecord_section    {
		$current.merge(this_record_section_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declaration_partAccess().getSemicolonKeyword_3_1()); 
    }
)*)
    ;





// Entry rule entryRuleprocedure_and_function_declaration_part
entryRuleprocedure_and_function_declaration_part returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getProcedure_and_function_declaration_partRule()); } 
	 iv_ruleprocedure_and_function_declaration_part=ruleprocedure_and_function_declaration_part 
	 { $current=$iv_ruleprocedure_and_function_declaration_part.current.getText(); }  
	 EOF 
;

// Rule procedure_and_function_declaration_part
ruleprocedure_and_function_declaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
    { 
        newCompositeNode(grammarAccess.getProcedure_and_function_declaration_partAccess().getProcedure_declarationParserRuleCall_0_0()); 
    }
    this_procedure_declaration_0=ruleprocedure_declaration    {
		$current.merge(this_procedure_declaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProcedure_and_function_declaration_partAccess().getFunction_declarationParserRuleCall_0_1()); 
    }
    this_function_declaration_1=rulefunction_declaration    {
		$current.merge(this_function_declaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProcedure_and_function_declaration_partAccess().getSemicolonKeyword_1()); 
    }
)*
    ;





// Entry rule entryRuleprocedure_declaration
entryRuleprocedure_declaration returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getProcedure_declarationRule()); } 
	 iv_ruleprocedure_declaration=ruleprocedure_declaration 
	 { $current=$iv_ruleprocedure_declaration.current.getText(); }  
	 EOF 
;

// Rule procedure_declaration
ruleprocedure_declaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getProcedure_declarationAccess().getProcedure_headingParserRuleCall_0()); 
    }
    this_procedure_heading_0=ruleprocedure_heading    {
		$current.merge(this_procedure_heading_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProcedure_declarationAccess().getSemicolonKeyword_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getProcedure_declarationAccess().getBlockParserRuleCall_2_0()); 
    }
    this_block_2=ruleblock    {
		$current.merge(this_block_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=Forward 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProcedure_declarationAccess().getForwardKeyword_2_1()); 
    }
))
    ;





// Entry rule entryRuleprocedure_heading
entryRuleprocedure_heading returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getProcedure_headingRule()); } 
	 iv_ruleprocedure_heading=ruleprocedure_heading 
	 { $current=$iv_ruleprocedure_heading.current.getText(); }  
	 EOF 
;

// Rule procedure_heading
ruleprocedure_heading returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Procedure 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProcedure_headingAccess().getProcedureKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getProcedure_headingAccess().getIDTerminalRuleCall_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getProcedure_headingAccess().getFormal_parameter_listParserRuleCall_2()); 
    }
    this_formal_parameter_list_2=ruleformal_parameter_list    {
		$current.merge(this_formal_parameter_list_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleformal_parameter_list
entryRuleformal_parameter_list returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFormal_parameter_listRule()); } 
	 iv_ruleformal_parameter_list=ruleformal_parameter_list 
	 { $current=$iv_ruleformal_parameter_list.current.getText(); }  
	 EOF 
;

// Rule formal_parameter_list
ruleformal_parameter_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=LeftParenthesis 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFormal_parameter_listAccess().getLeftParenthesisKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFormal_parameter_listAccess().getFormal_parameter_sectionParserRuleCall_1()); 
    }
    this_formal_parameter_section_1=ruleformal_parameter_section    {
		$current.merge(this_formal_parameter_section_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFormal_parameter_listAccess().getSemicolonKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFormal_parameter_listAccess().getFormal_parameter_sectionParserRuleCall_2_1()); 
    }
    this_formal_parameter_section_3=ruleformal_parameter_section    {
		$current.merge(this_formal_parameter_section_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=RightParenthesis 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFormal_parameter_listAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleformal_parameter_section
entryRuleformal_parameter_section returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFormal_parameter_sectionRule()); } 
	 iv_ruleformal_parameter_section=ruleformal_parameter_section 
	 { $current=$iv_ruleformal_parameter_section.current.getText(); }  
	 EOF 
;

// Rule formal_parameter_section
ruleformal_parameter_section returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getFormal_parameter_sectionAccess().getValue_parameter_sectionParserRuleCall_0()); 
    }
    this_value_parameter_section_0=rulevalue_parameter_section    {
		$current.merge(this_value_parameter_section_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFormal_parameter_sectionAccess().getVariable_parameter_sectionParserRuleCall_1()); 
    }
    this_variable_parameter_section_1=rulevariable_parameter_section    {
		$current.merge(this_variable_parameter_section_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFormal_parameter_sectionAccess().getProcedure_headingParserRuleCall_2()); 
    }
    this_procedure_heading_2=ruleprocedure_heading    {
		$current.merge(this_procedure_heading_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFormal_parameter_sectionAccess().getFunction_headingParserRuleCall_3()); 
    }
    this_function_heading_3=rulefunction_heading    {
		$current.merge(this_function_heading_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulevalue_parameter_section
entryRulevalue_parameter_section returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getValue_parameter_sectionRule()); } 
	 iv_rulevalue_parameter_section=rulevalue_parameter_section 
	 { $current=$iv_rulevalue_parameter_section.current.getText(); }  
	 EOF 
;

// Rule value_parameter_section
rulevalue_parameter_section returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getValue_parameter_sectionAccess().getIdentifier_listParserRuleCall_0()); 
    }
    this_identifier_list_0=ruleidentifier_list    {
		$current.merge(this_identifier_list_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Colon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getValue_parameter_sectionAccess().getColonKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getValue_parameter_sectionAccess().getParameter_typeParserRuleCall_2()); 
    }
    this_parameter_type_2=ruleparameter_type    {
		$current.merge(this_parameter_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleparameter_type
entryRuleparameter_type returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getParameter_typeRule()); } 
	 iv_ruleparameter_type=ruleparameter_type 
	 { $current=$iv_ruleparameter_type.current.getText(); }  
	 EOF 
;

// Rule parameter_type
ruleparameter_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getParameter_typeAccess().getConformant_array_schemaParserRuleCall_0()); 
    }
    this_conformant_array_schema_0=ruleconformant_array_schema    {
		$current.merge(this_conformant_array_schema_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getParameter_typeAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleconformant_array_schema
entryRuleconformant_array_schema returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getConformant_array_schemaRule()); } 
	 iv_ruleconformant_array_schema=ruleconformant_array_schema 
	 { $current=$iv_ruleconformant_array_schema.current.getText(); }  
	 EOF 
;

// Rule conformant_array_schema
ruleconformant_array_schema returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getConformant_array_schemaAccess().getPacked_conformant_array_schemaParserRuleCall_0()); 
    }
    this_packed_conformant_array_schema_0=rulepacked_conformant_array_schema    {
		$current.merge(this_packed_conformant_array_schema_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConformant_array_schemaAccess().getUnpacked_conformant_array_schemaParserRuleCall_1()); 
    }
    this_unpacked_conformant_array_schema_1=ruleunpacked_conformant_array_schema    {
		$current.merge(this_unpacked_conformant_array_schema_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulepacked_conformant_array_schema
entryRulepacked_conformant_array_schema returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPacked_conformant_array_schemaRule()); } 
	 iv_rulepacked_conformant_array_schema=rulepacked_conformant_array_schema 
	 { $current=$iv_rulepacked_conformant_array_schema.current.getText(); }  
	 EOF 
;

// Rule packed_conformant_array_schema
rulepacked_conformant_array_schema returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Packed 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPacked_conformant_array_schemaAccess().getPackedKeyword_0()); 
    }

	kw=Array 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPacked_conformant_array_schemaAccess().getArrayKeyword_1()); 
    }

	kw=LeftSquareBracket 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPacked_conformant_array_schemaAccess().getLeftSquareBracketKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getPacked_conformant_array_schemaAccess().getBound_specificationParserRuleCall_3()); 
    }
    this_bound_specification_3=rulebound_specification    {
		$current.merge(this_bound_specification_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=RightSquareBracket 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPacked_conformant_array_schemaAccess().getRightSquareBracketKeyword_4()); 
    }

	kw=Of 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPacked_conformant_array_schemaAccess().getOfKeyword_5()); 
    }
    this_ID_6=RULE_ID    {
		$current.merge(this_ID_6);
    }

    { 
    newLeafNode(this_ID_6, grammarAccess.getPacked_conformant_array_schemaAccess().getIDTerminalRuleCall_6()); 
    }
)
    ;





// Entry rule entryRulebound_specification
entryRulebound_specification returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getBound_specificationRule()); } 
	 iv_rulebound_specification=rulebound_specification 
	 { $current=$iv_rulebound_specification.current.getText(); }  
	 EOF 
;

// Rule bound_specification
rulebound_specification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getBound_specificationAccess().getIDTerminalRuleCall_0()); 
    }

	kw=FullStopFullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBound_specificationAccess().getFullStopFullStopKeyword_1()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getBound_specificationAccess().getIDTerminalRuleCall_2()); 
    }

	kw=Colon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBound_specificationAccess().getColonKeyword_3()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getBound_specificationAccess().getIDTerminalRuleCall_4()); 
    }
)
    ;





// Entry rule entryRuleunpacked_conformant_array_schema
entryRuleunpacked_conformant_array_schema returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getUnpacked_conformant_array_schemaRule()); } 
	 iv_ruleunpacked_conformant_array_schema=ruleunpacked_conformant_array_schema 
	 { $current=$iv_ruleunpacked_conformant_array_schema.current.getText(); }  
	 EOF 
;

// Rule unpacked_conformant_array_schema
ruleunpacked_conformant_array_schema returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Array 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnpacked_conformant_array_schemaAccess().getArrayKeyword_0()); 
    }

	kw=LeftSquareBracket 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnpacked_conformant_array_schemaAccess().getLeftSquareBracketKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getUnpacked_conformant_array_schemaAccess().getBound_specificationParserRuleCall_2()); 
    }
    this_bound_specification_2=rulebound_specification    {
		$current.merge(this_bound_specification_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnpacked_conformant_array_schemaAccess().getSemicolonKeyword_3_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getUnpacked_conformant_array_schemaAccess().getBound_specificationParserRuleCall_3_1()); 
    }
    this_bound_specification_4=rulebound_specification    {
		$current.merge(this_bound_specification_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=RightSquareBracket 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnpacked_conformant_array_schemaAccess().getRightSquareBracketKeyword_4()); 
    }

	kw=Of 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnpacked_conformant_array_schemaAccess().getOfKeyword_5()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getUnpacked_conformant_array_schemaAccess().getConformant_array_schemaParserRuleCall_6_0()); 
    }
    this_conformant_array_schema_7=ruleconformant_array_schema    {
		$current.merge(this_conformant_array_schema_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_ID_8=RULE_ID    {
		$current.merge(this_ID_8);
    }

    { 
    newLeafNode(this_ID_8, grammarAccess.getUnpacked_conformant_array_schemaAccess().getIDTerminalRuleCall_6_1()); 
    }
))
    ;





// Entry rule entryRulevariable_parameter_section
entryRulevariable_parameter_section returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getVariable_parameter_sectionRule()); } 
	 iv_rulevariable_parameter_section=rulevariable_parameter_section 
	 { $current=$iv_rulevariable_parameter_section.current.getText(); }  
	 EOF 
;

// Rule variable_parameter_section
rulevariable_parameter_section returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Var 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_parameter_sectionAccess().getVarKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariable_parameter_sectionAccess().getIdentifier_listParserRuleCall_1()); 
    }
    this_identifier_list_1=ruleidentifier_list    {
		$current.merge(this_identifier_list_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Colon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_parameter_sectionAccess().getColonKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariable_parameter_sectionAccess().getParameter_typeParserRuleCall_3()); 
    }
    this_parameter_type_3=ruleparameter_type    {
		$current.merge(this_parameter_type_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulefunction_heading
entryRulefunction_heading returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFunction_headingRule()); } 
	 iv_rulefunction_heading=rulefunction_heading 
	 { $current=$iv_rulefunction_heading.current.getText(); }  
	 EOF 
;

// Rule function_heading
rulefunction_heading returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Function 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunction_headingAccess().getFunctionKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getFunction_headingAccess().getIDTerminalRuleCall_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getFunction_headingAccess().getFormal_parameter_listParserRuleCall_2()); 
    }
    this_formal_parameter_list_2=ruleformal_parameter_list    {
		$current.merge(this_formal_parameter_list_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=Colon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunction_headingAccess().getColonKeyword_3()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getFunction_headingAccess().getIDTerminalRuleCall_4()); 
    }
)
    ;





// Entry rule entryRulefunction_declaration
entryRulefunction_declaration returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFunction_declarationRule()); } 
	 iv_rulefunction_declaration=rulefunction_declaration 
	 { $current=$iv_rulefunction_declaration.current.getText(); }  
	 EOF 
;

// Rule function_declaration
rulefunction_declaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getFunction_declarationAccess().getFunction_headingParserRuleCall_0()); 
    }
    this_function_heading_0=rulefunction_heading    {
		$current.merge(this_function_heading_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=Semicolon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunction_declarationAccess().getSemicolonKeyword_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getFunction_declarationAccess().getBlockParserRuleCall_2_0()); 
    }
    this_block_2=ruleblock    {
		$current.merge(this_block_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=Forward 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunction_declarationAccess().getForwardKeyword_2_1()); 
    }
))
    ;






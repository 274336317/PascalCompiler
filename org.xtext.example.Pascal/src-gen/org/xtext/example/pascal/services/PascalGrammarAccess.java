/*
* generated by Xtext
*/
package org.xtext.example.pascal.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PascalGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PascalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pascal");
		private final Assignment cProgramAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProgramProgramParserRuleCall_0 = (RuleCall)cProgramAssignment.eContents().get(0);
		
		//pascal:
		//	program+=program;
		public ParserRule getRule() { return rule; }

		//program+=program
		public Assignment getProgramAssignment() { return cProgramAssignment; }

		//program
		public RuleCall getProgramProgramParserRuleCall_0() { return cProgramProgramParserRuleCall_0; }
	}

	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProgram_heading_blockParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//program:
		//	program_heading_block block ".";
		public ParserRule getRule() { return rule; }

		//program_heading_block block "."
		public Group getGroup() { return cGroup; }

		//program_heading_block
		public RuleCall getProgram_heading_blockParserRuleCall_0() { return cProgram_heading_blockParserRuleCall_0; }

		//block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}

	public class Program_heading_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "program_heading_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIdentifier_listParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//program_heading_block:
		//	"program" IDENTIFIER ("(" identifier_list ")")? ";";
		public ParserRule getRule() { return rule; }

		//"program" IDENTIFIER ("(" identifier_list ")")? ";"
		public Group getGroup() { return cGroup; }

		//"program"
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }

		//("(" identifier_list ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//identifier_list
		public RuleCall getIdentifier_listParserRuleCall_2_1() { return cIdentifier_listParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class Identifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "identifier_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//identifier_list:
		//	IDENTIFIER ("," IDENTIFIER)*;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER ("," IDENTIFIER)*
		public Group getGroup() { return cGroup; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }

		//("," IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_1() { return cIDENTIFIERTerminalRuleCall_1_1; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDeclaration_partParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStatement_partParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//block:
		//	declaration_part statement_part;
		public ParserRule getRule() { return rule; }

		//declaration_part statement_part
		public Group getGroup() { return cGroup; }

		//declaration_part
		public RuleCall getDeclaration_partParserRuleCall_0() { return cDeclaration_partParserRuleCall_0; }

		//statement_part
		public RuleCall getStatement_partParserRuleCall_1() { return cStatement_partParserRuleCall_1; }
	}

	public class Statement_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBEGIN_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStatement_sequenceParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cEND_KEYWORDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//statement_part:
		//	BEGIN_KEYWORD statement_sequence END_KEYWORD;
		public ParserRule getRule() { return rule; }

		//BEGIN_KEYWORD statement_sequence END_KEYWORD
		public Group getGroup() { return cGroup; }

		//BEGIN_KEYWORD
		public RuleCall getBEGIN_KEYWORDTerminalRuleCall_0() { return cBEGIN_KEYWORDTerminalRuleCall_0; }

		//statement_sequence
		public RuleCall getStatement_sequenceParserRuleCall_1() { return cStatement_sequenceParserRuleCall_1; }

		//END_KEYWORD
		public RuleCall getEND_KEYWORDTerminalRuleCall_2() { return cEND_KEYWORDTerminalRuleCall_2; }
	}

	public class Statement_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement_sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//statement_sequence:
		//	statement (";" statement)*;
		public ParserRule getRule() { return rule; }

		//statement (";" statement)*
		public Group getGroup() { return cGroup; }

		//statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }

		//(";" statement)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//statement
		public RuleCall getStatementParserRuleCall_1_1() { return cStatementParserRuleCall_1_1; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cSimple_statementParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cStructured_statementParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//statement:
		//	(label ":")? (simple_statement | structured_statement);
		public ParserRule getRule() { return rule; }

		//(label ":")? (simple_statement | structured_statement)
		public Group getGroup() { return cGroup; }

		//(label ":")?
		public Group getGroup_0() { return cGroup_0; }

		//label
		public RuleCall getLabelParserRuleCall_0_0() { return cLabelParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//simple_statement | structured_statement
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//simple_statement
		public RuleCall getSimple_statementParserRuleCall_1_0() { return cSimple_statementParserRuleCall_1_0; }

		//structured_statement
		public RuleCall getStructured_statementParserRuleCall_1_1() { return cStructured_statementParserRuleCall_1_1; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "label");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSIGNED_INTEGER_NUMBERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTEGER_NUMBERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//label:
		//	SIGNED_INTEGER_NUMBER | INTEGER_NUMBER;
		public ParserRule getRule() { return rule; }

		//SIGNED_INTEGER_NUMBER | INTEGER_NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }

		//SIGNED_INTEGER_NUMBER
		public RuleCall getSIGNED_INTEGER_NUMBERTerminalRuleCall_0() { return cSIGNED_INTEGER_NUMBERTerminalRuleCall_0; }

		//INTEGER_NUMBER
		public RuleCall getINTEGER_NUMBERTerminalRuleCall_1() { return cINTEGER_NUMBERTerminalRuleCall_1; }
	}

	public class Simple_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simple_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignment_statementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunction_designatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGoto_statementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//simple_statement:
		//	(assignment_statement | function_designator | goto_statement)?;
		public ParserRule getRule() { return rule; }

		//(assignment_statement | function_designator | goto_statement)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//assignment_statement
		public RuleCall getAssignment_statementParserRuleCall_0() { return cAssignment_statementParserRuleCall_0; }

		//function_designator
		public RuleCall getFunction_designatorParserRuleCall_1() { return cFunction_designatorParserRuleCall_1; }

		//goto_statement
		public RuleCall getGoto_statementParserRuleCall_2() { return cGoto_statementParserRuleCall_2; }
	}

	public class Assignment_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignment_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//assignment_statement:
		//	variable ":=" expression;
		public ParserRule getRule() { return rule; }

		//variable ":=" expression
		public Group getGroup() { return cGroup; }

		//variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variable");
		private final RuleCall cEntire_variableParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////TODO
		//variable: //| component_variable
		//	entire_variable;
		public ParserRule getRule() { return rule; }

		////| component_variable
		//entire_variable
		public RuleCall getEntire_variableParserRuleCall() { return cEntire_variableParserRuleCall; }
	}

	public class Entire_variableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "entire_variable");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//entire_variable:
		//	IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}

	public class Component_variableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "component_variable");
		private final RuleCall cIndexed_variableParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////TODO
		//component_variable:
		//	indexed_variable;
		public ParserRule getRule() { return rule; }

		//indexed_variable
		public RuleCall getIndexed_variableParserRuleCall() { return cIndexed_variableParserRuleCall; }
	}

	public class Indexed_variableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "indexed_variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpression_listParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////FIXME: RECURSAO INDIRETA A ESQUERDA
		//indexed_variable:
		//	variable "[" expression_list "]";
		public ParserRule getRule() { return rule; }

		//variable "[" expression_list "]"
		public Group getGroup() { return cGroup; }

		//variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//expression_list
		public RuleCall getExpression_listParserRuleCall_2() { return cExpression_listParserRuleCall_2; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class Expression_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//expression_list:
		//	expression ("," expression)*;
		public ParserRule getRule() { return rule; }

		//expression ("," expression)*
		public Group getGroup() { return cGroup; }

		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//("," expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimple_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cRELATIONAL_OPERATORTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cSimple_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//expression:
		//	simple_expression (RELATIONAL_OPERATOR simple_expression)?;
		public ParserRule getRule() { return rule; }

		//simple_expression (RELATIONAL_OPERATOR simple_expression)?
		public Group getGroup() { return cGroup; }

		//simple_expression
		public RuleCall getSimple_expressionParserRuleCall_0() { return cSimple_expressionParserRuleCall_0; }

		//(RELATIONAL_OPERATOR simple_expression)?
		public Group getGroup_1() { return cGroup_1; }

		//RELATIONAL_OPERATOR
		public RuleCall getRELATIONAL_OPERATORTerminalRuleCall_1_0() { return cRELATIONAL_OPERATORTerminalRuleCall_1_0; }

		//simple_expression
		public RuleCall getSimple_expressionParserRuleCall_1_1() { return cSimple_expressionParserRuleCall_1_1; }
	}

	public class Simple_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simple_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cADDITION_OPERATORTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTermParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final RuleCall cADDITION_OPERATORTerminalRuleCall_2_0_0_0 = (RuleCall)cAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cOR_KEYWORDTerminalRuleCall_2_0_0_1 = (RuleCall)cAlternatives_2_0_0.eContents().get(1);
		private final RuleCall cTermParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final RuleCall cSigned_numberParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//simple_expression:
		//	ADDITION_OPERATOR? term ((ADDITION_OPERATOR+ | OR_KEYWORD) term | signed_number)*;
		public ParserRule getRule() { return rule; }

		//ADDITION_OPERATOR? term ((ADDITION_OPERATOR+ | OR_KEYWORD) term | signed_number)*
		public Group getGroup() { return cGroup; }

		//ADDITION_OPERATOR?
		public RuleCall getADDITION_OPERATORTerminalRuleCall_0() { return cADDITION_OPERATORTerminalRuleCall_0; }

		//term
		public RuleCall getTermParserRuleCall_1() { return cTermParserRuleCall_1; }

		//((ADDITION_OPERATOR+ | OR_KEYWORD) term | signed_number)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//(ADDITION_OPERATOR+ | OR_KEYWORD) term
		public Group getGroup_2_0() { return cGroup_2_0; }

		//ADDITION_OPERATOR+ | OR_KEYWORD
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }

		//ADDITION_OPERATOR+
		public RuleCall getADDITION_OPERATORTerminalRuleCall_2_0_0_0() { return cADDITION_OPERATORTerminalRuleCall_2_0_0_0; }

		//OR_KEYWORD
		public RuleCall getOR_KEYWORDTerminalRuleCall_2_0_0_1() { return cOR_KEYWORDTerminalRuleCall_2_0_0_1; }

		//term
		public RuleCall getTermParserRuleCall_2_0_1() { return cTermParserRuleCall_2_0_1; }

		//signed_number
		public RuleCall getSigned_numberParserRuleCall_2_1() { return cSigned_numberParserRuleCall_2_1; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cMULTIPLICATION_OPERATORTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cFactorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//term:
		//	factor (MULTIPLICATION_OPERATOR factor)*;
		public ParserRule getRule() { return rule; }

		//factor (MULTIPLICATION_OPERATOR factor)*
		public Group getGroup() { return cGroup; }

		//factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }

		//(MULTIPLICATION_OPERATOR factor)*
		public Group getGroup_1() { return cGroup_1; }

		//MULTIPLICATION_OPERATOR
		public RuleCall getMULTIPLICATION_OPERATORTerminalRuleCall_1_0() { return cMULTIPLICATION_OPERATORTerminalRuleCall_1_0; }

		//factor
		public RuleCall getFactorParserRuleCall_1_1() { return cFactorParserRuleCall_1_1; }
	}

	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSetParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNIL_KEYWORDTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFunction_designatorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cNOT_KEYWORDTerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final RuleCall cFactorParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		
		//factor:
		//	variable | number | STRING | set | NIL_KEYWORD | function_designator | "(" expression ")" | NOT_KEYWORD factor;
		public ParserRule getRule() { return rule; }

		//variable | number | STRING | set | NIL_KEYWORD | function_designator | "(" expression ")" | NOT_KEYWORD factor
		public Alternatives getAlternatives() { return cAlternatives; }

		//variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//number
		public RuleCall getNumberParserRuleCall_1() { return cNumberParserRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//set
		public RuleCall getSetParserRuleCall_3() { return cSetParserRuleCall_3; }

		//NIL_KEYWORD
		public RuleCall getNIL_KEYWORDTerminalRuleCall_4() { return cNIL_KEYWORDTerminalRuleCall_4; }

		//function_designator
		public RuleCall getFunction_designatorParserRuleCall_5() { return cFunction_designatorParserRuleCall_5; }

		//"(" expression ")"
		public Group getGroup_6() { return cGroup_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_6_1() { return cExpressionParserRuleCall_6_1; }

		//")"
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }

		//NOT_KEYWORD factor
		public Group getGroup_7() { return cGroup_7; }

		//NOT_KEYWORD
		public RuleCall getNOT_KEYWORDTerminalRuleCall_7_0() { return cNOT_KEYWORDTerminalRuleCall_7_0; }

		//factor
		public RuleCall getFactorParserRuleCall_7_1() { return cFactorParserRuleCall_7_1; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnsigned_numberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSigned_numberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//number:
		//	unsigned_number | signed_number;
		public ParserRule getRule() { return rule; }

		//unsigned_number | signed_number
		public Alternatives getAlternatives() { return cAlternatives; }

		//unsigned_number
		public RuleCall getUnsigned_numberParserRuleCall_0() { return cUnsigned_numberParserRuleCall_0; }

		//signed_number
		public RuleCall getSigned_numberParserRuleCall_1() { return cSigned_numberParserRuleCall_1; }
	}

	public class Unsigned_numberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unsigned_number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTEGER_NUMBERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cREAL_NUMBERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//unsigned_number:
		//	INTEGER_NUMBER | REAL_NUMBER;
		public ParserRule getRule() { return rule; }

		//INTEGER_NUMBER | REAL_NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }

		//INTEGER_NUMBER
		public RuleCall getINTEGER_NUMBERTerminalRuleCall_0() { return cINTEGER_NUMBERTerminalRuleCall_0; }

		//REAL_NUMBER
		public RuleCall getREAL_NUMBERTerminalRuleCall_1() { return cREAL_NUMBERTerminalRuleCall_1; }
	}

	public class Signed_numberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signed_number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSIGNED_INTEGER_NUMBERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSIGNED_REAL_NUMBERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//signed_number:
		//	SIGNED_INTEGER_NUMBER | SIGNED_REAL_NUMBER;
		public ParserRule getRule() { return rule; }

		//SIGNED_INTEGER_NUMBER | SIGNED_REAL_NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }

		//SIGNED_INTEGER_NUMBER
		public RuleCall getSIGNED_INTEGER_NUMBERTerminalRuleCall_0() { return cSIGNED_INTEGER_NUMBERTerminalRuleCall_0; }

		//SIGNED_REAL_NUMBER
		public RuleCall getSIGNED_REAL_NUMBERTerminalRuleCall_1() { return cSIGNED_REAL_NUMBERTerminalRuleCall_1; }
	}

	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpression_listParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//set:
		//	"[" expression_list? "]";
		public ParserRule getRule() { return rule; }

		//"[" expression_list? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//expression_list?
		public RuleCall getExpression_listParserRuleCall_1() { return cExpression_listParserRuleCall_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class Function_designatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function_designator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpression_listParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//function_designator:
		//	IDENTIFIER "(" expression_list? ")";
		public ParserRule getRule() { return rule; }

		//IDENTIFIER "(" expression_list? ")"
		public Group getGroup() { return cGroup; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression_list?
		public RuleCall getExpression_listParserRuleCall_2() { return cExpression_listParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class Structured_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "structured_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompound_statementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRepetitive_statementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConditional_statementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWith_statementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//structured_statement:
		//	compound_statement | repetitive_statement | conditional_statement | with_statement;
		public ParserRule getRule() { return rule; }

		//compound_statement | repetitive_statement | conditional_statement | with_statement
		public Alternatives getAlternatives() { return cAlternatives; }

		//compound_statement
		public RuleCall getCompound_statementParserRuleCall_0() { return cCompound_statementParserRuleCall_0; }

		//repetitive_statement
		public RuleCall getRepetitive_statementParserRuleCall_1() { return cRepetitive_statementParserRuleCall_1; }

		//conditional_statement
		public RuleCall getConditional_statementParserRuleCall_2() { return cConditional_statementParserRuleCall_2; }

		//with_statement
		public RuleCall getWith_statementParserRuleCall_3() { return cWith_statementParserRuleCall_3; }
	}

	public class Compound_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compound_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBEGIN_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStatement_sequenceParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cEND_KEYWORDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//compound_statement:
		//	BEGIN_KEYWORD statement_sequence END_KEYWORD;
		public ParserRule getRule() { return rule; }

		//BEGIN_KEYWORD statement_sequence END_KEYWORD
		public Group getGroup() { return cGroup; }

		//BEGIN_KEYWORD
		public RuleCall getBEGIN_KEYWORDTerminalRuleCall_0() { return cBEGIN_KEYWORDTerminalRuleCall_0; }

		//statement_sequence
		public RuleCall getStatement_sequenceParserRuleCall_1() { return cStatement_sequenceParserRuleCall_1; }

		//END_KEYWORD
		public RuleCall getEND_KEYWORDTerminalRuleCall_2() { return cEND_KEYWORDTerminalRuleCall_2; }
	}

	public class Repetitive_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "repetitive_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhile_statementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRepeat_statementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFor_statementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//repetitive_statement:
		//	while_statement | repeat_statement | for_statement;
		public ParserRule getRule() { return rule; }

		//while_statement | repeat_statement | for_statement
		public Alternatives getAlternatives() { return cAlternatives; }

		//while_statement
		public RuleCall getWhile_statementParserRuleCall_0() { return cWhile_statementParserRuleCall_0; }

		//repeat_statement
		public RuleCall getRepeat_statementParserRuleCall_1() { return cRepeat_statementParserRuleCall_1; }

		//for_statement
		public RuleCall getFor_statementParserRuleCall_2() { return cFor_statementParserRuleCall_2; }
	}

	public class While_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "while_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHILE_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDO_KEYWORDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cStatementParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//while_statement:
		//	WHILE_KEYWORD expression DO_KEYWORD statement;
		public ParserRule getRule() { return rule; }

		//WHILE_KEYWORD expression DO_KEYWORD statement
		public Group getGroup() { return cGroup; }

		//WHILE_KEYWORD
		public RuleCall getWHILE_KEYWORDTerminalRuleCall_0() { return cWHILE_KEYWORDTerminalRuleCall_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//DO_KEYWORD
		public RuleCall getDO_KEYWORDTerminalRuleCall_2() { return cDO_KEYWORDTerminalRuleCall_2; }

		//statement
		public RuleCall getStatementParserRuleCall_3() { return cStatementParserRuleCall_3; }
	}

	public class Repeat_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "repeat_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cREPEAT_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStatement_sequenceParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cUNTIL_KEYWORDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//repeat_statement:
		//	REPEAT_KEYWORD statement_sequence UNTIL_KEYWORD expression;
		public ParserRule getRule() { return rule; }

		//REPEAT_KEYWORD statement_sequence UNTIL_KEYWORD expression
		public Group getGroup() { return cGroup; }

		//REPEAT_KEYWORD
		public RuleCall getREPEAT_KEYWORDTerminalRuleCall_0() { return cREPEAT_KEYWORDTerminalRuleCall_0; }

		//statement_sequence
		public RuleCall getStatement_sequenceParserRuleCall_1() { return cStatement_sequenceParserRuleCall_1; }

		//UNTIL_KEYWORD
		public RuleCall getUNTIL_KEYWORDTerminalRuleCall_2() { return cUNTIL_KEYWORDTerminalRuleCall_2; }

		//expression
		public RuleCall getExpressionParserRuleCall_3() { return cExpressionParserRuleCall_3; }
	}

	public class For_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "for_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFOR_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAssignment_statementParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cTO_KEYWORDTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cDOWNTO_KEYWORDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cDO_KEYWORDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cStatementParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//for_statement:
		//	FOR_KEYWORD assignment_statement (TO_KEYWORD | DOWNTO_KEYWORD) expression DO_KEYWORD statement;
		public ParserRule getRule() { return rule; }

		//FOR_KEYWORD assignment_statement (TO_KEYWORD | DOWNTO_KEYWORD) expression DO_KEYWORD statement
		public Group getGroup() { return cGroup; }

		//FOR_KEYWORD
		public RuleCall getFOR_KEYWORDTerminalRuleCall_0() { return cFOR_KEYWORDTerminalRuleCall_0; }

		//assignment_statement
		public RuleCall getAssignment_statementParserRuleCall_1() { return cAssignment_statementParserRuleCall_1; }

		//TO_KEYWORD | DOWNTO_KEYWORD
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//TO_KEYWORD
		public RuleCall getTO_KEYWORDTerminalRuleCall_2_0() { return cTO_KEYWORDTerminalRuleCall_2_0; }

		//DOWNTO_KEYWORD
		public RuleCall getDOWNTO_KEYWORDTerminalRuleCall_2_1() { return cDOWNTO_KEYWORDTerminalRuleCall_2_1; }

		//expression
		public RuleCall getExpressionParserRuleCall_3() { return cExpressionParserRuleCall_3; }

		//DO_KEYWORD
		public RuleCall getDO_KEYWORDTerminalRuleCall_4() { return cDO_KEYWORDTerminalRuleCall_4; }

		//statement
		public RuleCall getStatementParserRuleCall_5() { return cStatementParserRuleCall_5; }
	}

	public class Conditional_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditional_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIf_statementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCase_statementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//conditional_statement:
		//	if_statement | case_statement;
		public ParserRule getRule() { return rule; }

		//if_statement | case_statement
		public Alternatives getAlternatives() { return cAlternatives; }

		//if_statement
		public RuleCall getIf_statementParserRuleCall_0() { return cIf_statementParserRuleCall_0; }

		//case_statement
		public RuleCall getCase_statementParserRuleCall_1() { return cCase_statementParserRuleCall_1; }
	}

	public class If_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "if_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIF_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTHEN_KEYWORDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cStatementParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cELSE_KEYWORDTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//if_statement:
		//	IF_KEYWORD expression THEN_KEYWORD statement (ELSE_KEYWORD statement)?;
		public ParserRule getRule() { return rule; }

		//IF_KEYWORD expression THEN_KEYWORD statement (ELSE_KEYWORD statement)?
		public Group getGroup() { return cGroup; }

		//IF_KEYWORD
		public RuleCall getIF_KEYWORDTerminalRuleCall_0() { return cIF_KEYWORDTerminalRuleCall_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//THEN_KEYWORD
		public RuleCall getTHEN_KEYWORDTerminalRuleCall_2() { return cTHEN_KEYWORDTerminalRuleCall_2; }

		//statement
		public RuleCall getStatementParserRuleCall_3() { return cStatementParserRuleCall_3; }

		//(ELSE_KEYWORD statement)?
		public Group getGroup_4() { return cGroup_4; }

		//ELSE_KEYWORD
		public RuleCall getELSE_KEYWORDTerminalRuleCall_4_0() { return cELSE_KEYWORDTerminalRuleCall_4_0; }

		//statement
		public RuleCall getStatementParserRuleCall_4_1() { return cStatementParserRuleCall_4_1; }
	}

	public class Case_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "case_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCASE_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cOF_KEYWORDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cCase_limbParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cCase_limbParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cEND_KEYWORDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//case_statement:
		//	CASE_KEYWORD expression OF_KEYWORD case_limb (";" case_limb)* ";"? END_KEYWORD;
		public ParserRule getRule() { return rule; }

		//CASE_KEYWORD expression OF_KEYWORD case_limb (";" case_limb)* ";"? END_KEYWORD
		public Group getGroup() { return cGroup; }

		//CASE_KEYWORD
		public RuleCall getCASE_KEYWORDTerminalRuleCall_0() { return cCASE_KEYWORDTerminalRuleCall_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//OF_KEYWORD
		public RuleCall getOF_KEYWORDTerminalRuleCall_2() { return cOF_KEYWORDTerminalRuleCall_2; }

		//case_limb
		public RuleCall getCase_limbParserRuleCall_3() { return cCase_limbParserRuleCall_3; }

		//(";" case_limb)*
		public Group getGroup_4() { return cGroup_4; }

		//";"
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }

		//case_limb
		public RuleCall getCase_limbParserRuleCall_4_1() { return cCase_limbParserRuleCall_4_1; }

		//";"?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//END_KEYWORD
		public RuleCall getEND_KEYWORDTerminalRuleCall_6() { return cEND_KEYWORDTerminalRuleCall_6; }
	}

	public class Case_limbElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "case_limb");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCase_label_listParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//case_limb:
		//	case_label_list ":" statement;
		public ParserRule getRule() { return rule; }

		//case_label_list ":" statement
		public Group getGroup() { return cGroup; }

		//case_label_list
		public RuleCall getCase_label_listParserRuleCall_0() { return cCase_label_listParserRuleCall_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//statement
		public RuleCall getStatementParserRuleCall_2() { return cStatementParserRuleCall_2; }
	}

	public class Case_label_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "case_label_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cConstantParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//case_label_list:
		//	constant ("," constant)*;
		public ParserRule getRule() { return rule; }

		//constant ("," constant)*
		public Group getGroup() { return cGroup; }

		//constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }

		//("," constant)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//constant
		public RuleCall getConstantParserRuleCall_1_1() { return cConstantParserRuleCall_1_1; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cADDITION_OPERATORTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//constant:
		//	ADDITION_OPERATOR? (IDENTIFIER | number) | STRING;
		public ParserRule getRule() { return rule; }

		//ADDITION_OPERATOR? (IDENTIFIER | number) | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//ADDITION_OPERATOR? (IDENTIFIER | number)
		public Group getGroup_0() { return cGroup_0; }

		//ADDITION_OPERATOR?
		public RuleCall getADDITION_OPERATORTerminalRuleCall_0_0() { return cADDITION_OPERATORTerminalRuleCall_0_0; }

		//IDENTIFIER | number
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_1_0() { return cIDENTIFIERTerminalRuleCall_0_1_0; }

		//number
		public RuleCall getNumberParserRuleCall_0_1_1() { return cNumberParserRuleCall_0_1_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class With_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "with_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWITH_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cDO_KEYWORDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cStatementParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//with_statement:
		//	WITH_KEYWORD variable ("," variable)* DO_KEYWORD statement;
		public ParserRule getRule() { return rule; }

		//WITH_KEYWORD variable ("," variable)* DO_KEYWORD statement
		public Group getGroup() { return cGroup; }

		//WITH_KEYWORD
		public RuleCall getWITH_KEYWORDTerminalRuleCall_0() { return cWITH_KEYWORDTerminalRuleCall_0; }

		//variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }

		//("," variable)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//variable
		public RuleCall getVariableParserRuleCall_2_1() { return cVariableParserRuleCall_2_1; }

		//DO_KEYWORD
		public RuleCall getDO_KEYWORDTerminalRuleCall_3() { return cDO_KEYWORDTerminalRuleCall_3; }

		//statement
		public RuleCall getStatementParserRuleCall_4() { return cStatementParserRuleCall_4; }
	}

	public class Goto_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "goto_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGOTO_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//goto_statement:
		//	GOTO_KEYWORD label;
		public ParserRule getRule() { return rule; }

		//GOTO_KEYWORD label
		public Group getGroup() { return cGroup; }

		//GOTO_KEYWORD
		public RuleCall getGOTO_KEYWORDTerminalRuleCall_0() { return cGOTO_KEYWORDTerminalRuleCall_0; }

		//label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}

	public class Declaration_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "declaration_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLabel_declaration_partParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConstant_definition_partParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cType_definition_partParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////TODO
		//declaration_part:
		//	label_declaration_part? constant_definition_part? type_definition_part?;
		public ParserRule getRule() { return rule; }

		//label_declaration_part? constant_definition_part? type_definition_part?
		public Group getGroup() { return cGroup; }

		//label_declaration_part?
		public RuleCall getLabel_declaration_partParserRuleCall_0() { return cLabel_declaration_partParserRuleCall_0; }

		//constant_definition_part?
		public RuleCall getConstant_definition_partParserRuleCall_1() { return cConstant_definition_partParserRuleCall_1; }

		//type_definition_part?
		public RuleCall getType_definition_partParserRuleCall_2() { return cType_definition_partParserRuleCall_2; }
	}

	public class Label_declaration_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "label_declaration_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLABEL_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//label_declaration_part:
		//	LABEL_KEYWORD label ("," label)* ";";
		public ParserRule getRule() { return rule; }

		//LABEL_KEYWORD label ("," label)* ";"
		public Group getGroup() { return cGroup; }

		//LABEL_KEYWORD
		public RuleCall getLABEL_KEYWORDTerminalRuleCall_0() { return cLABEL_KEYWORDTerminalRuleCall_0; }

		//label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }

		//("," label)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//label
		public RuleCall getLabelParserRuleCall_2_1() { return cLabelParserRuleCall_2_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class Constant_definition_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant_definition_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCONST_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cConstant_definitionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//constant_definition_part:
		//	CONST_KEYWORD (constant_definition ";")+;
		public ParserRule getRule() { return rule; }

		//CONST_KEYWORD (constant_definition ";")+
		public Group getGroup() { return cGroup; }

		//CONST_KEYWORD
		public RuleCall getCONST_KEYWORDTerminalRuleCall_0() { return cCONST_KEYWORDTerminalRuleCall_0; }

		//(constant_definition ";")+
		public Group getGroup_1() { return cGroup_1; }

		//constant_definition
		public RuleCall getConstant_definitionParserRuleCall_1_0() { return cConstant_definitionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class Constant_definitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant_definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//constant_definition:
		//	IDENTIFIER "=" constant;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER "=" constant
		public Group getGroup() { return cGroup; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//constant
		public RuleCall getConstantParserRuleCall_2() { return cConstantParserRuleCall_2; }
	}

	public class Type_definition_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type_definition_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTYPE_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cType_definitionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//type_definition_part:
		//	TYPE_KEYWORD (type_definition ";")+;
		public ParserRule getRule() { return rule; }

		//TYPE_KEYWORD (type_definition ";")+
		public Group getGroup() { return cGroup; }

		//TYPE_KEYWORD
		public RuleCall getTYPE_KEYWORDTerminalRuleCall_0() { return cTYPE_KEYWORDTerminalRuleCall_0; }

		//(type_definition ";")+
		public Group getGroup_1() { return cGroup_1; }

		//type_definition
		public RuleCall getType_definitionParserRuleCall_1_0() { return cType_definitionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class Type_definitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type_definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//type_definition:
		//	IDENTIFIER "=" type;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER "=" type
		public Group getGroup() { return cGroup; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimple_typeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructured_typeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////TODO
		//type:
		//	simple_type | structured_type | IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//simple_type | structured_type | IDENTIFIER
		public Alternatives getAlternatives() { return cAlternatives; }

		//simple_type
		public RuleCall getSimple_typeParserRuleCall_0() { return cSimple_typeParserRuleCall_0; }

		//structured_type
		public RuleCall getStructured_typeParserRuleCall_1() { return cStructured_typeParserRuleCall_1; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2() { return cIDENTIFIERTerminalRuleCall_2; }
	}

	public class Simple_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simple_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubrange_typeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerated_typeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//simple_type:
		//	subrange_type | enumerated_type;
		public ParserRule getRule() { return rule; }

		//subrange_type | enumerated_type
		public Alternatives getAlternatives() { return cAlternatives; }

		//subrange_type
		public RuleCall getSubrange_typeParserRuleCall_0() { return cSubrange_typeParserRuleCall_0; }

		//enumerated_type
		public RuleCall getEnumerated_typeParserRuleCall_1() { return cEnumerated_typeParserRuleCall_1; }
	}

	public class Subrange_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "subrange_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cConstantParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cNUMERIC_SUBRANGETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//subrange_type:
		//	constant ".." constant | NUMERIC_SUBRANGE;
		public ParserRule getRule() { return rule; }

		//constant ".." constant | NUMERIC_SUBRANGE
		public Alternatives getAlternatives() { return cAlternatives; }

		//constant ".." constant
		public Group getGroup_0() { return cGroup_0; }

		//constant
		public RuleCall getConstantParserRuleCall_0_0() { return cConstantParserRuleCall_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_0_1() { return cFullStopFullStopKeyword_0_1; }

		//constant
		public RuleCall getConstantParserRuleCall_0_2() { return cConstantParserRuleCall_0_2; }

		//NUMERIC_SUBRANGE
		public RuleCall getNUMERIC_SUBRANGETerminalRuleCall_1() { return cNUMERIC_SUBRANGETerminalRuleCall_1; }
	}

	public class Enumerated_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "enumerated_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentifier_listParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//enumerated_type:
		//	"(" identifier_list ")";
		public ParserRule getRule() { return rule; }

		//"(" identifier_list ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//identifier_list
		public RuleCall getIdentifier_listParserRuleCall_1() { return cIdentifier_listParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class Structured_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "structured_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPACKED_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cUnpacked_structured_typeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//structured_type:
		//	PACKED_KEYWORD? unpacked_structured_type;
		public ParserRule getRule() { return rule; }

		//PACKED_KEYWORD? unpacked_structured_type
		public Group getGroup() { return cGroup; }

		//PACKED_KEYWORD?
		public RuleCall getPACKED_KEYWORDTerminalRuleCall_0() { return cPACKED_KEYWORDTerminalRuleCall_0; }

		//unpacked_structured_type
		public RuleCall getUnpacked_structured_typeParserRuleCall_1() { return cUnpacked_structured_typeParserRuleCall_1; }
	}

	public class Unpacked_structured_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unpacked_structured_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArray_typeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRecord_typeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSet_typeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFile_typeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//unpacked_structured_type:
		//	array_type | record_type | set_type | file_type;
		public ParserRule getRule() { return rule; }

		//array_type | record_type | set_type | file_type
		public Alternatives getAlternatives() { return cAlternatives; }

		//array_type
		public RuleCall getArray_typeParserRuleCall_0() { return cArray_typeParserRuleCall_0; }

		//record_type
		public RuleCall getRecord_typeParserRuleCall_1() { return cRecord_typeParserRuleCall_1; }

		//set_type
		public RuleCall getSet_typeParserRuleCall_2() { return cSet_typeParserRuleCall_2; }

		//file_type
		public RuleCall getFile_typeParserRuleCall_3() { return cFile_typeParserRuleCall_3; }
	}

	public class Array_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "array_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cARRAY_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIndex_typeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cIndex_typeParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cOF_KEYWORDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cTypeParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//array_type:
		//	ARRAY_KEYWORD "[" index_type ("," index_type)* "]" OF_KEYWORD type;
		public ParserRule getRule() { return rule; }

		//ARRAY_KEYWORD "[" index_type ("," index_type)* "]" OF_KEYWORD type
		public Group getGroup() { return cGroup; }

		//ARRAY_KEYWORD
		public RuleCall getARRAY_KEYWORDTerminalRuleCall_0() { return cARRAY_KEYWORDTerminalRuleCall_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//index_type
		public RuleCall getIndex_typeParserRuleCall_2() { return cIndex_typeParserRuleCall_2; }

		//("," index_type)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//index_type
		public RuleCall getIndex_typeParserRuleCall_3_1() { return cIndex_typeParserRuleCall_3_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//OF_KEYWORD
		public RuleCall getOF_KEYWORDTerminalRuleCall_5() { return cOF_KEYWORDTerminalRuleCall_5; }

		//type
		public RuleCall getTypeParserRuleCall_6() { return cTypeParserRuleCall_6; }
	}

	public class Index_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "index_type");
		private final RuleCall cSimple_typeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//index_type:
		//	simple_type;
		public ParserRule getRule() { return rule; }

		//simple_type
		public RuleCall getSimple_typeParserRuleCall() { return cSimple_typeParserRuleCall; }
	}

	public class Record_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "record_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRECORD_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cField_listParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cEND_KEYWORDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//record_type:
		//	RECORD_KEYWORD field_list END_KEYWORD;
		public ParserRule getRule() { return rule; }

		//RECORD_KEYWORD field_list END_KEYWORD
		public Group getGroup() { return cGroup; }

		//RECORD_KEYWORD
		public RuleCall getRECORD_KEYWORDTerminalRuleCall_0() { return cRECORD_KEYWORDTerminalRuleCall_0; }

		//field_list
		public RuleCall getField_listParserRuleCall_1() { return cField_listParserRuleCall_1; }

		//END_KEYWORD
		public RuleCall getEND_KEYWORDTerminalRuleCall_2() { return cEND_KEYWORDTerminalRuleCall_2; }
	}

	public class Field_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "field_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cFixed_partParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_0_1_0 = (Keyword)cGroup_0_0_1.eContents().get(0);
		private final RuleCall cVariant_partParserRuleCall_0_0_1_1 = (RuleCall)cGroup_0_0_1.eContents().get(1);
		private final RuleCall cVariant_partParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//field_list:
		//	((fixed_part (";" variant_part)? | variant_part) ";"?)?;
		public ParserRule getRule() { return rule; }

		//((fixed_part (";" variant_part)? | variant_part) ";"?)?
		public Group getGroup() { return cGroup; }

		//fixed_part (";" variant_part)? | variant_part
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//fixed_part (";" variant_part)?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//fixed_part
		public RuleCall getFixed_partParserRuleCall_0_0_0() { return cFixed_partParserRuleCall_0_0_0; }

		//(";" variant_part)?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }

		//";"
		public Keyword getSemicolonKeyword_0_0_1_0() { return cSemicolonKeyword_0_0_1_0; }

		//variant_part
		public RuleCall getVariant_partParserRuleCall_0_0_1_1() { return cVariant_partParserRuleCall_0_0_1_1; }

		//variant_part
		public RuleCall getVariant_partParserRuleCall_0_1() { return cVariant_partParserRuleCall_0_1; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class Fixed_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fixed_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRecord_sectionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cRecord_sectionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//fixed_part:
		//	record_section (";" record_section)*;
		public ParserRule getRule() { return rule; }

		//record_section (";" record_section)*
		public Group getGroup() { return cGroup; }

		//record_section
		public RuleCall getRecord_sectionParserRuleCall_0() { return cRecord_sectionParserRuleCall_0; }

		//(";" record_section)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//record_section
		public RuleCall getRecord_sectionParserRuleCall_1_1() { return cRecord_sectionParserRuleCall_1_1; }
	}

	public class Record_sectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "record_section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifier_listParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//record_section:
		//	identifier_list ":" type;
		public ParserRule getRule() { return rule; }

		//identifier_list ":" type
		public Group getGroup() { return cGroup; }

		//identifier_list
		public RuleCall getIdentifier_listParserRuleCall_0() { return cIdentifier_listParserRuleCall_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}

	public class Variant_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variant_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCASE_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTag_fieldParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cOF_KEYWORDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cVariantParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cVariantParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		
		//variant_part:
		//	CASE_KEYWORD tag_field IDENTIFIER OF_KEYWORD variant (";" variant)*;
		public ParserRule getRule() { return rule; }

		//CASE_KEYWORD tag_field IDENTIFIER OF_KEYWORD variant (";" variant)*
		public Group getGroup() { return cGroup; }

		//CASE_KEYWORD
		public RuleCall getCASE_KEYWORDTerminalRuleCall_0() { return cCASE_KEYWORDTerminalRuleCall_0; }

		//tag_field
		public RuleCall getTag_fieldParserRuleCall_1() { return cTag_fieldParserRuleCall_1; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2() { return cIDENTIFIERTerminalRuleCall_2; }

		//OF_KEYWORD
		public RuleCall getOF_KEYWORDTerminalRuleCall_3() { return cOF_KEYWORDTerminalRuleCall_3; }

		//variant
		public RuleCall getVariantParserRuleCall_4() { return cVariantParserRuleCall_4; }

		//(";" variant)*
		public Group getGroup_5() { return cGroup_5; }

		//";"
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }

		//variant
		public RuleCall getVariantParserRuleCall_5_1() { return cVariantParserRuleCall_5_1; }
	}

	public class Tag_fieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tag_field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//tag_field:
		//	(IDENTIFIER ":")?;
		public ParserRule getRule() { return rule; }

		//(IDENTIFIER ":")?
		public Group getGroup() { return cGroup; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}

	public class VariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCase_label_listParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cField_listParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//variant:
		//	case_label_list ":" "(" field_list ")";
		public ParserRule getRule() { return rule; }

		//case_label_list ":" "(" field_list ")"
		public Group getGroup() { return cGroup; }

		//case_label_list
		public RuleCall getCase_label_listParserRuleCall_0() { return cCase_label_listParserRuleCall_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//field_list
		public RuleCall getField_listParserRuleCall_3() { return cField_listParserRuleCall_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class Set_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "set_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSET_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cOF_KEYWORDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//set_type:
		//	SET_KEYWORD OF_KEYWORD type;
		public ParserRule getRule() { return rule; }

		//SET_KEYWORD OF_KEYWORD type
		public Group getGroup() { return cGroup; }

		//SET_KEYWORD
		public RuleCall getSET_KEYWORDTerminalRuleCall_0() { return cSET_KEYWORDTerminalRuleCall_0; }

		//OF_KEYWORD
		public RuleCall getOF_KEYWORDTerminalRuleCall_1() { return cOF_KEYWORDTerminalRuleCall_1; }

		//type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}

	public class File_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "file_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFILE_KEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cOF_KEYWORDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//file_type:
		//	FILE_KEYWORD OF_KEYWORD type;
		public ParserRule getRule() { return rule; }

		//FILE_KEYWORD OF_KEYWORD type
		public Group getGroup() { return cGroup; }

		//FILE_KEYWORD
		public RuleCall getFILE_KEYWORDTerminalRuleCall_0() { return cFILE_KEYWORDTerminalRuleCall_0; }

		//OF_KEYWORD
		public RuleCall getOF_KEYWORDTerminalRuleCall_1() { return cOF_KEYWORDTerminalRuleCall_1; }

		//type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}
	
	
	private final PascalElements pPascal;
	private final ProgramElements pProgram;
	private final Program_heading_blockElements pProgram_heading_block;
	private final Identifier_listElements pIdentifier_list;
	private final BlockElements pBlock;
	private final Statement_partElements pStatement_part;
	private final Statement_sequenceElements pStatement_sequence;
	private final StatementElements pStatement;
	private final LabelElements pLabel;
	private final Simple_statementElements pSimple_statement;
	private final Assignment_statementElements pAssignment_statement;
	private final VariableElements pVariable;
	private final Entire_variableElements pEntire_variable;
	private final Component_variableElements pComponent_variable;
	private final Indexed_variableElements pIndexed_variable;
	private final Expression_listElements pExpression_list;
	private final ExpressionElements pExpression;
	private final Simple_expressionElements pSimple_expression;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final NumberElements pNumber;
	private final Unsigned_numberElements pUnsigned_number;
	private final Signed_numberElements pSigned_number;
	private final SetElements pSet;
	private final Function_designatorElements pFunction_designator;
	private final Structured_statementElements pStructured_statement;
	private final Compound_statementElements pCompound_statement;
	private final Repetitive_statementElements pRepetitive_statement;
	private final While_statementElements pWhile_statement;
	private final Repeat_statementElements pRepeat_statement;
	private final For_statementElements pFor_statement;
	private final Conditional_statementElements pConditional_statement;
	private final If_statementElements pIf_statement;
	private final Case_statementElements pCase_statement;
	private final Case_limbElements pCase_limb;
	private final Case_label_listElements pCase_label_list;
	private final ConstantElements pConstant;
	private final With_statementElements pWith_statement;
	private final Goto_statementElements pGoto_statement;
	private final Declaration_partElements pDeclaration_part;
	private final Label_declaration_partElements pLabel_declaration_part;
	private final Constant_definition_partElements pConstant_definition_part;
	private final Constant_definitionElements pConstant_definition;
	private final Type_definition_partElements pType_definition_part;
	private final Type_definitionElements pType_definition;
	private final TypeElements pType;
	private final Simple_typeElements pSimple_type;
	private final Subrange_typeElements pSubrange_type;
	private final Enumerated_typeElements pEnumerated_type;
	private final Structured_typeElements pStructured_type;
	private final Unpacked_structured_typeElements pUnpacked_structured_type;
	private final Array_typeElements pArray_type;
	private final Index_typeElements pIndex_type;
	private final Record_typeElements pRecord_type;
	private final Field_listElements pField_list;
	private final Fixed_partElements pFixed_part;
	private final Record_sectionElements pRecord_section;
	private final Variant_partElements pVariant_part;
	private final Tag_fieldElements pTag_field;
	private final VariantElements pVariant;
	private final Set_typeElements pSet_type;
	private final File_typeElements pFile_type;
	private final TerminalRule tNUMERIC_SUBRANGE;
	private final TerminalRule tADDITION_OPERATOR;
	private final TerminalRule tMULTIPLICATION_OPERATOR;
	private final TerminalRule tRELATIONAL_OPERATOR;
	private final TerminalRule tBEGIN_KEYWORD;
	private final TerminalRule tEND_KEYWORD;
	private final TerminalRule tLABEL_KEYWORD;
	private final TerminalRule tNIL_KEYWORD;
	private final TerminalRule tNOT_KEYWORD;
	private final TerminalRule tOR_KEYWORD;
	private final TerminalRule tGOTO_KEYWORD;
	private final TerminalRule tWHILE_KEYWORD;
	private final TerminalRule tDO_KEYWORD;
	private final TerminalRule tREPEAT_KEYWORD;
	private final TerminalRule tUNTIL_KEYWORD;
	private final TerminalRule tFOR_KEYWORD;
	private final TerminalRule tTO_KEYWORD;
	private final TerminalRule tDOWNTO_KEYWORD;
	private final TerminalRule tIF_KEYWORD;
	private final TerminalRule tTHEN_KEYWORD;
	private final TerminalRule tELSE_KEYWORD;
	private final TerminalRule tCASE_KEYWORD;
	private final TerminalRule tOF_KEYWORD;
	private final TerminalRule tWITH_KEYWORD;
	private final TerminalRule tCONST_KEYWORD;
	private final TerminalRule tTYPE_KEYWORD;
	private final TerminalRule tPACKED_KEYWORD;
	private final TerminalRule tARRAY_KEYWORD;
	private final TerminalRule tRECORD_KEYWORD;
	private final TerminalRule tSET_KEYWORD;
	private final TerminalRule tFILE_KEYWORD;
	private final TerminalRule tSIGNED_INTEGER_NUMBER;
	private final TerminalRule tINTEGER_NUMBER;
	private final TerminalRule tSIGNED_REAL_NUMBER;
	private final TerminalRule tREAL_NUMBER;
	private final TerminalRule tUNSIGNED_DIGIT_SEQUENCE;
	private final TerminalRule tDIGIT_SEQUENCE;
	private final TerminalRule tDIGIT;
	private final TerminalRule tIDENTIFIER;
	private final TerminalRule tLETTER;
	private final TerminalRule tLETTER_EXTENDED;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PascalGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPascal = new PascalElements();
		this.pProgram = new ProgramElements();
		this.pProgram_heading_block = new Program_heading_blockElements();
		this.pIdentifier_list = new Identifier_listElements();
		this.pBlock = new BlockElements();
		this.pStatement_part = new Statement_partElements();
		this.pStatement_sequence = new Statement_sequenceElements();
		this.pStatement = new StatementElements();
		this.pLabel = new LabelElements();
		this.pSimple_statement = new Simple_statementElements();
		this.pAssignment_statement = new Assignment_statementElements();
		this.pVariable = new VariableElements();
		this.pEntire_variable = new Entire_variableElements();
		this.pComponent_variable = new Component_variableElements();
		this.pIndexed_variable = new Indexed_variableElements();
		this.pExpression_list = new Expression_listElements();
		this.pExpression = new ExpressionElements();
		this.pSimple_expression = new Simple_expressionElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pNumber = new NumberElements();
		this.pUnsigned_number = new Unsigned_numberElements();
		this.pSigned_number = new Signed_numberElements();
		this.pSet = new SetElements();
		this.pFunction_designator = new Function_designatorElements();
		this.pStructured_statement = new Structured_statementElements();
		this.pCompound_statement = new Compound_statementElements();
		this.pRepetitive_statement = new Repetitive_statementElements();
		this.pWhile_statement = new While_statementElements();
		this.pRepeat_statement = new Repeat_statementElements();
		this.pFor_statement = new For_statementElements();
		this.pConditional_statement = new Conditional_statementElements();
		this.pIf_statement = new If_statementElements();
		this.pCase_statement = new Case_statementElements();
		this.pCase_limb = new Case_limbElements();
		this.pCase_label_list = new Case_label_listElements();
		this.pConstant = new ConstantElements();
		this.pWith_statement = new With_statementElements();
		this.pGoto_statement = new Goto_statementElements();
		this.pDeclaration_part = new Declaration_partElements();
		this.pLabel_declaration_part = new Label_declaration_partElements();
		this.pConstant_definition_part = new Constant_definition_partElements();
		this.pConstant_definition = new Constant_definitionElements();
		this.pType_definition_part = new Type_definition_partElements();
		this.pType_definition = new Type_definitionElements();
		this.pType = new TypeElements();
		this.pSimple_type = new Simple_typeElements();
		this.pSubrange_type = new Subrange_typeElements();
		this.pEnumerated_type = new Enumerated_typeElements();
		this.pStructured_type = new Structured_typeElements();
		this.pUnpacked_structured_type = new Unpacked_structured_typeElements();
		this.pArray_type = new Array_typeElements();
		this.pIndex_type = new Index_typeElements();
		this.pRecord_type = new Record_typeElements();
		this.pField_list = new Field_listElements();
		this.pFixed_part = new Fixed_partElements();
		this.pRecord_section = new Record_sectionElements();
		this.pVariant_part = new Variant_partElements();
		this.pTag_field = new Tag_fieldElements();
		this.pVariant = new VariantElements();
		this.pSet_type = new Set_typeElements();
		this.pFile_type = new File_typeElements();
		this.tNUMERIC_SUBRANGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMERIC_SUBRANGE");
		this.tADDITION_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ADDITION_OPERATOR");
		this.tMULTIPLICATION_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MULTIPLICATION_OPERATOR");
		this.tRELATIONAL_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RELATIONAL_OPERATOR");
		this.tBEGIN_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BEGIN_KEYWORD");
		this.tEND_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "END_KEYWORD");
		this.tLABEL_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LABEL_KEYWORD");
		this.tNIL_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NIL_KEYWORD");
		this.tNOT_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NOT_KEYWORD");
		this.tOR_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OR_KEYWORD");
		this.tGOTO_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GOTO_KEYWORD");
		this.tWHILE_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WHILE_KEYWORD");
		this.tDO_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DO_KEYWORD");
		this.tREPEAT_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REPEAT_KEYWORD");
		this.tUNTIL_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNTIL_KEYWORD");
		this.tFOR_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FOR_KEYWORD");
		this.tTO_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TO_KEYWORD");
		this.tDOWNTO_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOWNTO_KEYWORD");
		this.tIF_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IF_KEYWORD");
		this.tTHEN_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "THEN_KEYWORD");
		this.tELSE_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ELSE_KEYWORD");
		this.tCASE_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CASE_KEYWORD");
		this.tOF_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OF_KEYWORD");
		this.tWITH_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WITH_KEYWORD");
		this.tCONST_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONST_KEYWORD");
		this.tTYPE_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TYPE_KEYWORD");
		this.tPACKED_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PACKED_KEYWORD");
		this.tARRAY_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ARRAY_KEYWORD");
		this.tRECORD_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RECORD_KEYWORD");
		this.tSET_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SET_KEYWORD");
		this.tFILE_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FILE_KEYWORD");
		this.tSIGNED_INTEGER_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SIGNED_INTEGER_NUMBER");
		this.tINTEGER_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER_NUMBER");
		this.tSIGNED_REAL_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SIGNED_REAL_NUMBER");
		this.tREAL_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL_NUMBER");
		this.tUNSIGNED_DIGIT_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNSIGNED_DIGIT_SEQUENCE");
		this.tDIGIT_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT_SEQUENCE");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT");
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LETTER");
		this.tLETTER_EXTENDED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LETTER_EXTENDED");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.pascal.Pascal".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//pascal:
	//	program+=program;
	public PascalElements getPascalAccess() {
		return pPascal;
	}
	
	public ParserRule getPascalRule() {
		return getPascalAccess().getRule();
	}

	//program:
	//	program_heading_block block ".";
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//program_heading_block:
	//	"program" IDENTIFIER ("(" identifier_list ")")? ";";
	public Program_heading_blockElements getProgram_heading_blockAccess() {
		return pProgram_heading_block;
	}
	
	public ParserRule getProgram_heading_blockRule() {
		return getProgram_heading_blockAccess().getRule();
	}

	//identifier_list:
	//	IDENTIFIER ("," IDENTIFIER)*;
	public Identifier_listElements getIdentifier_listAccess() {
		return pIdentifier_list;
	}
	
	public ParserRule getIdentifier_listRule() {
		return getIdentifier_listAccess().getRule();
	}

	//block:
	//	declaration_part statement_part;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//statement_part:
	//	BEGIN_KEYWORD statement_sequence END_KEYWORD;
	public Statement_partElements getStatement_partAccess() {
		return pStatement_part;
	}
	
	public ParserRule getStatement_partRule() {
		return getStatement_partAccess().getRule();
	}

	//statement_sequence:
	//	statement (";" statement)*;
	public Statement_sequenceElements getStatement_sequenceAccess() {
		return pStatement_sequence;
	}
	
	public ParserRule getStatement_sequenceRule() {
		return getStatement_sequenceAccess().getRule();
	}

	//statement:
	//	(label ":")? (simple_statement | structured_statement);
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//label:
	//	SIGNED_INTEGER_NUMBER | INTEGER_NUMBER;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//simple_statement:
	//	(assignment_statement | function_designator | goto_statement)?;
	public Simple_statementElements getSimple_statementAccess() {
		return pSimple_statement;
	}
	
	public ParserRule getSimple_statementRule() {
		return getSimple_statementAccess().getRule();
	}

	//assignment_statement:
	//	variable ":=" expression;
	public Assignment_statementElements getAssignment_statementAccess() {
		return pAssignment_statement;
	}
	
	public ParserRule getAssignment_statementRule() {
		return getAssignment_statementAccess().getRule();
	}

	////TODO
	//variable: //| component_variable
	//	entire_variable;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//entire_variable:
	//	IDENTIFIER;
	public Entire_variableElements getEntire_variableAccess() {
		return pEntire_variable;
	}
	
	public ParserRule getEntire_variableRule() {
		return getEntire_variableAccess().getRule();
	}

	////TODO
	//component_variable:
	//	indexed_variable;
	public Component_variableElements getComponent_variableAccess() {
		return pComponent_variable;
	}
	
	public ParserRule getComponent_variableRule() {
		return getComponent_variableAccess().getRule();
	}

	////FIXME: RECURSAO INDIRETA A ESQUERDA
	//indexed_variable:
	//	variable "[" expression_list "]";
	public Indexed_variableElements getIndexed_variableAccess() {
		return pIndexed_variable;
	}
	
	public ParserRule getIndexed_variableRule() {
		return getIndexed_variableAccess().getRule();
	}

	//expression_list:
	//	expression ("," expression)*;
	public Expression_listElements getExpression_listAccess() {
		return pExpression_list;
	}
	
	public ParserRule getExpression_listRule() {
		return getExpression_listAccess().getRule();
	}

	//expression:
	//	simple_expression (RELATIONAL_OPERATOR simple_expression)?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//simple_expression:
	//	ADDITION_OPERATOR? term ((ADDITION_OPERATOR+ | OR_KEYWORD) term | signed_number)*;
	public Simple_expressionElements getSimple_expressionAccess() {
		return pSimple_expression;
	}
	
	public ParserRule getSimple_expressionRule() {
		return getSimple_expressionAccess().getRule();
	}

	//term:
	//	factor (MULTIPLICATION_OPERATOR factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//factor:
	//	variable | number | STRING | set | NIL_KEYWORD | function_designator | "(" expression ")" | NOT_KEYWORD factor;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}

	//number:
	//	unsigned_number | signed_number;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//unsigned_number:
	//	INTEGER_NUMBER | REAL_NUMBER;
	public Unsigned_numberElements getUnsigned_numberAccess() {
		return pUnsigned_number;
	}
	
	public ParserRule getUnsigned_numberRule() {
		return getUnsigned_numberAccess().getRule();
	}

	//signed_number:
	//	SIGNED_INTEGER_NUMBER | SIGNED_REAL_NUMBER;
	public Signed_numberElements getSigned_numberAccess() {
		return pSigned_number;
	}
	
	public ParserRule getSigned_numberRule() {
		return getSigned_numberAccess().getRule();
	}

	//set:
	//	"[" expression_list? "]";
	public SetElements getSetAccess() {
		return pSet;
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}

	//function_designator:
	//	IDENTIFIER "(" expression_list? ")";
	public Function_designatorElements getFunction_designatorAccess() {
		return pFunction_designator;
	}
	
	public ParserRule getFunction_designatorRule() {
		return getFunction_designatorAccess().getRule();
	}

	//structured_statement:
	//	compound_statement | repetitive_statement | conditional_statement | with_statement;
	public Structured_statementElements getStructured_statementAccess() {
		return pStructured_statement;
	}
	
	public ParserRule getStructured_statementRule() {
		return getStructured_statementAccess().getRule();
	}

	//compound_statement:
	//	BEGIN_KEYWORD statement_sequence END_KEYWORD;
	public Compound_statementElements getCompound_statementAccess() {
		return pCompound_statement;
	}
	
	public ParserRule getCompound_statementRule() {
		return getCompound_statementAccess().getRule();
	}

	//repetitive_statement:
	//	while_statement | repeat_statement | for_statement;
	public Repetitive_statementElements getRepetitive_statementAccess() {
		return pRepetitive_statement;
	}
	
	public ParserRule getRepetitive_statementRule() {
		return getRepetitive_statementAccess().getRule();
	}

	//while_statement:
	//	WHILE_KEYWORD expression DO_KEYWORD statement;
	public While_statementElements getWhile_statementAccess() {
		return pWhile_statement;
	}
	
	public ParserRule getWhile_statementRule() {
		return getWhile_statementAccess().getRule();
	}

	//repeat_statement:
	//	REPEAT_KEYWORD statement_sequence UNTIL_KEYWORD expression;
	public Repeat_statementElements getRepeat_statementAccess() {
		return pRepeat_statement;
	}
	
	public ParserRule getRepeat_statementRule() {
		return getRepeat_statementAccess().getRule();
	}

	//for_statement:
	//	FOR_KEYWORD assignment_statement (TO_KEYWORD | DOWNTO_KEYWORD) expression DO_KEYWORD statement;
	public For_statementElements getFor_statementAccess() {
		return pFor_statement;
	}
	
	public ParserRule getFor_statementRule() {
		return getFor_statementAccess().getRule();
	}

	//conditional_statement:
	//	if_statement | case_statement;
	public Conditional_statementElements getConditional_statementAccess() {
		return pConditional_statement;
	}
	
	public ParserRule getConditional_statementRule() {
		return getConditional_statementAccess().getRule();
	}

	//if_statement:
	//	IF_KEYWORD expression THEN_KEYWORD statement (ELSE_KEYWORD statement)?;
	public If_statementElements getIf_statementAccess() {
		return pIf_statement;
	}
	
	public ParserRule getIf_statementRule() {
		return getIf_statementAccess().getRule();
	}

	//case_statement:
	//	CASE_KEYWORD expression OF_KEYWORD case_limb (";" case_limb)* ";"? END_KEYWORD;
	public Case_statementElements getCase_statementAccess() {
		return pCase_statement;
	}
	
	public ParserRule getCase_statementRule() {
		return getCase_statementAccess().getRule();
	}

	//case_limb:
	//	case_label_list ":" statement;
	public Case_limbElements getCase_limbAccess() {
		return pCase_limb;
	}
	
	public ParserRule getCase_limbRule() {
		return getCase_limbAccess().getRule();
	}

	//case_label_list:
	//	constant ("," constant)*;
	public Case_label_listElements getCase_label_listAccess() {
		return pCase_label_list;
	}
	
	public ParserRule getCase_label_listRule() {
		return getCase_label_listAccess().getRule();
	}

	//constant:
	//	ADDITION_OPERATOR? (IDENTIFIER | number) | STRING;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//with_statement:
	//	WITH_KEYWORD variable ("," variable)* DO_KEYWORD statement;
	public With_statementElements getWith_statementAccess() {
		return pWith_statement;
	}
	
	public ParserRule getWith_statementRule() {
		return getWith_statementAccess().getRule();
	}

	//goto_statement:
	//	GOTO_KEYWORD label;
	public Goto_statementElements getGoto_statementAccess() {
		return pGoto_statement;
	}
	
	public ParserRule getGoto_statementRule() {
		return getGoto_statementAccess().getRule();
	}

	////TODO
	//declaration_part:
	//	label_declaration_part? constant_definition_part? type_definition_part?;
	public Declaration_partElements getDeclaration_partAccess() {
		return pDeclaration_part;
	}
	
	public ParserRule getDeclaration_partRule() {
		return getDeclaration_partAccess().getRule();
	}

	//label_declaration_part:
	//	LABEL_KEYWORD label ("," label)* ";";
	public Label_declaration_partElements getLabel_declaration_partAccess() {
		return pLabel_declaration_part;
	}
	
	public ParserRule getLabel_declaration_partRule() {
		return getLabel_declaration_partAccess().getRule();
	}

	//constant_definition_part:
	//	CONST_KEYWORD (constant_definition ";")+;
	public Constant_definition_partElements getConstant_definition_partAccess() {
		return pConstant_definition_part;
	}
	
	public ParserRule getConstant_definition_partRule() {
		return getConstant_definition_partAccess().getRule();
	}

	//constant_definition:
	//	IDENTIFIER "=" constant;
	public Constant_definitionElements getConstant_definitionAccess() {
		return pConstant_definition;
	}
	
	public ParserRule getConstant_definitionRule() {
		return getConstant_definitionAccess().getRule();
	}

	//type_definition_part:
	//	TYPE_KEYWORD (type_definition ";")+;
	public Type_definition_partElements getType_definition_partAccess() {
		return pType_definition_part;
	}
	
	public ParserRule getType_definition_partRule() {
		return getType_definition_partAccess().getRule();
	}

	//type_definition:
	//	IDENTIFIER "=" type;
	public Type_definitionElements getType_definitionAccess() {
		return pType_definition;
	}
	
	public ParserRule getType_definitionRule() {
		return getType_definitionAccess().getRule();
	}

	////TODO
	//type:
	//	simple_type | structured_type | IDENTIFIER;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//simple_type:
	//	subrange_type | enumerated_type;
	public Simple_typeElements getSimple_typeAccess() {
		return pSimple_type;
	}
	
	public ParserRule getSimple_typeRule() {
		return getSimple_typeAccess().getRule();
	}

	//subrange_type:
	//	constant ".." constant | NUMERIC_SUBRANGE;
	public Subrange_typeElements getSubrange_typeAccess() {
		return pSubrange_type;
	}
	
	public ParserRule getSubrange_typeRule() {
		return getSubrange_typeAccess().getRule();
	}

	//enumerated_type:
	//	"(" identifier_list ")";
	public Enumerated_typeElements getEnumerated_typeAccess() {
		return pEnumerated_type;
	}
	
	public ParserRule getEnumerated_typeRule() {
		return getEnumerated_typeAccess().getRule();
	}

	//structured_type:
	//	PACKED_KEYWORD? unpacked_structured_type;
	public Structured_typeElements getStructured_typeAccess() {
		return pStructured_type;
	}
	
	public ParserRule getStructured_typeRule() {
		return getStructured_typeAccess().getRule();
	}

	//unpacked_structured_type:
	//	array_type | record_type | set_type | file_type;
	public Unpacked_structured_typeElements getUnpacked_structured_typeAccess() {
		return pUnpacked_structured_type;
	}
	
	public ParserRule getUnpacked_structured_typeRule() {
		return getUnpacked_structured_typeAccess().getRule();
	}

	//array_type:
	//	ARRAY_KEYWORD "[" index_type ("," index_type)* "]" OF_KEYWORD type;
	public Array_typeElements getArray_typeAccess() {
		return pArray_type;
	}
	
	public ParserRule getArray_typeRule() {
		return getArray_typeAccess().getRule();
	}

	//index_type:
	//	simple_type;
	public Index_typeElements getIndex_typeAccess() {
		return pIndex_type;
	}
	
	public ParserRule getIndex_typeRule() {
		return getIndex_typeAccess().getRule();
	}

	//record_type:
	//	RECORD_KEYWORD field_list END_KEYWORD;
	public Record_typeElements getRecord_typeAccess() {
		return pRecord_type;
	}
	
	public ParserRule getRecord_typeRule() {
		return getRecord_typeAccess().getRule();
	}

	//field_list:
	//	((fixed_part (";" variant_part)? | variant_part) ";"?)?;
	public Field_listElements getField_listAccess() {
		return pField_list;
	}
	
	public ParserRule getField_listRule() {
		return getField_listAccess().getRule();
	}

	//fixed_part:
	//	record_section (";" record_section)*;
	public Fixed_partElements getFixed_partAccess() {
		return pFixed_part;
	}
	
	public ParserRule getFixed_partRule() {
		return getFixed_partAccess().getRule();
	}

	//record_section:
	//	identifier_list ":" type;
	public Record_sectionElements getRecord_sectionAccess() {
		return pRecord_section;
	}
	
	public ParserRule getRecord_sectionRule() {
		return getRecord_sectionAccess().getRule();
	}

	//variant_part:
	//	CASE_KEYWORD tag_field IDENTIFIER OF_KEYWORD variant (";" variant)*;
	public Variant_partElements getVariant_partAccess() {
		return pVariant_part;
	}
	
	public ParserRule getVariant_partRule() {
		return getVariant_partAccess().getRule();
	}

	//tag_field:
	//	(IDENTIFIER ":")?;
	public Tag_fieldElements getTag_fieldAccess() {
		return pTag_field;
	}
	
	public ParserRule getTag_fieldRule() {
		return getTag_fieldAccess().getRule();
	}

	//variant:
	//	case_label_list ":" "(" field_list ")";
	public VariantElements getVariantAccess() {
		return pVariant;
	}
	
	public ParserRule getVariantRule() {
		return getVariantAccess().getRule();
	}

	//set_type:
	//	SET_KEYWORD OF_KEYWORD type;
	public Set_typeElements getSet_typeAccess() {
		return pSet_type;
	}
	
	public ParserRule getSet_typeRule() {
		return getSet_typeAccess().getRule();
	}

	//file_type:
	//	FILE_KEYWORD OF_KEYWORD type;
	public File_typeElements getFile_typeAccess() {
		return pFile_type;
	}
	
	public ParserRule getFile_typeRule() {
		return getFile_typeAccess().getRule();
	}

	//terminal NUMERIC_SUBRANGE:
	//	(INTEGER_NUMBER | REAL_NUMBER | SIGNED_INTEGER_NUMBER | SIGNED_REAL_NUMBER) ".." (INTEGER_NUMBER | REAL_NUMBER |
	//	SIGNED_INTEGER_NUMBER | SIGNED_REAL_NUMBER);
	public TerminalRule getNUMERIC_SUBRANGERule() {
		return tNUMERIC_SUBRANGE;
	} 

	//terminal ADDITION_OPERATOR:
	//	"+" | "-";
	public TerminalRule getADDITION_OPERATORRule() {
		return tADDITION_OPERATOR;
	} 

	//terminal MULTIPLICATION_OPERATOR:
	//	"*" | "/" | "div" | "mod" | "and";
	public TerminalRule getMULTIPLICATION_OPERATORRule() {
		return tMULTIPLICATION_OPERATOR;
	} 

	//terminal RELATIONAL_OPERATOR:
	//	"=" | "<>" | "<" | "<=" | ">" | ">=" | "in";
	public TerminalRule getRELATIONAL_OPERATORRule() {
		return tRELATIONAL_OPERATOR;
	} 

	//terminal BEGIN_KEYWORD:
	//	"begin";
	public TerminalRule getBEGIN_KEYWORDRule() {
		return tBEGIN_KEYWORD;
	} 

	//terminal END_KEYWORD:
	//	"end";
	public TerminalRule getEND_KEYWORDRule() {
		return tEND_KEYWORD;
	} 

	//terminal LABEL_KEYWORD:
	//	"label";
	public TerminalRule getLABEL_KEYWORDRule() {
		return tLABEL_KEYWORD;
	} 

	//terminal NIL_KEYWORD:
	//	"nil";
	public TerminalRule getNIL_KEYWORDRule() {
		return tNIL_KEYWORD;
	} 

	//terminal NOT_KEYWORD:
	//	"not";
	public TerminalRule getNOT_KEYWORDRule() {
		return tNOT_KEYWORD;
	} 

	//terminal OR_KEYWORD:
	//	"or";
	public TerminalRule getOR_KEYWORDRule() {
		return tOR_KEYWORD;
	} 

	//terminal GOTO_KEYWORD:
	//	"goto";
	public TerminalRule getGOTO_KEYWORDRule() {
		return tGOTO_KEYWORD;
	} 

	//terminal WHILE_KEYWORD:
	//	"while";
	public TerminalRule getWHILE_KEYWORDRule() {
		return tWHILE_KEYWORD;
	} 

	//terminal DO_KEYWORD:
	//	"do";
	public TerminalRule getDO_KEYWORDRule() {
		return tDO_KEYWORD;
	} 

	//terminal REPEAT_KEYWORD:
	//	"repeat";
	public TerminalRule getREPEAT_KEYWORDRule() {
		return tREPEAT_KEYWORD;
	} 

	//terminal UNTIL_KEYWORD:
	//	"until";
	public TerminalRule getUNTIL_KEYWORDRule() {
		return tUNTIL_KEYWORD;
	} 

	//terminal FOR_KEYWORD:
	//	"for";
	public TerminalRule getFOR_KEYWORDRule() {
		return tFOR_KEYWORD;
	} 

	//terminal TO_KEYWORD:
	//	"to";
	public TerminalRule getTO_KEYWORDRule() {
		return tTO_KEYWORD;
	} 

	//terminal DOWNTO_KEYWORD:
	//	"downto";
	public TerminalRule getDOWNTO_KEYWORDRule() {
		return tDOWNTO_KEYWORD;
	} 

	//terminal IF_KEYWORD:
	//	"if";
	public TerminalRule getIF_KEYWORDRule() {
		return tIF_KEYWORD;
	} 

	//terminal THEN_KEYWORD:
	//	"then";
	public TerminalRule getTHEN_KEYWORDRule() {
		return tTHEN_KEYWORD;
	} 

	//terminal ELSE_KEYWORD:
	//	"else";
	public TerminalRule getELSE_KEYWORDRule() {
		return tELSE_KEYWORD;
	} 

	//terminal CASE_KEYWORD:
	//	"case";
	public TerminalRule getCASE_KEYWORDRule() {
		return tCASE_KEYWORD;
	} 

	//terminal OF_KEYWORD:
	//	"of";
	public TerminalRule getOF_KEYWORDRule() {
		return tOF_KEYWORD;
	} 

	//terminal WITH_KEYWORD:
	//	"with";
	public TerminalRule getWITH_KEYWORDRule() {
		return tWITH_KEYWORD;
	} 

	//terminal CONST_KEYWORD:
	//	"const";
	public TerminalRule getCONST_KEYWORDRule() {
		return tCONST_KEYWORD;
	} 

	//terminal TYPE_KEYWORD:
	//	"type";
	public TerminalRule getTYPE_KEYWORDRule() {
		return tTYPE_KEYWORD;
	} 

	//terminal PACKED_KEYWORD:
	//	"packed";
	public TerminalRule getPACKED_KEYWORDRule() {
		return tPACKED_KEYWORD;
	} 

	//terminal ARRAY_KEYWORD:
	//	"array";
	public TerminalRule getARRAY_KEYWORDRule() {
		return tARRAY_KEYWORD;
	} 

	//terminal RECORD_KEYWORD:
	//	"record";
	public TerminalRule getRECORD_KEYWORDRule() {
		return tRECORD_KEYWORD;
	} 

	//terminal SET_KEYWORD:
	//	"set";
	public TerminalRule getSET_KEYWORDRule() {
		return tSET_KEYWORD;
	} 

	//terminal FILE_KEYWORD:
	//	"file";
	public TerminalRule getFILE_KEYWORDRule() {
		return tFILE_KEYWORD;
	} 

	//terminal SIGNED_INTEGER_NUMBER:
	//	ADDITION_OPERATOR INTEGER_NUMBER;
	public TerminalRule getSIGNED_INTEGER_NUMBERRule() {
		return tSIGNED_INTEGER_NUMBER;
	} 

	//terminal INTEGER_NUMBER:
	//	UNSIGNED_DIGIT_SEQUENCE;
	public TerminalRule getINTEGER_NUMBERRule() {
		return tINTEGER_NUMBER;
	} 

	//terminal SIGNED_REAL_NUMBER:
	//	ADDITION_OPERATOR REAL_NUMBER;
	public TerminalRule getSIGNED_REAL_NUMBERRule() {
		return tSIGNED_REAL_NUMBER;
	} 

	//terminal REAL_NUMBER:
	//	UNSIGNED_DIGIT_SEQUENCE "." UNSIGNED_DIGIT_SEQUENCE? (("E" | "e") DIGIT_SEQUENCE)? | UNSIGNED_DIGIT_SEQUENCE ("E" |
	//	"e") DIGIT_SEQUENCE;
	public TerminalRule getREAL_NUMBERRule() {
		return tREAL_NUMBER;
	} 

	//terminal UNSIGNED_DIGIT_SEQUENCE:
	//	DIGIT+;
	public TerminalRule getUNSIGNED_DIGIT_SEQUENCERule() {
		return tUNSIGNED_DIGIT_SEQUENCE;
	} 

	//terminal DIGIT_SEQUENCE:
	//	ADDITION_OPERATOR? UNSIGNED_DIGIT_SEQUENCE;
	public TerminalRule getDIGIT_SEQUENCERule() {
		return tDIGIT_SEQUENCE;
	} 

	//terminal DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	} 

	//terminal IDENTIFIER:
	//	LETTER_EXTENDED (LETTER_EXTENDED | DIGIT)*;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	} 

	//terminal LETTER:
	//	"A".."Z" | "a".."z";
	public TerminalRule getLETTERRule() {
		return tLETTER;
	} 

	//terminal LETTER_EXTENDED:
	//	LETTER | "_";
	public TerminalRule getLETTER_EXTENDEDRule() {
		return tLETTER_EXTENDED;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

/*
* generated by Xtext
*/
grammar InternalPascal;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.pascal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.pascal.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.pascal.services.PascalGrammarAccess;

}

@parser::members {

 	private PascalGrammarAccess grammarAccess;
 	
    public InternalPascalParser(TokenStream input, PascalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "pascal";	
   	}
   	
   	@Override
   	protected PascalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulepascal
entryRulepascal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPascalRule()); }
	 iv_rulepascal=rulepascal 
	 { $current=$iv_rulepascal.current; } 
	 EOF 
;

// Rule pascal
rulepascal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPascalAccess().getProgramProgramParserRuleCall_0()); 
	    }
		lv_program_0_0=ruleprogram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPascalRule());
	        }
       		add(
       			$current, 
       			"program",
        		lv_program_0_0, 
        		"program");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleprogram
entryRuleprogram returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); } 
	 iv_ruleprogram=ruleprogram 
	 { $current=$iv_ruleprogram.current.getText(); }  
	 EOF 
;

// Rule program
ruleprogram returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProgramAccess().getProgram_heading_blockParserRuleCall_0()); 
    }
    this_program_heading_block_0=ruleprogram_heading_block    {
		$current.merge(this_program_heading_block_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getProgramAccess().getBlockParserRuleCall_1()); 
    }
    this_block_1=ruleblock    {
		$current.merge(this_block_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgramAccess().getFullStopKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleprogram_heading_block
entryRuleprogram_heading_block returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgram_heading_blockRule()); } 
	 iv_ruleprogram_heading_block=ruleprogram_heading_block 
	 { $current=$iv_ruleprogram_heading_block.current.getText(); }  
	 EOF 
;

// Rule program_heading_block
ruleprogram_heading_block returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='program' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_heading_blockAccess().getProgramKeyword_0()); 
    }
    this_IDENTIFIER_1=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_1);
    }

    { 
    newLeafNode(this_IDENTIFIER_1, grammarAccess.getProgram_heading_blockAccess().getIDENTIFIERTerminalRuleCall_1()); 
    }
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_heading_blockAccess().getLeftParenthesisKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getProgram_heading_blockAccess().getIdentifier_listParserRuleCall_2_1()); 
    }
    this_identifier_list_3=ruleidentifier_list    {
		$current.merge(this_identifier_list_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_heading_blockAccess().getRightParenthesisKeyword_2_2()); 
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_heading_blockAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleidentifier_list
entryRuleidentifier_list returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifier_listRule()); } 
	 iv_ruleidentifier_list=ruleidentifier_list 
	 { $current=$iv_ruleidentifier_list.current.getText(); }  
	 EOF 
;

// Rule identifier_list
ruleidentifier_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_0()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdentifier_listAccess().getCommaKeyword_1_0()); 
    }
    this_IDENTIFIER_2=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_2);
    }

    { 
    newLeafNode(this_IDENTIFIER_2, grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_1_1()); 
    }
)*)?
    ;





// Entry rule entryRuleblock
entryRuleblock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); } 
	 iv_ruleblock=ruleblock 
	 { $current=$iv_ruleblock.current.getText(); }  
	 EOF 
;

// Rule block
ruleblock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBlockAccess().getDeclaration_partParserRuleCall_0()); 
    }
    this_declaration_part_0=ruledeclaration_part    {
		$current.merge(this_declaration_part_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getBlockAccess().getStatement_partParserRuleCall_1()); 
    }
    this_statement_part_1=rulestatement_part    {
		$current.merge(this_statement_part_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulestatement_part
entryRulestatement_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_partRule()); } 
	 iv_rulestatement_part=rulestatement_part 
	 { $current=$iv_rulestatement_part.current.getText(); }  
	 EOF 
;

// Rule statement_part
rulestatement_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='begin' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatement_partAccess().getBeginKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatement_partAccess().getStatement_sequenceParserRuleCall_1()); 
    }
    this_statement_sequence_1=rulestatement_sequence    {
		$current.merge(this_statement_sequence_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='end' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatement_partAccess().getEndKeyword_2()); 
    }
)
    ;





// Entry rule entryRulestatement_sequence
entryRulestatement_sequence returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_sequenceRule()); } 
	 iv_rulestatement_sequence=rulestatement_sequence 
	 { $current=$iv_rulestatement_sequence.current.getText(); }  
	 EOF 
;

// Rule statement_sequence
rulestatement_sequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatement_sequenceAccess().getStatementParserRuleCall_0()); 
    }
    this_statement_0=rulestatement    {
		$current.merge(this_statement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatement_sequenceAccess().getSemicolonKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatement_sequenceAccess().getStatementParserRuleCall_1_1()); 
    }
    this_statement_2=rulestatement    {
		$current.merge(this_statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRulestatement
entryRulestatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); } 
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current.getText(); }  
	 EOF 
;

// Rule statement
rulestatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getLabelParserRuleCall_0_0()); 
    }
    this_label_0=rulelabel    {
		$current.merge(this_label_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getColonKeyword_0_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSimple_statementParserRuleCall_1()); 
    }
    this_simple_statement_2=rulesimple_statement    {
		$current.merge(this_simple_statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulelabel
entryRulelabel returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelRule()); } 
	 iv_rulelabel=rulelabel 
	 { $current=$iv_rulelabel.current.getText(); }  
	 EOF 
;

// Rule label
rulelabel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INTEGER_NUMBER_0=RULE_INTEGER_NUMBER    {
		$current.merge(this_INTEGER_NUMBER_0);
    }

    { 
    newLeafNode(this_INTEGER_NUMBER_0, grammarAccess.getLabelAccess().getINTEGER_NUMBERTerminalRuleCall()); 
    }

    ;





// Entry rule entryRulesimple_statement
entryRulesimple_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_statementRule()); } 
	 iv_rulesimple_statement=rulesimple_statement 
	 { $current=$iv_rulesimple_statement.current.getText(); }  
	 EOF 
;

// Rule simple_statement
rulesimple_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSimple_statementAccess().getAssignment_statementParserRuleCall()); 
    }
    this_assignment_statement_0=ruleassignment_statement    {
		$current.merge(this_assignment_statement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    ;





// Entry rule entryRuleassignment_statement
entryRuleassignment_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignment_statementRule()); } 
	 iv_ruleassignment_statement=ruleassignment_statement 
	 { $current=$iv_ruleassignment_statement.current.getText(); }  
	 EOF 
;

// Rule assignment_statement
ruleassignment_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssignment_statementAccess().getVariableParserRuleCall_0()); 
    }
    this_variable_0=rulevariable    {
		$current.merge(this_variable_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignment_statementAccess().getColonEqualsSignKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getAssignment_statementAccess().getExpressionParserRuleCall_2()); 
    }
    this_expression_2=ruleexpression    {
		$current.merge(this_expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulevariable
entryRulevariable returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); } 
	 iv_rulevariable=rulevariable 
	 { $current=$iv_rulevariable.current.getText(); }  
	 EOF 
;

// Rule variable
rulevariable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getVariableAccess().getEntire_variableParserRuleCall()); 
    }
    this_entire_variable_0=ruleentire_variable    {
		$current.merge(this_entire_variable_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleentire_variable
entryRuleentire_variable returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntire_variableRule()); } 
	 iv_ruleentire_variable=ruleentire_variable 
	 { $current=$iv_ruleentire_variable.current.getText(); }  
	 EOF 
;

// Rule entire_variable
ruleentire_variable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getEntire_variableAccess().getVariable_identifierParserRuleCall()); 
    }
    this_variable_identifier_0=rulevariable_identifier    {
		$current.merge(this_variable_identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulevariable_identifier
entryRulevariable_identifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_identifierRule()); } 
	 iv_rulevariable_identifier=rulevariable_identifier 
	 { $current=$iv_rulevariable_identifier.current.getText(); }  
	 EOF 
;

// Rule variable_identifier
rulevariable_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getVariable_identifierAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleexpression
entryRuleexpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); } 
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current.getText(); }  
	 EOF 
;

// Rule expression
ruleexpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getSimple_expressionParserRuleCall_0()); 
    }
    this_simple_expression_0=rulesimple_expression    {
		$current.merge(this_simple_expression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getRelation_operatorParserRuleCall_1_0()); 
    }
    this_relation_operator_1=rulerelation_operator    {
		$current.merge(this_relation_operator_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getSimple_expressionParserRuleCall_1_1()); 
    }
    this_simple_expression_2=rulesimple_expression    {
		$current.merge(this_simple_expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRulerelation_operator
entryRulerelation_operator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelation_operatorRule()); } 
	 iv_rulerelation_operator=rulerelation_operator 
	 { $current=$iv_rulerelation_operator.current.getText(); }  
	 EOF 
;

// Rule relation_operator
rulerelation_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelation_operatorAccess().getEqualsSignKeyword_0()); 
    }

    |
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelation_operatorAccess().getLessThanSignGreaterThanSignKeyword_1()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelation_operatorAccess().getLessThanSignKeyword_2()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelation_operatorAccess().getLessThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelation_operatorAccess().getGreaterThanSignKeyword_4()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelation_operatorAccess().getGreaterThanSignEqualsSignKeyword_5()); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelation_operatorAccess().getInKeyword_6()); 
    }
)
    ;





// Entry rule entryRulesimple_expression
entryRulesimple_expression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_expressionRule()); } 
	 iv_rulesimple_expression=rulesimple_expression 
	 { $current=$iv_rulesimple_expression.current.getText(); }  
	 EOF 
;

// Rule simple_expression
rulesimple_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_SIGN_0=RULE_SIGN    {
		$current.merge(this_SIGN_0);
    }

    { 
    newLeafNode(this_SIGN_0, grammarAccess.getSimple_expressionAccess().getSIGNTerminalRuleCall_0()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getSimple_expressionAccess().getTermParserRuleCall_1()); 
    }
    this_term_1=ruleterm    {
		$current.merge(this_term_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getSimple_expressionAccess().getAddition_operatorParserRuleCall_2_0()); 
    }
    this_addition_operator_2=ruleaddition_operator    {
		$current.merge(this_addition_operator_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getSimple_expressionAccess().getTermParserRuleCall_2_1()); 
    }
    this_term_3=ruleterm    {
		$current.merge(this_term_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleaddition_operator
entryRuleaddition_operator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddition_operatorRule()); } 
	 iv_ruleaddition_operator=ruleaddition_operator 
	 { $current=$iv_ruleaddition_operator.current.getText(); }  
	 EOF 
;

// Rule addition_operator
ruleaddition_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAddition_operatorAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAddition_operatorAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAddition_operatorAccess().getOrKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleterm
entryRuleterm returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); } 
	 iv_ruleterm=ruleterm 
	 { $current=$iv_ruleterm.current.getText(); }  
	 EOF 
;

// Rule term
ruleterm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); 
    }
    this_factor_0=rulefactor    {
		$current.merge(this_factor_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getTermAccess().getMultiplication_operatorParserRuleCall_1_0()); 
    }
    this_multiplication_operator_1=rulemultiplication_operator    {
		$current.merge(this_multiplication_operator_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_1_1()); 
    }
    this_factor_2=rulefactor    {
		$current.merge(this_factor_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRulemultiplication_operator
entryRulemultiplication_operator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplication_operatorRule()); } 
	 iv_rulemultiplication_operator=rulemultiplication_operator 
	 { $current=$iv_rulemultiplication_operator.current.getText(); }  
	 EOF 
;

// Rule multiplication_operator
rulemultiplication_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplication_operatorAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplication_operatorAccess().getSolidusKeyword_1()); 
    }

    |
	kw='div' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplication_operatorAccess().getDivKeyword_2()); 
    }

    |
	kw='mod' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplication_operatorAccess().getModKeyword_3()); 
    }

    |
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiplication_operatorAccess().getAndKeyword_4()); 
    }
)
    ;





// Entry rule entryRulefactor
entryRulefactor returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactorRule()); } 
	 iv_rulefactor=rulefactor 
	 { $current=$iv_rulefactor.current.getText(); }  
	 EOF 
;

// Rule factor
rulefactor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFactorAccess().getVariableParserRuleCall_0()); 
    }
    this_variable_0=rulevariable    {
		$current.merge(this_variable_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFactorAccess().getNumberParserRuleCall_1()); 
    }
    this_number_1=rulenumber    {
		$current.merge(this_number_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulenumber
entryRulenumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_rulenumber=rulenumber 
	 { $current=$iv_rulenumber.current.getText(); }  
	 EOF 
;

// Rule number
rulenumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INTEGER_NUMBER_0=RULE_INTEGER_NUMBER    {
		$current.merge(this_INTEGER_NUMBER_0);
    }

    { 
    newLeafNode(this_INTEGER_NUMBER_0, grammarAccess.getNumberAccess().getINTEGER_NUMBERTerminalRuleCall_0()); 
    }

    |    this_REAL_NUMBER_1=RULE_REAL_NUMBER    {
		$current.merge(this_REAL_NUMBER_1);
    }

    { 
    newLeafNode(this_REAL_NUMBER_1, grammarAccess.getNumberAccess().getREAL_NUMBERTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuledeclaration_part
entryRuledeclaration_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaration_partRule()); } 
	 iv_ruledeclaration_part=ruledeclaration_part 
	 { $current=$iv_ruledeclaration_part.current.getText(); }  
	 EOF 
;

// Rule declaration_part
ruledeclaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getLabel_declaration_partParserRuleCall()); 
    }
    this_label_declaration_part_0=rulelabel_declaration_part    {
		$current.merge(this_label_declaration_part_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    ;





// Entry rule entryRulelabel_declaration_part
entryRulelabel_declaration_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabel_declaration_partRule()); } 
	 iv_rulelabel_declaration_part=rulelabel_declaration_part 
	 { $current=$iv_rulelabel_declaration_part.current.getText(); }  
	 EOF 
;

// Rule label_declaration_part
rulelabel_declaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='label' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabel_declaration_partAccess().getLabelKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_1()); 
    }
    this_label_1=rulelabel    {
		$current.merge(this_label_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabel_declaration_partAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_2_1()); 
    }
    this_label_3=rulelabel    {
		$current.merge(this_label_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabel_declaration_partAccess().getSemicolonKeyword_3()); 
    }
)
    ;





RULE_INTEGER_NUMBER : RULE_DIGIT_SEQUENCE;

RULE_REAL_NUMBER : (RULE_DIGIT_SEQUENCE '.' RULE_UNSIGNED_DIGIT_SEQUENCE? RULE_SCALE_FACTOR?|RULE_DIGIT_SEQUENCE RULE_SCALE_FACTOR);

RULE_IDENTIFIER : RULE_LETTER_EXTENDED (RULE_LETTER_EXTENDED|RULE_DIGIT)*;

RULE_SCALE_FACTOR : ('E'|'e') RULE_DIGIT_SEQUENCE;

RULE_DIGIT_SEQUENCE : RULE_SIGN? RULE_UNSIGNED_DIGIT_SEQUENCE;

RULE_UNSIGNED_DIGIT_SEQUENCE : RULE_DIGIT RULE_DIGIT*;

RULE_DIGIT : '0'..'9';

RULE_LETTER : ('A'..'Z'|'a'..'z');

RULE_LETTER_EXTENDED : (RULE_LETTER|'_');

RULE_SIGN : ('+'|'-');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



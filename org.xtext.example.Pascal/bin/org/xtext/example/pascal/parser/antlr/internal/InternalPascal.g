/*
* generated by Xtext
*/
grammar InternalPascal;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.pascal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.pascal.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.pascal.services.PascalGrammarAccess;

}

@parser::members {

 	private PascalGrammarAccess grammarAccess;
 	
    public InternalPascalParser(TokenStream input, PascalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "pascal";	
   	}
   	
   	@Override
   	protected PascalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulepascal
entryRulepascal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPascalRule()); }
	 iv_rulepascal=rulepascal 
	 { $current=$iv_rulepascal.current; } 
	 EOF 
;

// Rule pascal
rulepascal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPascalAccess().getProgramProgramParserRuleCall_0()); 
	    }
		lv_program_0_0=ruleprogram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPascalRule());
	        }
       		add(
       			$current, 
       			"program",
        		lv_program_0_0, 
        		"program");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleprogram
entryRuleprogram returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); } 
	 iv_ruleprogram=ruleprogram 
	 { $current=$iv_ruleprogram.current.getText(); }  
	 EOF 
;

// Rule program
ruleprogram returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProgramAccess().getProgram_heading_blockParserRuleCall_0()); 
    }
    this_program_heading_block_0=ruleprogram_heading_block    {
		$current.merge(this_program_heading_block_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getProgramAccess().getBlockParserRuleCall_1()); 
    }
    this_block_1=ruleblock    {
		$current.merge(this_block_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgramAccess().getFullStopKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleprogram_heading_block
entryRuleprogram_heading_block returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgram_heading_blockRule()); } 
	 iv_ruleprogram_heading_block=ruleprogram_heading_block 
	 { $current=$iv_ruleprogram_heading_block.current.getText(); }  
	 EOF 
;

// Rule program_heading_block
ruleprogram_heading_block returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='program' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_heading_blockAccess().getProgramKeyword_0()); 
    }
    this_IDENTIFIER_1=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_1);
    }

    { 
    newLeafNode(this_IDENTIFIER_1, grammarAccess.getProgram_heading_blockAccess().getIDENTIFIERTerminalRuleCall_1()); 
    }
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_heading_blockAccess().getLeftParenthesisKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getProgram_heading_blockAccess().getIdentifier_listParserRuleCall_2_1()); 
    }
    this_identifier_list_3=ruleidentifier_list    {
		$current.merge(this_identifier_list_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_heading_blockAccess().getRightParenthesisKeyword_2_2()); 
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_heading_blockAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleidentifier_list
entryRuleidentifier_list returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifier_listRule()); } 
	 iv_ruleidentifier_list=ruleidentifier_list 
	 { $current=$iv_ruleidentifier_list.current.getText(); }  
	 EOF 
;

// Rule identifier_list
ruleidentifier_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_0()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdentifier_listAccess().getCommaKeyword_1_0()); 
    }
    this_IDENTIFIER_2=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_2);
    }

    { 
    newLeafNode(this_IDENTIFIER_2, grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleblock
entryRuleblock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); } 
	 iv_ruleblock=ruleblock 
	 { $current=$iv_ruleblock.current.getText(); }  
	 EOF 
;

// Rule block
ruleblock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBlockAccess().getDeclaration_partParserRuleCall_0()); 
    }
    this_declaration_part_0=ruledeclaration_part    {
		$current.merge(this_declaration_part_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getBlockAccess().getStatement_partParserRuleCall_1()); 
    }
    this_statement_part_1=rulestatement_part    {
		$current.merge(this_statement_part_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulestatement_part
entryRulestatement_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_partRule()); } 
	 iv_rulestatement_part=rulestatement_part 
	 { $current=$iv_rulestatement_part.current.getText(); }  
	 EOF 
;

// Rule statement_part
rulestatement_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_BEGIN_KEYWORD_0=RULE_BEGIN_KEYWORD    {
		$current.merge(this_BEGIN_KEYWORD_0);
    }

    { 
    newLeafNode(this_BEGIN_KEYWORD_0, grammarAccess.getStatement_partAccess().getBEGIN_KEYWORDTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatement_partAccess().getStatement_sequenceParserRuleCall_1()); 
    }
    this_statement_sequence_1=rulestatement_sequence    {
		$current.merge(this_statement_sequence_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_END_KEYWORD_2=RULE_END_KEYWORD    {
		$current.merge(this_END_KEYWORD_2);
    }

    { 
    newLeafNode(this_END_KEYWORD_2, grammarAccess.getStatement_partAccess().getEND_KEYWORDTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRulestatement_sequence
entryRulestatement_sequence returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_sequenceRule()); } 
	 iv_rulestatement_sequence=rulestatement_sequence 
	 { $current=$iv_rulestatement_sequence.current.getText(); }  
	 EOF 
;

// Rule statement_sequence
rulestatement_sequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatement_sequenceAccess().getStatementParserRuleCall_0()); 
    }
    this_statement_0=rulestatement    {
		$current.merge(this_statement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatement_sequenceAccess().getSemicolonKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatement_sequenceAccess().getStatementParserRuleCall_1_1()); 
    }
    this_statement_2=rulestatement    {
		$current.merge(this_statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRulestatement
entryRulestatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); } 
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current.getText(); }  
	 EOF 
;

// Rule statement
rulestatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getLabelParserRuleCall_0_0()); 
    }
    this_label_0=rulelabel    {
		$current.merge(this_label_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getColonKeyword_0_1()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSimple_statementParserRuleCall_1_0()); 
    }
    this_simple_statement_2=rulesimple_statement    {
		$current.merge(this_simple_statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStructured_statementParserRuleCall_1_1()); 
    }
    this_structured_statement_3=rulestructured_statement    {
		$current.merge(this_structured_statement_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRulelabel
entryRulelabel returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelRule()); } 
	 iv_rulelabel=rulelabel 
	 { $current=$iv_rulelabel.current.getText(); }  
	 EOF 
;

// Rule label
rulelabel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INTEGER_NUMBER_0=RULE_INTEGER_NUMBER    {
		$current.merge(this_INTEGER_NUMBER_0);
    }

    { 
    newLeafNode(this_INTEGER_NUMBER_0, grammarAccess.getLabelAccess().getINTEGER_NUMBERTerminalRuleCall()); 
    }

    ;





// Entry rule entryRulesimple_statement
entryRulesimple_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_statementRule()); } 
	 iv_rulesimple_statement=rulesimple_statement 
	 { $current=$iv_rulesimple_statement.current.getText(); }  
	 EOF 
;

// Rule simple_statement
rulesimple_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSimple_statementAccess().getAssignment_statementParserRuleCall_0()); 
    }
    this_assignment_statement_0=ruleassignment_statement    {
		$current.merge(this_assignment_statement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimple_statementAccess().getFunction_designatorParserRuleCall_1()); 
    }
    this_function_designator_1=rulefunction_designator    {
		$current.merge(this_function_designator_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimple_statementAccess().getGoto_statementParserRuleCall_2()); 
    }
    this_goto_statement_2=rulegoto_statement    {
		$current.merge(this_goto_statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    ;





// Entry rule entryRuleassignment_statement
entryRuleassignment_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignment_statementRule()); } 
	 iv_ruleassignment_statement=ruleassignment_statement 
	 { $current=$iv_ruleassignment_statement.current.getText(); }  
	 EOF 
;

// Rule assignment_statement
ruleassignment_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssignment_statementAccess().getVariableParserRuleCall_0()); 
    }
    this_variable_0=rulevariable    {
		$current.merge(this_variable_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignment_statementAccess().getColonEqualsSignKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getAssignment_statementAccess().getExpressionParserRuleCall_2()); 
    }
    this_expression_2=ruleexpression    {
		$current.merge(this_expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulevariable
entryRulevariable returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); } 
	 iv_rulevariable=rulevariable 
	 { $current=$iv_rulevariable.current.getText(); }  
	 EOF 
;

// Rule variable
rulevariable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getVariableAccess().getEntire_variableParserRuleCall()); 
    }
    this_entire_variable_0=ruleentire_variable    {
		$current.merge(this_entire_variable_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleentire_variable
entryRuleentire_variable returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntire_variableRule()); } 
	 iv_ruleentire_variable=ruleentire_variable 
	 { $current=$iv_ruleentire_variable.current.getText(); }  
	 EOF 
;

// Rule entire_variable
ruleentire_variable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getEntire_variableAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;







// Entry rule entryRuleindexed_variable
entryRuleindexed_variable returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexed_variableRule()); } 
	 iv_ruleindexed_variable=ruleindexed_variable 
	 { $current=$iv_ruleindexed_variable.current.getText(); }  
	 EOF 
;

// Rule indexed_variable
ruleindexed_variable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIndexed_variableAccess().getVariableParserRuleCall_0()); 
    }
    this_variable_0=rulevariable    {
		$current.merge(this_variable_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexed_variableAccess().getLeftSquareBracketKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getIndexed_variableAccess().getExpression_listParserRuleCall_2()); 
    }
    this_expression_list_2=ruleexpression_list    {
		$current.merge(this_expression_list_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIndexed_variableAccess().getRightSquareBracketKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleexpression_list
entryRuleexpression_list returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_listRule()); } 
	 iv_ruleexpression_list=ruleexpression_list 
	 { $current=$iv_ruleexpression_list.current.getText(); }  
	 EOF 
;

// Rule expression_list
ruleexpression_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpression_listAccess().getExpressionParserRuleCall_0()); 
    }
    this_expression_0=ruleexpression    {
		$current.merge(this_expression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpression_listAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpression_listAccess().getExpressionParserRuleCall_1_1()); 
    }
    this_expression_2=ruleexpression    {
		$current.merge(this_expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleexpression
entryRuleexpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); } 
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current.getText(); }  
	 EOF 
;

// Rule expression
ruleexpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getSimple_expressionParserRuleCall_0()); 
    }
    this_simple_expression_0=rulesimple_expression    {
		$current.merge(this_simple_expression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_RELATIONAL_OPERATOR_1=RULE_RELATIONAL_OPERATOR    {
		$current.merge(this_RELATIONAL_OPERATOR_1);
    }

    { 
    newLeafNode(this_RELATIONAL_OPERATOR_1, grammarAccess.getExpressionAccess().getRELATIONAL_OPERATORTerminalRuleCall_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getSimple_expressionParserRuleCall_1_1()); 
    }
    this_simple_expression_2=rulesimple_expression    {
		$current.merge(this_simple_expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRulesimple_expression
entryRulesimple_expression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_expressionRule()); } 
	 iv_rulesimple_expression=rulesimple_expression 
	 { $current=$iv_rulesimple_expression.current.getText(); }  
	 EOF 
;

// Rule simple_expression
rulesimple_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_ADDITION_OPERATOR_0=RULE_ADDITION_OPERATOR    {
		$current.merge(this_ADDITION_OPERATOR_0);
    }

    { 
    newLeafNode(this_ADDITION_OPERATOR_0, grammarAccess.getSimple_expressionAccess().getADDITION_OPERATORTerminalRuleCall_0()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getSimple_expressionAccess().getTermParserRuleCall_1()); 
    }
    this_term_1=ruleterm    {
		$current.merge(this_term_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((((    this_ADDITION_OPERATOR_2=RULE_ADDITION_OPERATOR    {
		$current.merge(this_ADDITION_OPERATOR_2);
    }

    { 
    newLeafNode(this_ADDITION_OPERATOR_2, grammarAccess.getSimple_expressionAccess().getADDITION_OPERATORTerminalRuleCall_2_0_0_0()); 
    }
)+
    |    this_OR_KEYWORD_3=RULE_OR_KEYWORD    {
		$current.merge(this_OR_KEYWORD_3);
    }

    { 
    newLeafNode(this_OR_KEYWORD_3, grammarAccess.getSimple_expressionAccess().getOR_KEYWORDTerminalRuleCall_2_0_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getSimple_expressionAccess().getTermParserRuleCall_2_0_1()); 
    }
    this_term_4=ruleterm    {
		$current.merge(this_term_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getSimple_expressionAccess().getSigned_numberParserRuleCall_2_1()); 
    }
    this_signed_number_5=rulesigned_number    {
		$current.merge(this_signed_number_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleterm
entryRuleterm returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); } 
	 iv_ruleterm=ruleterm 
	 { $current=$iv_ruleterm.current.getText(); }  
	 EOF 
;

// Rule term
ruleterm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); 
    }
    this_factor_0=rulefactor    {
		$current.merge(this_factor_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_MULTIPLICATION_OPERATOR_1=RULE_MULTIPLICATION_OPERATOR    {
		$current.merge(this_MULTIPLICATION_OPERATOR_1);
    }

    { 
    newLeafNode(this_MULTIPLICATION_OPERATOR_1, grammarAccess.getTermAccess().getMULTIPLICATION_OPERATORTerminalRuleCall_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_1_1()); 
    }
    this_factor_2=rulefactor    {
		$current.merge(this_factor_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRulefactor
entryRulefactor returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactorRule()); } 
	 iv_rulefactor=rulefactor 
	 { $current=$iv_rulefactor.current.getText(); }  
	 EOF 
;

// Rule factor
rulefactor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFactorAccess().getVariableParserRuleCall_0()); 
    }
    this_variable_0=rulevariable    {
		$current.merge(this_variable_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFactorAccess().getNumberParserRuleCall_1()); 
    }
    this_number_1=rulenumber    {
		$current.merge(this_number_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getFactorAccess().getSTRINGTerminalRuleCall_2()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getFactorAccess().getSetParserRuleCall_3()); 
    }
    this_set_3=ruleset    {
		$current.merge(this_set_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_NIL_KEYWORD_4=RULE_NIL_KEYWORD    {
		$current.merge(this_NIL_KEYWORD_4);
    }

    { 
    newLeafNode(this_NIL_KEYWORD_4, grammarAccess.getFactorAccess().getNIL_KEYWORDTerminalRuleCall_4()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getFactorAccess().getFunction_designatorParserRuleCall_5()); 
    }
    this_function_designator_5=rulefunction_designator    {
		$current.merge(this_function_designator_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_6_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFactorAccess().getExpressionParserRuleCall_6_1()); 
    }
    this_expression_7=ruleexpression    {
		$current.merge(this_expression_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFactorAccess().getRightParenthesisKeyword_6_2()); 
    }
)
    |(    this_NOT_KEYWORD_9=RULE_NOT_KEYWORD    {
		$current.merge(this_NOT_KEYWORD_9);
    }

    { 
    newLeafNode(this_NOT_KEYWORD_9, grammarAccess.getFactorAccess().getNOT_KEYWORDTerminalRuleCall_7_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFactorAccess().getFactorParserRuleCall_7_1()); 
    }
    this_factor_10=rulefactor    {
		$current.merge(this_factor_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRulenumber
entryRulenumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_rulenumber=rulenumber 
	 { $current=$iv_rulenumber.current.getText(); }  
	 EOF 
;

// Rule number
rulenumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberAccess().getUnsigned_numberParserRuleCall_0()); 
    }
    this_unsigned_number_0=ruleunsigned_number    {
		$current.merge(this_unsigned_number_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberAccess().getSigned_numberParserRuleCall_1()); 
    }
    this_signed_number_1=rulesigned_number    {
		$current.merge(this_signed_number_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleunsigned_number
entryRuleunsigned_number returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnsigned_numberRule()); } 
	 iv_ruleunsigned_number=ruleunsigned_number 
	 { $current=$iv_ruleunsigned_number.current.getText(); }  
	 EOF 
;

// Rule unsigned_number
ruleunsigned_number returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INTEGER_NUMBER_0=RULE_INTEGER_NUMBER    {
		$current.merge(this_INTEGER_NUMBER_0);
    }

    { 
    newLeafNode(this_INTEGER_NUMBER_0, grammarAccess.getUnsigned_numberAccess().getINTEGER_NUMBERTerminalRuleCall_0()); 
    }

    |    this_REAL_NUMBER_1=RULE_REAL_NUMBER    {
		$current.merge(this_REAL_NUMBER_1);
    }

    { 
    newLeafNode(this_REAL_NUMBER_1, grammarAccess.getUnsigned_numberAccess().getREAL_NUMBERTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRulesigned_number
entryRulesigned_number returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSigned_numberRule()); } 
	 iv_rulesigned_number=rulesigned_number 
	 { $current=$iv_rulesigned_number.current.getText(); }  
	 EOF 
;

// Rule signed_number
rulesigned_number returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SIGNED_INTEGER_NUMBER_0=RULE_SIGNED_INTEGER_NUMBER    {
		$current.merge(this_SIGNED_INTEGER_NUMBER_0);
    }

    { 
    newLeafNode(this_SIGNED_INTEGER_NUMBER_0, grammarAccess.getSigned_numberAccess().getSIGNED_INTEGER_NUMBERTerminalRuleCall_0()); 
    }

    |    this_SIGNED_REAL_NUMBER_1=RULE_SIGNED_REAL_NUMBER    {
		$current.merge(this_SIGNED_REAL_NUMBER_1);
    }

    { 
    newLeafNode(this_SIGNED_REAL_NUMBER_1, grammarAccess.getSigned_numberAccess().getSIGNED_REAL_NUMBERTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleset
entryRuleset returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetRule()); } 
	 iv_ruleset=ruleset 
	 { $current=$iv_ruleset.current.getText(); }  
	 EOF 
;

// Rule set
ruleset returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSetAccess().getLeftSquareBracketKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getSetAccess().getExpression_listParserRuleCall_1()); 
    }
    this_expression_list_1=ruleexpression_list    {
		$current.merge(this_expression_list_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSetAccess().getRightSquareBracketKeyword_2()); 
    }
)
    ;





// Entry rule entryRulefunction_designator
entryRulefunction_designator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunction_designatorRule()); } 
	 iv_rulefunction_designator=rulefunction_designator 
	 { $current=$iv_rulefunction_designator.current.getText(); }  
	 EOF 
;

// Rule function_designator
rulefunction_designator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getFunction_designatorAccess().getIDENTIFIERTerminalRuleCall_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunction_designatorAccess().getLeftParenthesisKeyword_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getFunction_designatorAccess().getExpression_listParserRuleCall_2()); 
    }
    this_expression_list_2=ruleexpression_list    {
		$current.merge(this_expression_list_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunction_designatorAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;





// Entry rule entryRulestructured_statement
entryRulestructured_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructured_statementRule()); } 
	 iv_rulestructured_statement=rulestructured_statement 
	 { $current=$iv_rulestructured_statement.current.getText(); }  
	 EOF 
;

// Rule structured_statement
rulestructured_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStructured_statementAccess().getCompound_statementParserRuleCall_0()); 
    }
    this_compound_statement_0=rulecompound_statement    {
		$current.merge(this_compound_statement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructured_statementAccess().getRepetitive_statementParserRuleCall_1()); 
    }
    this_repetitive_statement_1=rulerepetitive_statement    {
		$current.merge(this_repetitive_statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructured_statementAccess().getConditional_statementParserRuleCall_2()); 
    }
    this_conditional_statement_2=ruleconditional_statement    {
		$current.merge(this_conditional_statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructured_statementAccess().getWith_statementParserRuleCall_3()); 
    }
    this_with_statement_3=rulewith_statement    {
		$current.merge(this_with_statement_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulecompound_statement
entryRulecompound_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompound_statementRule()); } 
	 iv_rulecompound_statement=rulecompound_statement 
	 { $current=$iv_rulecompound_statement.current.getText(); }  
	 EOF 
;

// Rule compound_statement
rulecompound_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_BEGIN_KEYWORD_0=RULE_BEGIN_KEYWORD    {
		$current.merge(this_BEGIN_KEYWORD_0);
    }

    { 
    newLeafNode(this_BEGIN_KEYWORD_0, grammarAccess.getCompound_statementAccess().getBEGIN_KEYWORDTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCompound_statementAccess().getStatement_sequenceParserRuleCall_1()); 
    }
    this_statement_sequence_1=rulestatement_sequence    {
		$current.merge(this_statement_sequence_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_END_KEYWORD_2=RULE_END_KEYWORD    {
		$current.merge(this_END_KEYWORD_2);
    }

    { 
    newLeafNode(this_END_KEYWORD_2, grammarAccess.getCompound_statementAccess().getEND_KEYWORDTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRulerepetitive_statement
entryRulerepetitive_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRepetitive_statementRule()); } 
	 iv_rulerepetitive_statement=rulerepetitive_statement 
	 { $current=$iv_rulerepetitive_statement.current.getText(); }  
	 EOF 
;

// Rule repetitive_statement
rulerepetitive_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRepetitive_statementAccess().getWhile_statementParserRuleCall_0()); 
    }
    this_while_statement_0=rulewhile_statement    {
		$current.merge(this_while_statement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRepetitive_statementAccess().getRepeat_statementParserRuleCall_1()); 
    }
    this_repeat_statement_1=rulerepeat_statement    {
		$current.merge(this_repeat_statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRepetitive_statementAccess().getFor_statementParserRuleCall_2()); 
    }
    this_for_statement_2=rulefor_statement    {
		$current.merge(this_for_statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulewhile_statement
entryRulewhile_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhile_statementRule()); } 
	 iv_rulewhile_statement=rulewhile_statement 
	 { $current=$iv_rulewhile_statement.current.getText(); }  
	 EOF 
;

// Rule while_statement
rulewhile_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_WHILE_KEYWORD_0=RULE_WHILE_KEYWORD    {
		$current.merge(this_WHILE_KEYWORD_0);
    }

    { 
    newLeafNode(this_WHILE_KEYWORD_0, grammarAccess.getWhile_statementAccess().getWHILE_KEYWORDTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getWhile_statementAccess().getExpressionParserRuleCall_1()); 
    }
    this_expression_1=ruleexpression    {
		$current.merge(this_expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_DO_KEYWORD_2=RULE_DO_KEYWORD    {
		$current.merge(this_DO_KEYWORD_2);
    }

    { 
    newLeafNode(this_DO_KEYWORD_2, grammarAccess.getWhile_statementAccess().getDO_KEYWORDTerminalRuleCall_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getWhile_statementAccess().getStatementParserRuleCall_3()); 
    }
    this_statement_3=rulestatement    {
		$current.merge(this_statement_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulerepeat_statement
entryRulerepeat_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRepeat_statementRule()); } 
	 iv_rulerepeat_statement=rulerepeat_statement 
	 { $current=$iv_rulerepeat_statement.current.getText(); }  
	 EOF 
;

// Rule repeat_statement
rulerepeat_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_REPEAT_KEYWORD_0=RULE_REPEAT_KEYWORD    {
		$current.merge(this_REPEAT_KEYWORD_0);
    }

    { 
    newLeafNode(this_REPEAT_KEYWORD_0, grammarAccess.getRepeat_statementAccess().getREPEAT_KEYWORDTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getRepeat_statementAccess().getStatement_sequenceParserRuleCall_1()); 
    }
    this_statement_sequence_1=rulestatement_sequence    {
		$current.merge(this_statement_sequence_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_UNTIL_KEYWORD_2=RULE_UNTIL_KEYWORD    {
		$current.merge(this_UNTIL_KEYWORD_2);
    }

    { 
    newLeafNode(this_UNTIL_KEYWORD_2, grammarAccess.getRepeat_statementAccess().getUNTIL_KEYWORDTerminalRuleCall_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getRepeat_statementAccess().getExpressionParserRuleCall_3()); 
    }
    this_expression_3=ruleexpression    {
		$current.merge(this_expression_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulefor_statement
entryRulefor_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_statementRule()); } 
	 iv_rulefor_statement=rulefor_statement 
	 { $current=$iv_rulefor_statement.current.getText(); }  
	 EOF 
;

// Rule for_statement
rulefor_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_FOR_KEYWORD_0=RULE_FOR_KEYWORD    {
		$current.merge(this_FOR_KEYWORD_0);
    }

    { 
    newLeafNode(this_FOR_KEYWORD_0, grammarAccess.getFor_statementAccess().getFOR_KEYWORDTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFor_statementAccess().getAssignment_statementParserRuleCall_1()); 
    }
    this_assignment_statement_1=ruleassignment_statement    {
		$current.merge(this_assignment_statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_TO_KEYWORD_2=RULE_TO_KEYWORD    {
		$current.merge(this_TO_KEYWORD_2);
    }

    { 
    newLeafNode(this_TO_KEYWORD_2, grammarAccess.getFor_statementAccess().getTO_KEYWORDTerminalRuleCall_2_0()); 
    }

    |    this_DOWNTO_KEYWORD_3=RULE_DOWNTO_KEYWORD    {
		$current.merge(this_DOWNTO_KEYWORD_3);
    }

    { 
    newLeafNode(this_DOWNTO_KEYWORD_3, grammarAccess.getFor_statementAccess().getDOWNTO_KEYWORDTerminalRuleCall_2_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getFor_statementAccess().getExpressionParserRuleCall_3()); 
    }
    this_expression_4=ruleexpression    {
		$current.merge(this_expression_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_DO_KEYWORD_5=RULE_DO_KEYWORD    {
		$current.merge(this_DO_KEYWORD_5);
    }

    { 
    newLeafNode(this_DO_KEYWORD_5, grammarAccess.getFor_statementAccess().getDO_KEYWORDTerminalRuleCall_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getFor_statementAccess().getStatementParserRuleCall_5()); 
    }
    this_statement_6=rulestatement    {
		$current.merge(this_statement_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleconditional_statement
entryRuleconditional_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditional_statementRule()); } 
	 iv_ruleconditional_statement=ruleconditional_statement 
	 { $current=$iv_ruleconditional_statement.current.getText(); }  
	 EOF 
;

// Rule conditional_statement
ruleconditional_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConditional_statementAccess().getIf_statementParserRuleCall_0()); 
    }
    this_if_statement_0=ruleif_statement    {
		$current.merge(this_if_statement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditional_statementAccess().getCase_statementParserRuleCall_1()); 
    }
    this_case_statement_1=rulecase_statement    {
		$current.merge(this_case_statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleif_statement
entryRuleif_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIf_statementRule()); } 
	 iv_ruleif_statement=ruleif_statement 
	 { $current=$iv_ruleif_statement.current.getText(); }  
	 EOF 
;

// Rule if_statement
ruleif_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IF_KEYWORD_0=RULE_IF_KEYWORD    {
		$current.merge(this_IF_KEYWORD_0);
    }

    { 
    newLeafNode(this_IF_KEYWORD_0, grammarAccess.getIf_statementAccess().getIF_KEYWORDTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getIf_statementAccess().getExpressionParserRuleCall_1()); 
    }
    this_expression_1=ruleexpression    {
		$current.merge(this_expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_THEN_KEYWORD_2=RULE_THEN_KEYWORD    {
		$current.merge(this_THEN_KEYWORD_2);
    }

    { 
    newLeafNode(this_THEN_KEYWORD_2, grammarAccess.getIf_statementAccess().getTHEN_KEYWORDTerminalRuleCall_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getIf_statementAccess().getStatementParserRuleCall_3()); 
    }
    this_statement_3=rulestatement    {
		$current.merge(this_statement_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_ELSE_KEYWORD_4=RULE_ELSE_KEYWORD    {
		$current.merge(this_ELSE_KEYWORD_4);
    }

    { 
    newLeafNode(this_ELSE_KEYWORD_4, grammarAccess.getIf_statementAccess().getELSE_KEYWORDTerminalRuleCall_4_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getIf_statementAccess().getStatementParserRuleCall_4_1()); 
    }
    this_statement_5=rulestatement    {
		$current.merge(this_statement_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRulecase_statement
entryRulecase_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCase_statementRule()); } 
	 iv_rulecase_statement=rulecase_statement 
	 { $current=$iv_rulecase_statement.current.getText(); }  
	 EOF 
;

// Rule case_statement
rulecase_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_CASE_KEYWORD_0=RULE_CASE_KEYWORD    {
		$current.merge(this_CASE_KEYWORD_0);
    }

    { 
    newLeafNode(this_CASE_KEYWORD_0, grammarAccess.getCase_statementAccess().getCASE_KEYWORDTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCase_statementAccess().getExpressionParserRuleCall_1()); 
    }
    this_expression_1=ruleexpression    {
		$current.merge(this_expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_OF_KEYWORD_2=RULE_OF_KEYWORD    {
		$current.merge(this_OF_KEYWORD_2);
    }

    { 
    newLeafNode(this_OF_KEYWORD_2, grammarAccess.getCase_statementAccess().getOF_KEYWORDTerminalRuleCall_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getCase_statementAccess().getCase_limbParserRuleCall_3()); 
    }
    this_case_limb_3=rulecase_limb    {
		$current.merge(this_case_limb_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCase_statementAccess().getSemicolonKeyword_4_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCase_statementAccess().getCase_limbParserRuleCall_4_1()); 
    }
    this_case_limb_5=rulecase_limb    {
		$current.merge(this_case_limb_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCase_statementAccess().getSemicolonKeyword_5()); 
    }
)?    this_END_KEYWORD_7=RULE_END_KEYWORD    {
		$current.merge(this_END_KEYWORD_7);
    }

    { 
    newLeafNode(this_END_KEYWORD_7, grammarAccess.getCase_statementAccess().getEND_KEYWORDTerminalRuleCall_6()); 
    }
)
    ;





// Entry rule entryRulecase_limb
entryRulecase_limb returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCase_limbRule()); } 
	 iv_rulecase_limb=rulecase_limb 
	 { $current=$iv_rulecase_limb.current.getText(); }  
	 EOF 
;

// Rule case_limb
rulecase_limb returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCase_limbAccess().getCase_label_listParserRuleCall_0()); 
    }
    this_case_label_list_0=rulecase_label_list    {
		$current.merge(this_case_label_list_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCase_limbAccess().getColonKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getCase_limbAccess().getStatementParserRuleCall_2()); 
    }
    this_statement_2=rulestatement    {
		$current.merge(this_statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulecase_label_list
entryRulecase_label_list returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCase_label_listRule()); } 
	 iv_rulecase_label_list=rulecase_label_list 
	 { $current=$iv_rulecase_label_list.current.getText(); }  
	 EOF 
;

// Rule case_label_list
rulecase_label_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCase_label_listAccess().getConstantParserRuleCall_0()); 
    }
    this_constant_0=ruleconstant    {
		$current.merge(this_constant_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCase_label_listAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCase_label_listAccess().getConstantParserRuleCall_1_1()); 
    }
    this_constant_2=ruleconstant    {
		$current.merge(this_constant_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleconstant
entryRuleconstant returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); } 
	 iv_ruleconstant=ruleconstant 
	 { $current=$iv_ruleconstant.current.getText(); }  
	 EOF 
;

// Rule constant
ruleconstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((    this_ADDITION_OPERATOR_0=RULE_ADDITION_OPERATOR    {
		$current.merge(this_ADDITION_OPERATOR_0);
    }

    { 
    newLeafNode(this_ADDITION_OPERATOR_0, grammarAccess.getConstantAccess().getADDITION_OPERATORTerminalRuleCall_0_0()); 
    }
)?(    this_IDENTIFIER_1=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_1);
    }

    { 
    newLeafNode(this_IDENTIFIER_1, grammarAccess.getConstantAccess().getIDENTIFIERTerminalRuleCall_0_1_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getNumberParserRuleCall_0_1_1()); 
    }
    this_number_2=rulenumber    {
		$current.merge(this_number_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    |    this_STRING_3=RULE_STRING    {
		$current.merge(this_STRING_3);
    }

    { 
    newLeafNode(this_STRING_3, grammarAccess.getConstantAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRulewith_statement
entryRulewith_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getWith_statementRule()); } 
	 iv_rulewith_statement=rulewith_statement 
	 { $current=$iv_rulewith_statement.current.getText(); }  
	 EOF 
;

// Rule with_statement
rulewith_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_WITH_KEYWORD_0=RULE_WITH_KEYWORD    {
		$current.merge(this_WITH_KEYWORD_0);
    }

    { 
    newLeafNode(this_WITH_KEYWORD_0, grammarAccess.getWith_statementAccess().getWITH_KEYWORDTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getWith_statementAccess().getVariableParserRuleCall_1()); 
    }
    this_variable_1=rulevariable    {
		$current.merge(this_variable_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWith_statementAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getWith_statementAccess().getVariableParserRuleCall_2_1()); 
    }
    this_variable_3=rulevariable    {
		$current.merge(this_variable_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*    this_DO_KEYWORD_4=RULE_DO_KEYWORD    {
		$current.merge(this_DO_KEYWORD_4);
    }

    { 
    newLeafNode(this_DO_KEYWORD_4, grammarAccess.getWith_statementAccess().getDO_KEYWORDTerminalRuleCall_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getWith_statementAccess().getStatementParserRuleCall_4()); 
    }
    this_statement_5=rulestatement    {
		$current.merge(this_statement_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulegoto_statement
entryRulegoto_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGoto_statementRule()); } 
	 iv_rulegoto_statement=rulegoto_statement 
	 { $current=$iv_rulegoto_statement.current.getText(); }  
	 EOF 
;

// Rule goto_statement
rulegoto_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_GOTO_KEYWORD_0=RULE_GOTO_KEYWORD    {
		$current.merge(this_GOTO_KEYWORD_0);
    }

    { 
    newLeafNode(this_GOTO_KEYWORD_0, grammarAccess.getGoto_statementAccess().getGOTO_KEYWORDTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getGoto_statementAccess().getLabelParserRuleCall_1()); 
    }
    this_label_1=rulelabel    {
		$current.merge(this_label_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuledeclaration_part
entryRuledeclaration_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaration_partRule()); } 
	 iv_ruledeclaration_part=ruledeclaration_part 
	 { $current=$iv_ruledeclaration_part.current.getText(); }  
	 EOF 
;

// Rule declaration_part
ruledeclaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getLabel_declaration_partParserRuleCall()); 
    }
    this_label_declaration_part_0=rulelabel_declaration_part    {
		$current.merge(this_label_declaration_part_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    ;





// Entry rule entryRulelabel_declaration_part
entryRulelabel_declaration_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabel_declaration_partRule()); } 
	 iv_rulelabel_declaration_part=rulelabel_declaration_part 
	 { $current=$iv_rulelabel_declaration_part.current.getText(); }  
	 EOF 
;

// Rule label_declaration_part
rulelabel_declaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_LABEL_KEYWORD_0=RULE_LABEL_KEYWORD    {
		$current.merge(this_LABEL_KEYWORD_0);
    }

    { 
    newLeafNode(this_LABEL_KEYWORD_0, grammarAccess.getLabel_declaration_partAccess().getLABEL_KEYWORDTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_1()); 
    }
    this_label_1=rulelabel    {
		$current.merge(this_label_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabel_declaration_partAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_2_1()); 
    }
    this_label_3=rulelabel    {
		$current.merge(this_label_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabel_declaration_partAccess().getSemicolonKeyword_3()); 
    }
)
    ;





RULE_ADDITION_OPERATOR : ('+'|'-');

RULE_MULTIPLICATION_OPERATOR : ('*'|'/'|'div'|'mod'|'and');

RULE_RELATIONAL_OPERATOR : ('='|'<>'|'<'|'<='|'>'|'>='|'in');

RULE_BEGIN_KEYWORD : 'begin';

RULE_END_KEYWORD : 'end';

RULE_LABEL_KEYWORD : 'label';

RULE_NIL_KEYWORD : 'nil';

RULE_NOT_KEYWORD : 'not';

RULE_OR_KEYWORD : 'or';

RULE_GOTO_KEYWORD : 'goto';

RULE_WHILE_KEYWORD : 'while';

RULE_DO_KEYWORD : 'do';

RULE_REPEAT_KEYWORD : 'repeat';

RULE_UNTIL_KEYWORD : 'until';

RULE_FOR_KEYWORD : 'for';

RULE_TO_KEYWORD : 'to';

RULE_DOWNTO_KEYWORD : 'downto';

RULE_IF_KEYWORD : 'if';

RULE_THEN_KEYWORD : 'then';

RULE_ELSE_KEYWORD : 'else';

RULE_CASE_KEYWORD : 'case';

RULE_OF_KEYWORD : 'of';

RULE_WITH_KEYWORD : 'with';

RULE_SIGNED_INTEGER_NUMBER : RULE_ADDITION_OPERATOR RULE_INTEGER_NUMBER;

RULE_INTEGER_NUMBER : RULE_UNSIGNED_DIGIT_SEQUENCE;

RULE_SIGNED_REAL_NUMBER : RULE_ADDITION_OPERATOR RULE_REAL_NUMBER;

RULE_REAL_NUMBER : (RULE_UNSIGNED_DIGIT_SEQUENCE '.' RULE_UNSIGNED_DIGIT_SEQUENCE? (('E'|'e') RULE_DIGIT_SEQUENCE)?|RULE_UNSIGNED_DIGIT_SEQUENCE ('E'|'e') RULE_DIGIT_SEQUENCE);

RULE_UNSIGNED_DIGIT_SEQUENCE : RULE_DIGIT+;

RULE_DIGIT_SEQUENCE : RULE_ADDITION_OPERATOR? RULE_UNSIGNED_DIGIT_SEQUENCE;

RULE_DIGIT : '0'..'9';

RULE_IDENTIFIER : RULE_LETTER_EXTENDED (RULE_LETTER_EXTENDED|RULE_DIGIT)*;

RULE_LETTER : ('A'..'Z'|'a'..'z');

RULE_LETTER_EXTENDED : (RULE_LETTER|'_');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


